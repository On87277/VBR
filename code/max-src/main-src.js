/** @license
 * RequireJS order 0.24.0 Copyright (c) 2010-2011, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/requirejs for details
 */
/*jslint nomen: false, plusplus: false, strict: false */
/*global require: false, define: false, window: false, document: false,
setTimeout: false */
(function () {
	//Sadly necessary browser inference due to differences in the way
	//that browsers load and execute dynamically inserted javascript
	//and whether the script/cache method works.
	//Currently, Gecko and Opera do not load/fire onload for scripts with
	//type="script/cache" but they execute injected scripts in order
	//unless the 'async' flag is present.
	//However, this is all changing in latest browsers implementing HTML5
	//spec. Firefox nightly supports using the .async true by default, and
	//if false, then it will execute in order. Favor that test first for forward
	//compatibility. However, it is unclear if webkit/IE will follow suit.
	//Latest webkit breaks the script/cache trick.
	//Test for document and window so that this file can be loaded in
	//a web worker/non-browser env. It will not make sense to use this
	//plugin in a non-browser env, but the file should not error out if included
	//in a file, then loaded in a non-browser env.
	var supportsInOrderExecution = typeof document !== "undefined" &&
		typeof window !== "undefined" &&
		(document.createElement("script").async ||
			(window.opera && Object.prototype.toString.call(window.opera) === "[object Opera]") ||
			//If Firefox 2 does not have to be supported, then
			//a better check may be:
			//('mozIsLocallyAvailable' in window.navigator)
			("MozAppearance" in document.documentElement.style)),
	readyRegExp = /^(complete|loaded)$/,
	waiting = [],
	cached = {};
	
	function loadResource(name, req, onLoad) {
		req([name], function (value) {
			//The value may be a real defined module. Wrap
			//it in a function call, because this function is used
			//as the factory function for this ordered dependency.
			onLoad(function () {
				return value;
			});
		});
	}
	
	//Callback used by the type="script/cache" callback that indicates a script
	//has finished downloading.
	function scriptCacheCallback(evt) {
		var node = evt.currentTarget || evt.srcElement,
		i,
		moduleName,
		resource;
		
		if (evt.type === "load" || readyRegExp.test(node.readyState)) {
			//Pull out the name of the module and the context.
			moduleName = node.getAttribute("data-requiremodule");
			
			//Mark this cache request as loaded
			cached[moduleName] = true;
			
			//Find out how many ordered modules have loaded
			for (i = 0; (resource = waiting[i]); i++) {
				if (cached[resource.name]) {
					loadResource(resource.name, resource.req, resource.onLoad);
				} else {
					//Something in the ordered list is not loaded,
					//so wait.
					break;
				}
			}
			
			//If just loaded some items, remove them from waiting.
			if (i > 0) {
				waiting.splice(0, i);
			}
			
			//Remove this script tag from the DOM
			//Use a setTimeout for cleanup because some older IE versions vomit
			//if removing a script node while it is being evaluated.
			setTimeout(function () {
				node.parentNode.removeChild(node);
			}, 15);
		}
	}
	
	define('order', {
		version : '0.24.0',
		
		load : function (name, req, onLoad, config) {
			var url = req.nameToUrl(name, null);
			
			//If a build, just load the module as usual.
			if (config.isBuild) {
				loadResource(name, req, onLoad);
				return;
			}
			
			//Make sure the async attribute is not set for any pathway involving
			//this script.
			require.s.skipAsync[url] = true;
			if (supportsInOrderExecution) {
				//Just a normal script tag append, but without async attribute
				//on the script.
				req([name], function (value) {
					//The value may be a real defined module. Wrap
					//it in a function call, because this function is used
					//as the factory function for this ordered dependency.
					onLoad(function () {
						return value;
					});
				});
			} else {
				//Credit to LABjs author Kyle Simpson for finding that scripts
				//with type="script/cache" allow scripts to be downloaded into
				//browser cache but not executed. Use that
				//so that subsequent addition of a real type="text/javascript"
				//tag will cause the scripts to be executed immediately in the
				//correct order.
				if (req.isDefined(name)) {
					req([name], function (value) {
						//The value may be a real defined module. Wrap
						//it in a function call, because this function is used
						//as the factory function for this ordered dependency.
						onLoad(function () {
							return value;
						});
					});
				} else {
					waiting.push({
						name : name,
						req : req,
						onLoad : onLoad
					});
					require.attach(url, "", name, scriptCacheCallback, "script/cache");
				}
			}
		}
	});
}
	());

/** @license
 * jQuery JavaScript Library v1.4.3
 * http://jquery.com/
 *
 * Copyright 2010, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 * Copyright 2010, The Dojo Foundation
 * Released under the MIT, BSD, and GPL Licenses.
 *
 * Date: Thu Oct 14 23:10:06 2010 -0400
 */

(function (window, undefined) {
	
	// Use the correct document accordingly with window argument (sandbox)
	var document = window.document;
	var jQuery = (function () {
		
		// Define a local copy of jQuery
		var jQuery = function (selector, context) {
			// The jQuery object is actually just the init constructor 'enhanced'
			return new jQuery.fn.init(selector, context);
		},
		
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,
		
		// Map over the $ in case of overwrite
		_$ = window.$,
		
		// A central reference to the root jQuery(document)
		rootjQuery,
		
		// A simple way to check for HTML strings or ID strings
		// (both of which we optimize for)
		quickExpr = /^(?:[^<]*(<[\w\W]+>)[^>]*$|#([\w\-]+)$)/,
		
		// Is it a simple selector
		isSimple = /^.[^:#\[\.,]*$/,
		
		// Check if a string has a non-whitespace character in it
		rnotwhite = /\S/,
		rwhite = /\s/,
		
		// Used for trimming whitespace
		trimLeft = /^\s+/,
		trimRight = /\s+$/,
		
		// Check for non-word characters
		rnonword = /\W/,
		
		// Check for digits
		rdigit = /\d/,
		
		// Match a standalone tag
		rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,
		
		// JSON RegExp
		rvalidchars = /^[\],:{}\s]*$/,
		rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
		rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
		rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
		
		// Useragent RegExp
		rwebkit = /(webkit)[ \/]([\w.]+)/,
		ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/,
		rmsie = /(msie) ([\w.]+)/,
		rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/,
		
		// Keep a UserAgent string for use with jQuery.browser
		userAgent = navigator.userAgent,
		
		// For matching the engine and version of the browser
		browserMatch,
		
		// Has the ready events already been bound?
		readyBound = false,
		
		// The functions to execute on DOM ready
		readyList = [],
		
		// The ready event handler
		DOMContentLoaded,
		
		// Save a reference to some core methods
		toString = Object.prototype.toString,
		hasOwn = Object.prototype.hasOwnProperty,
		push = Array.prototype.push,
		slice = Array.prototype.slice,
		trim = String.prototype.trim,
		indexOf = Array.prototype.indexOf,
		
		// [[Class]] -> type pairs
		class2type = {};
		
		jQuery.fn = jQuery.prototype = {
			init : function (selector, context) {
				var match,
				elem,
				ret,
				doc;
				
				// Handle $(""), $(null), or $(undefined)
				if (!selector) {
					return this;
				}
				
				// Handle $(DOMElement)
				if (selector.nodeType) {
					this.context = this[0] = selector;
					this.length = 1;
					return this;
				}
				
				// The body element only exists once, optimize finding it
				if (selector === "body" && !context && document.body) {
					this.context = document;
					this[0] = document.body;
					this.selector = "body";
					this.length = 1;
					return this;
				}
				
				// Handle HTML strings
				if (typeof selector === "string") {
					// Are we dealing with HTML string or an ID?
					match = quickExpr.exec(selector);
					
					// Verify a match, and that no context was specified for #id
					if (match && (match[1] || !context)) {
						
						// HANDLE: $(html) -> $(array)
						if (match[1]) {
							doc = (context ? context.ownerDocument || context : document);
							
							// If a single string is passed in and it's a single tag
							// just do a createElement and skip the rest
							ret = rsingleTag.exec(selector);
							
							if (ret) {
								if (jQuery.isPlainObject(context)) {
									selector = [document.createElement(ret[1])];
									jQuery.fn.attr.call(selector, context, true);
									
								} else {
									selector = [doc.createElement(ret[1])];
								}
								
							} else {
								ret = jQuery.buildFragment([match[1]], [doc]);
								selector = (ret.cacheable ? ret.fragment.cloneNode(true) : ret.fragment).childNodes;
							}
							
							return jQuery.merge(this, selector);
							
							// HANDLE: $("#id")
						} else {
							elem = document.getElementById(match[2]);
							
							// Check parentNode to catch when Blackberry 4.6 returns
							// nodes that are no longer in the document #6963
							if (elem && elem.parentNode) {
								// Handle the case where IE and Opera return items
								// by name instead of ID
								if (elem.id !== match[2]) {
									return rootjQuery.find(selector);
								}
								
								// Otherwise, we inject the element directly into the jQuery object
								this.length = 1;
								this[0] = elem;
							}
							
							this.context = document;
							this.selector = selector;
							return this;
						}
						
						// HANDLE: $("TAG")
					} else if (!context && !rnonword.test(selector)) {
						this.selector = selector;
						this.context = document;
						selector = document.getElementsByTagName(selector);
						return jQuery.merge(this, selector);
						
						// HANDLE: $(expr, $(...))
					} else if (!context || context.jquery) {
						return (context || rootjQuery).find(selector);
						
						// HANDLE: $(expr, context)
						// (which is just equivalent to: $(context).find(expr)
					} else {
						return jQuery(context).find(selector);
					}
					
					// HANDLE: $(function)
					// Shortcut for document ready
				} else if (jQuery.isFunction(selector)) {
					return rootjQuery.ready(selector);
				}
				
				if (selector.selector !== undefined) {
					this.selector = selector.selector;
					this.context = selector.context;
				}
				
				return jQuery.makeArray(selector, this);
			},
			
			// Start with an empty selector
			selector : "",
			
			// The current version of jQuery being used
			jquery : "1.4.3",
			
			// The default length of a jQuery object is 0
			length : 0,
			
			// The number of elements contained in the matched element set
			size : function () {
				return this.length;
			},
			
			toArray : function () {
				return slice.call(this, 0);
			},
			
			// Get the Nth element in the matched element set OR
			// Get the whole matched element set as a clean array
			get : function (num) {
				return num == null ?
				
				// Return a 'clean' array
				this.toArray() :
				
				// Return just the object
				(num < 0 ? this.slice(num)[0] : this[num]);
			},
			
			// Take an array of elements and push it onto the stack
			// (returning the new matched element set)
			pushStack : function (elems, name, selector) {
				// Build a new jQuery matched element set
				var ret = jQuery();
				
				if (jQuery.isArray(elems)) {
					push.apply(ret, elems);
					
				} else {
					jQuery.merge(ret, elems);
				}
				
				// Add the old object onto the stack (as a reference)
				ret.prevObject = this;
				
				ret.context = this.context;
				
				if (name === "find") {
					ret.selector = this.selector + (this.selector ? " " : "") + selector;
				} else if (name) {
					ret.selector = this.selector + "." + name + "(" + selector + ")";
				}
				
				// Return the newly-formed element set
				return ret;
			},
			
			// Execute a callback for every element in the matched set.
			// (You can seed the arguments with an array of args, but this is
			// only used internally.)
			each : function (callback, args) {
				return jQuery.each(this, callback, args);
			},
			
			ready : function (fn) {
				// Attach the listeners
				jQuery.bindReady();
				
				// If the DOM is already ready
				if (jQuery.isReady) {
					// Execute the function immediately
					fn.call(document, jQuery);
					
					// Otherwise, remember the function for later
				} else if (readyList) {
					// Add the function to the wait list
					readyList.push(fn);
				}
				
				return this;
			},
			
			eq : function (i) {
				return i === -1 ?
				this.slice(i) :
				this.slice(i, +i + 1);
			},
			
			first : function () {
				return this.eq(0);
			},
			
			last : function () {
				return this.eq(-1);
			},
			
			slice : function () {
				return this.pushStack(slice.apply(this, arguments),
					"slice", slice.call(arguments).join(","));
			},
			
			map : function (callback) {
				return this.pushStack(jQuery.map(this, function (elem, i) {
						return callback.call(elem, i, elem);
					}));
			},
			
			end : function () {
				return this.prevObject || jQuery(null);
			},
			
			// For internal use only.
			// Behaves like an Array's method, not like a jQuery method.
			push : push,
			sort : [].sort,
			splice : [].splice
		};
		
		// Give the init function the jQuery prototype for later instantiation
		jQuery.fn.init.prototype = jQuery.fn;
		
		jQuery.extend = jQuery.fn.extend = function () {
			// copy reference to target object
			var target = arguments[0] || {},
			i = 1,
			length = arguments.length,
			deep = false,
			options,
			name,
			src,
			copy,
			copyIsArray;
			
			// Handle a deep copy situation
			if (typeof target === "boolean") {
				deep = target;
				target = arguments[1] || {};
				// skip the boolean and the target
				i = 2;
			}
			
			// Handle case when target is a string or something (possible in deep copy)
			if (typeof target !== "object" && !jQuery.isFunction(target)) {
				target = {};
			}
			
			// extend jQuery itself if only one argument is passed
			if (length === i) {
				target = this;
				--i;
			}
			
			for (; i < length; i++) {
				// Only deal with non-null/undefined values
				if ((options = arguments[i]) != null) {
					// Extend the base object
					for (name in options) {
						src = target[name];
						copy = options[name];
						
						// Prevent never-ending loop
						if (target === copy) {
							continue;
						}
						
						// Recurse if we're merging plain objects or arrays
						if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
							if (copyIsArray) {
								copyIsArray = false;
								clone = src && jQuery.isArray(src) ? src : [];
								
							} else {
								clone = src && jQuery.isPlainObject(src) ? src : {};
							}
							
							// Never move original objects, clone them
							target[name] = jQuery.extend(deep, clone, copy);
							
							// Don't bring in undefined values
						} else if (copy !== undefined) {
							target[name] = copy;
						}
					}
				}
			}
			
			// Return the modified object
			return target;
		};
		
		jQuery.extend({
			noConflict : function (deep) {
				window.$ = _$;
				
				if (deep) {
					window.jQuery = _jQuery;
				}
				
				return jQuery;
			},
			
			// Is the DOM ready to be used? Set to true once it occurs.
			isReady : false,
			
			// A counter to track how many items to wait for before
			// the ready event fires. See #6781
			readyWait : 1,
			
			// Handle when the DOM is ready
			ready : function (wait) {
				// A third-party is pushing the ready event forwards
				if (wait === true) {
					jQuery.readyWait--;
				}
				
				// Make sure that the DOM is not already loaded
				if (!jQuery.readyWait || (wait !== true && !jQuery.isReady)) {
					// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
					if (!document.body) {
						return setTimeout(jQuery.ready, 1);
					}
					
					// Remember that the DOM is ready
					jQuery.isReady = true;
					
					// If a normal DOM Ready event fired, decrement, and wait if need be
					if (wait !== true && --jQuery.readyWait > 0) {
						return;
					}
					
					// If there are functions bound, to execute
					if (readyList) {
						// Execute all of them
						var fn,
						i = 0;
						while ((fn = readyList[i++])) {
							fn.call(document, jQuery);
						}
						
						// Reset the list of functions
						readyList = null;
					}
					
					// Trigger any bound ready events
					if (jQuery.fn.triggerHandler) {
						jQuery(document).triggerHandler("ready");
					}
				}
			},
			
			bindReady : function () {
				if (readyBound) {
					return;
				}
				
				readyBound = true;
				
				// Catch cases where $(document).ready() is called after the
				// browser event has already occurred.
				if (document.readyState === "complete") {
					// Handle it asynchronously to allow scripts the opportunity to delay ready
					return setTimeout(jQuery.ready, 1);
				}
				
				// Mozilla, Opera and webkit nightlies currently support this event
				if (document.addEventListener) {
					// Use the handy event callback
					document.addEventListener("DOMContentLoaded", DOMContentLoaded, false);
					
					// A fallback to window.onload, that will always work
					window.addEventListener("load", jQuery.ready, false);
					
					// If IE event model is used
				} else if (document.attachEvent) {
					// ensure firing before onload,
					// maybe late but safe also for iframes
					document.attachEvent("onreadystatechange", DOMContentLoaded);
					
					// A fallback to window.onload, that will always work
					window.attachEvent("onload", jQuery.ready);
					
					// If IE and not a frame
					// continually check to see if the document is ready
					var toplevel = false;
					
					try {
						toplevel = window.frameElement == null;
					} catch (e) {}
					
					if (document.documentElement.doScroll && toplevel) {
						doScrollCheck();
					}
				}
			},
			
			// See test/unit/core.js for details concerning isFunction.
			// Since version 1.3, DOM methods and functions like alert
			// aren't supported. They return false on IE (#2968).
			isFunction : function (obj) {
				return jQuery.type(obj) === "function";
			},
			
			isArray : Array.isArray || function (obj) {
				return jQuery.type(obj) === "array";
			},
			
			// A crude way of determining if an object is a window
			isWindow : function (obj) {
				return obj && typeof obj === "object" && "setInterval" in obj;
			},
			
			isNaN : function (obj) {
				return obj == null || !rdigit.test(obj) || isNaN(obj);
			},
			
			type : function (obj) {
				return obj == null ?
				String(obj) :
				class2type[toString.call(obj)] || "object";
			},
			
			isPlainObject : function (obj) {
				// Must be an Object.
				// Because of IE, we also have to check the presence of the constructor property.
				// Make sure that DOM nodes and window objects don't pass through, as well
				if (!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
					return false;
				}
				
				// Not own constructor property must be Object
				if (obj.constructor &&
					!hasOwn.call(obj, "constructor") &&
					!hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
					return false;
				}
				
				// Own properties are enumerated firstly, so to speed up,
				// if last one is own, then all properties are own.
				
				var key;
				for (key in obj) {}
				
				return key === undefined || hasOwn.call(obj, key);
			},
			
			isEmptyObject : function (obj) {
				for (var name in obj) {
					return false;
				}
				return true;
			},
			
			error : function (msg) {
				throw msg;
			},
			
			parseJSON : function (data) {
				if (typeof data !== "string" || !data) {
					return null;
				}
				
				// Make sure leading/trailing whitespace is removed (IE can't handle it)
				data = jQuery.trim(data);
				
				// Make sure the incoming data is actual JSON
				// Logic borrowed from http://json.org/json2.js
				if (rvalidchars.test(data.replace(rvalidescape, "@")
						.replace(rvalidtokens, "]")
						.replace(rvalidbraces, ""))) {
					
					// Try to use the native JSON parser first
					return window.JSON && window.JSON.parse ?
					window.JSON.parse(data) :
					(new Function("return " + data))();
					
				} else {
					jQuery.error("Invalid JSON: " + data);
				}
			},
			
			noop : function () {},
			
			// Evalulates a script in a global context
			globalEval : function (data) {
				if (data && rnotwhite.test(data)) {
					// Inspired by code by Andrea Giammarchi
					// http://webreflection.blogspot.com/2007/08/global-scope-evaluation-and-dom.html
					var head = document.getElementsByTagName("head")[0] || document.documentElement,
					script = document.createElement("script");
					
					script.type = "text/javascript";
					
					if (jQuery.support.scriptEval) {
						script.appendChild(document.createTextNode(data));
					} else {
						script.text = data;
					}
					
					// Use insertBefore instead of appendChild to circumvent an IE6 bug.
					// This arises when a base node is used (#2709).
					head.insertBefore(script, head.firstChild);
					head.removeChild(script);
				}
			},
			
			nodeName : function (elem, name) {
				return elem.nodeName && elem.nodeName.toUpperCase() === name.toUpperCase();
			},
			
			// args is for internal usage only
			each : function (object, callback, args) {
				var name,
				i = 0,
				length = object.length,
				isObj = length === undefined || jQuery.isFunction(object);
				
				if (args) {
					if (isObj) {
						for (name in object) {
							if (callback.apply(object[name], args) === false) {
								break;
							}
						}
					} else {
						for (; i < length; ) {
							if (callback.apply(object[i++], args) === false) {
								break;
							}
						}
					}
					
					// A special, fast, case for the most common use of each
				} else {
					if (isObj) {
						for (name in object) {
							if (callback.call(object[name], name, object[name]) === false) {
								break;
							}
						}
					} else {
						for (var value = object[0];
							i < length && callback.call(value, i, value) !== false; value = object[++i]) {}
					}
				}
				
				return object;
			},
			
			// Use native String.trim function wherever possible
			trim : trim ?
			function (text) {
				return text == null ?
				"" :
				trim.call(text);
			}
			 :
			
			// Otherwise use our own trimming functionality
			function (text) {
				return text == null ?
				"" :
				text.toString().replace(trimLeft, "").replace(trimRight, "");
			},
			
			// results is for internal usage only
			makeArray : function (array, results) {
				var ret = results || [];
				
				if (array != null) {
					// The window, strings (and functions) also have 'length'
					// The extra typeof function check is to prevent crashes
					// in Safari 2 (See: #3039)
					// Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930
					var type = jQuery.type(array);
					
					if (array.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow(array)) {
						push.call(ret, array);
					} else {
						jQuery.merge(ret, array);
					}
				}
				
				return ret;
			},
			
			inArray : function (elem, array) {
				if (array.indexOf) {
					return array.indexOf(elem);
				}
				
				for (var i = 0, length = array.length; i < length; i++) {
					if (array[i] === elem) {
						return i;
					}
				}
				
				return -1;
			},
			
			merge : function (first, second) {
				var i = first.length,
				j = 0;
				
				if (typeof second.length === "number") {
					for (var l = second.length; j < l; j++) {
						first[i++] = second[j];
					}
					
				} else {
					while (second[j] !== undefined) {
						first[i++] = second[j++];
					}
				}
				
				first.length = i;
				
				return first;
			},
			
			grep : function (elems, callback, inv) {
				var ret = [],
				retVal;
				inv = !!inv;
				
				// Go through the array, only saving the items
				// that pass the validator function
				for (var i = 0, length = elems.length; i < length; i++) {
					retVal = !!callback(elems[i], i);
					if (inv !== retVal) {
						ret.push(elems[i]);
					}
				}
				
				return ret;
			},
			
			// arg is for internal usage only
			map : function (elems, callback, arg) {
				var ret = [],
				value;
				
				// Go through the array, translating each of the items to their
				// new value (or values).
				for (var i = 0, length = elems.length; i < length; i++) {
					value = callback(elems[i], i, arg);
					
					if (value != null) {
						ret[ret.length] = value;
					}
				}
				
				return ret.concat.apply([], ret);
			},
			
			// A global GUID counter for objects
			guid : 1,
			
			proxy : function (fn, proxy, thisObject) {
				if (arguments.length === 2) {
					if (typeof proxy === "string") {
						thisObject = fn;
						fn = thisObject[proxy];
						proxy = undefined;
						
					} else if (proxy && !jQuery.isFunction(proxy)) {
						thisObject = proxy;
						proxy = undefined;
					}
				}
				
				if (!proxy && fn) {
					proxy = function () {
						return fn.apply(thisObject || this, arguments);
					};
				}
				
				// Set the guid of unique handler to the same of original handler, so it can be removed
				if (fn) {
					proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++;
				}
				
				// So proxy can be declared as an argument
				return proxy;
			},
			
			// Mutifunctional method to get and set values to a collection
			// The value/s can be optionally by executed if its a function
			access : function (elems, key, value, exec, fn, pass) {
				var length = elems.length;
				
				// Setting many attributes
				if (typeof key === "object") {
					for (var k in key) {
						jQuery.access(elems, k, key[k], exec, fn, value);
					}
					return elems;
				}
				
				// Setting one attribute
				if (value !== undefined) {
					// Optionally, function values get executed if exec is true
					exec = !pass && exec && jQuery.isFunction(value);
					
					for (var i = 0; i < length; i++) {
						fn(elems[i], key, exec ? value.call(elems[i], i, fn(elems[i], key)) : value, pass);
					}
					
					return elems;
				}
				
				// Getting an attribute
				return length ? fn(elems[0], key) : undefined;
			},
			
			now : function () {
				return (new Date()).getTime();
			},
			
			// Use of jQuery.browser is frowned upon.
			// More details: http://docs.jquery.com/Utilities/jQuery.browser
			uaMatch : function (ua) {
				ua = ua.toLowerCase();
				
				var match = rwebkit.exec(ua) ||
					ropera.exec(ua) ||
					rmsie.exec(ua) ||
					ua.indexOf("compatible") < 0 && rmozilla.exec(ua) ||
					[];
				
				return {
					browser : match[1] || "",
					version : match[2] || "0"
				};
			},
			
			browser : {}
		});
		
		// Populate the class2type map
		jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function (i, name) {
			class2type["[object " + name + "]"] = name.toLowerCase();
		});
		
		browserMatch = jQuery.uaMatch(userAgent);
		if (browserMatch.browser) {
			jQuery.browser[browserMatch.browser] = true;
			jQuery.browser.version = browserMatch.version;
		}
		
		// Deprecated, use jQuery.browser.webkit instead
		if (jQuery.browser.webkit) {
			jQuery.browser.safari = true;
		}
		
		if (indexOf) {
			jQuery.inArray = function (elem, array) {
				return indexOf.call(array, elem);
			};
		}
		
		// Verify that \s matches non-breaking spaces
		// (IE fails on this test)
		if (!rwhite.test("\xA0")) {
			trimLeft = /^[\s\xA0]+/;
			trimRight = /[\s\xA0]+$/;
		}
		
		// All jQuery objects should point back to these
		rootjQuery = jQuery(document);
		
		// Cleanup functions for the document ready method
		if (document.addEventListener) {
			DOMContentLoaded = function () {
				document.removeEventListener("DOMContentLoaded", DOMContentLoaded, false);
				jQuery.ready();
			};
			
		} else if (document.attachEvent) {
			DOMContentLoaded = function () {
				// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
				if (document.readyState === "complete") {
					document.detachEvent("onreadystatechange", DOMContentLoaded);
					jQuery.ready();
				}
			};
		}
		
		// The DOM ready check for Internet Explorer
		function doScrollCheck() {
			if (jQuery.isReady) {
				return;
			}
			
			try {
				// If IE is used, use the trick by Diego Perini
				// http://javascript.nwbox.com/IEContentLoaded/
				document.documentElement.doScroll("left");
			} catch (e) {
				setTimeout(doScrollCheck, 1);
				return;
			}
			
			// and execute any waiting functions
			jQuery.ready();
		}
		
		// Expose jQuery to the global object
		return (window.jQuery = window.$ = jQuery);
		
	})();
	
	(function () {
		
		jQuery.support = {};
		
		var root = document.documentElement,
		script = document.createElement("script"),
		div = document.createElement("div"),
		id = "script" + jQuery.now();
		
		div.style.display = "none";
		div.innerHTML = "   <link/><table></table><a href='/a' style='color:red;float:left;opacity:.55;'>a</a><input type='checkbox'/>";
		
		var all = div.getElementsByTagName("*"),
		a = div.getElementsByTagName("a")[0],
		select = document.createElement("select"),
		opt = select.appendChild(document.createElement("option"));
		
		// Can't get basic test support
		if (!all || !all.length || !a) {
			return;
		}
		
		jQuery.support = {
			// IE strips leading whitespace when .innerHTML is used
			leadingWhitespace : div.firstChild.nodeType === 3,
			
			// Make sure that tbody elements aren't automatically inserted
			// IE will insert them into empty tables
			tbody : !div.getElementsByTagName("tbody").length,
			
			// Make sure that link elements get serialized correctly by innerHTML
			// This requires a wrapper element in IE
			htmlSerialize : !!div.getElementsByTagName("link").length,
			
			// Get the style information from getAttribute
			// (IE uses .cssText insted)
			style : /red/.test(a.getAttribute("style")),
			
			// Make sure that URLs aren't manipulated
			// (IE normalizes it by default)
			hrefNormalized : a.getAttribute("href") === "/a",
			
			// Make sure that element opacity exists
			// (IE uses filter instead)
			// Use a regex to work around a WebKit issue. See #5145
			opacity : /^0.55$/.test(a.style.opacity),
			
			// Verify style float existence
			// (IE uses styleFloat instead of cssFloat)
			cssFloat : !!a.style.cssFloat,
			
			// Make sure that if no value is specified for a checkbox
			// that it defaults to "on".
			// (WebKit defaults to "" instead)
			checkOn : div.getElementsByTagName("input")[0].value === "on",
			
			// Make sure that a selected-by-default option has a working selected property.
			// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
			optSelected : opt.selected,
			
			// Will be defined later
			optDisabled : false,
			checkClone : false,
			scriptEval : false,
			noCloneEvent : true,
			boxModel : null,
			inlineBlockNeedsLayout : false,
			shrinkWrapBlocks : false,
			reliableHiddenOffsets : true
		};
		
		// Make sure that the options inside disabled selects aren't marked as disabled
		// (WebKit marks them as diabled)
		select.disabled = true;
		jQuery.support.optDisabled = !opt.disabled;
		
		script.type = "text/javascript";
		try {
			script.appendChild(document.createTextNode("window." + id + "=1;"));
		} catch (e) {}
		
		root.insertBefore(script, root.firstChild);
		
		// Make sure that the execution of code works by injecting a script
		// tag with appendChild/createTextNode
		// (IE doesn't support this, fails, and uses .text instead)
		if (window[id]) {
			jQuery.support.scriptEval = true;
			delete window[id];
		}
		
		root.removeChild(script);
		
		if (div.attachEvent && div.fireEvent) {
			div.attachEvent("onclick", function click() {
				// Cloning a node shouldn't copy over any
				// bound event handlers (IE does this)
				jQuery.support.noCloneEvent = false;
				div.detachEvent("onclick", click);
			});
			div.cloneNode(true).fireEvent("onclick");
		}
		
		div = document.createElement("div");
		div.innerHTML = "<input type='radio' name='radiotest' checked='checked'/>";
		
		var fragment = document.createDocumentFragment();
		fragment.appendChild(div.firstChild);
		
		// WebKit doesn't clone checked state correctly in fragments
		jQuery.support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;
		
		// Figure out if the W3C box model works as expected
		// document.body must exist before we can do this
		jQuery(function () {
			var div = document.createElement("div");
			div.style.width = div.style.paddingLeft = "1px";
			
			document.body.appendChild(div);
			jQuery.boxModel = jQuery.support.boxModel = div.offsetWidth === 2;
			
			if ("zoom" in div.style) {
				// Check if natively block-level elements act like inline-block
				// elements when setting their display to 'inline' and giving
				// them layout
				// (IE < 8 does this)
				div.style.display = "inline";
				div.style.zoom = 1;
				jQuery.support.inlineBlockNeedsLayout = div.offsetWidth === 2;
				
				// Check if elements with layout shrink-wrap their children
				// (IE 6 does this)
				div.style.display = "";
				div.innerHTML = "<div style='width:4px;'></div>";
				jQuery.support.shrinkWrapBlocks = div.offsetWidth !== 2;
			}
			
			div.innerHTML = "<table><tr><td style='padding:0;display:none'></td><td>t</td></tr></table>";
			var tds = div.getElementsByTagName("td");
			
			// Check if table cells still have offsetWidth/Height when they are set
			// to display:none and there are still other visible table cells in a
			// table row; if so, offsetWidth/Height are not reliable for use when
			// determining if an element has been hidden directly using
			// display:none (it is still safe to use offsets if a parent element is
			// hidden; don safety goggles and see bug #4512 for more information).
			// (only IE 8 fails this test)
			jQuery.support.reliableHiddenOffsets = tds[0].offsetHeight === 0;
			
			tds[0].style.display = "";
			tds[1].style.display = "none";
			
			// Check if empty table cells still have offsetWidth/Height
			// (IE < 8 fail this test)
			jQuery.support.reliableHiddenOffsets = jQuery.support.reliableHiddenOffsets && tds[0].offsetHeight === 0;
			div.innerHTML = "";
			
			document.body.removeChild(div).style.display = "none";
			div = tds = null;
		});
		
		// Technique from Juriy Zaytsev
		// http://thinkweb2.com/projects/prototype/detecting-event-support-without-browser-sniffing/
		var eventSupported = function (eventName) {
			var el = document.createElement("div");
			eventName = "on" + eventName;
			
			var isSupported = (eventName in el);
			if (!isSupported) {
				el.setAttribute(eventName, "return;");
				isSupported = typeof el[eventName] === "function";
			}
			el = null;
			
			return isSupported;
		};
		
		jQuery.support.submitBubbles = eventSupported("submit");
		jQuery.support.changeBubbles = eventSupported("change");
		
		// release memory in IE
		root = script = div = all = a = null;
	})();
	
	jQuery.props = {
		"for" : "htmlFor",
		"class" : "className",
		readonly : "readOnly",
		maxlength : "maxLength",
		cellspacing : "cellSpacing",
		rowspan : "rowSpan",
		colspan : "colSpan",
		tabindex : "tabIndex",
		usemap : "useMap",
		frameborder : "frameBorder"
	};
	
	var windowData = {},
	rbrace = /^(?:\{.*\}|\[.*\])$/;
	
	jQuery.extend({
		cache : {},
		
		// Please use with caution
		uuid : 0,
		
		// Unique for each copy of jQuery on the page
		expando : "jQuery" + jQuery.now(),
		
		// The following elements throw uncatchable exceptions if you
		// attempt to add expando properties to them.
		noData : {
			"embed" : true,
			// Ban all objects except for Flash (which handle expandos)
			"object" : "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
			"applet" : true
		},
		
		data : function (elem, name, data) {
			if (!jQuery.acceptData(elem)) {
				return;
			}
			
			elem = elem == window ?
				windowData :
				elem;
			
			var isNode = elem.nodeType,
			id = isNode ? elem[jQuery.expando] : null,
			cache = jQuery.cache,
			thisCache;
			
			if (isNode && !id && typeof name === "string" && data === undefined) {
				return;
			}
			
			// Get the data from the object directly
			if (!isNode) {
				cache = elem;
				
				// Compute a unique ID for the element
			} else if (!id) {
				elem[jQuery.expando] = id = ++jQuery.uuid;
			}
			
			// Avoid generating a new cache unless none exists and we
			// want to manipulate it.
			if (typeof name === "object") {
				if (isNode) {
					cache[id] = jQuery.extend(cache[id], name);
					
				} else {
					jQuery.extend(cache, name);
				}
				
			} else if (isNode && !cache[id]) {
				cache[id] = {};
			}
			
			thisCache = isNode ? cache[id] : cache;
			
			// Prevent overriding the named cache with undefined values
			if (data !== undefined) {
				thisCache[name] = data;
			}
			
			return typeof name === "string" ? thisCache[name] : thisCache;
		},
		
		removeData : function (elem, name) {
			if (!jQuery.acceptData(elem)) {
				return;
			}
			
			elem = elem == window ?
				windowData :
				elem;
			
			var isNode = elem.nodeType,
			id = isNode ? elem[jQuery.expando] : elem,
			cache = jQuery.cache,
			thisCache = isNode ? cache[id] : id;
			
			// If we want to remove a specific section of the element's data
			if (name) {
				if (thisCache) {
					// Remove the section of cache data
					delete thisCache[name];
					
					// If we've removed all the data, remove the element's cache
					if (isNode && jQuery.isEmptyObject(thisCache)) {
						jQuery.removeData(elem);
					}
				}
				
				// Otherwise, we want to remove all of the element's data
			} else {
				if (isNode && jQuery.support.deleteExpando) {
					delete elem[jQuery.expando];
					
				} else if (elem.removeAttribute) {
					elem.removeAttribute(jQuery.expando);
					
					// Completely remove the data cache
				} else if (isNode) {
					delete cache[id];
					
					// Remove all fields from the object
				} else {
					for (var n in elem) {
						delete elem[n];
					}
				}
			}
		},
		
		// A method for determining if a DOM node can handle the data expando
		acceptData : function (elem) {
			if (elem.nodeName) {
				var match = jQuery.noData[elem.nodeName.toLowerCase()];
				
				if (match) {
					return !(match === true || elem.getAttribute("classid") !== match);
				}
			}
			
			return true;
		}
	});
	
	jQuery.fn.extend({
		data : function (key, value) {
			if (typeof key === "undefined") {
				return this.length ? jQuery.data(this[0]) : null;
				
			} else if (typeof key === "object") {
				return this.each(function () {
					jQuery.data(this, key);
				});
			}
			
			var parts = key.split(".");
			parts[1] = parts[1] ? "." + parts[1] : "";
			
			if (value === undefined) {
				var data = this.triggerHandler("getData" + parts[1] + "!", [parts[0]]);
				
				// Try to fetch any internally stored data first
				if (data === undefined && this.length) {
					data = jQuery.data(this[0], key);
					
					// If nothing was found internally, try to fetch any
					// data from the HTML5 data-* attribute
					if (data === undefined && this[0].nodeType === 1) {
						data = this[0].getAttribute("data-" + key);
						
						if (typeof data === "string") {
							try {
								data = data === "true" ? true :
									data === "false" ? false :
									data === "null" ? null :
									!jQuery.isNaN(data) ? parseFloat(data) :
									rbrace.test(data) ? jQuery.parseJSON(data) :
									data;
							} catch (e) {}
							
						} else {
							data = undefined;
						}
					}
				}
				
				return data === undefined && parts[1] ?
				this.data(parts[0]) :
				data;
				
			} else {
				return this.each(function () {
					var $this = jQuery(this),
					args = [parts[0], value];
					
					$this.triggerHandler("setData" + parts[1] + "!", args);
					jQuery.data(this, key, value);
					$this.triggerHandler("changeData" + parts[1] + "!", args);
				});
			}
		},
		
		removeData : function (key) {
			return this.each(function () {
				jQuery.removeData(this, key);
			});
		}
	});
	
	jQuery.extend({
		queue : function (elem, type, data) {
			if (!elem) {
				return;
			}
			
			type = (type || "fx") + "queue";
			var q = jQuery.data(elem, type);
			
			// Speed up dequeue by getting out quickly if this is just a lookup
			if (!data) {
				return q || [];
			}
			
			if (!q || jQuery.isArray(data)) {
				q = jQuery.data(elem, type, jQuery.makeArray(data));
				
			} else {
				q.push(data);
			}
			
			return q;
		},
		
		dequeue : function (elem, type) {
			type = type || "fx";
			
			var queue = jQuery.queue(elem, type),
			fn = queue.shift();
			
			// If the fx queue is dequeued, always remove the progress sentinel
			if (fn === "inprogress") {
				fn = queue.shift();
			}
			
			if (fn) {
				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if (type === "fx") {
					queue.unshift("inprogress");
				}
				
				fn.call(elem, function () {
					jQuery.dequeue(elem, type);
				});
			}
		}
	});
	
	jQuery.fn.extend({
		queue : function (type, data) {
			if (typeof type !== "string") {
				data = type;
				type = "fx";
			}
			
			if (data === undefined) {
				return jQuery.queue(this[0], type);
			}
			return this.each(function (i) {
				var queue = jQuery.queue(this, type, data);
				
				if (type === "fx" && queue[0] !== "inprogress") {
					jQuery.dequeue(this, type);
				}
			});
		},
		dequeue : function (type) {
			return this.each(function () {
				jQuery.dequeue(this, type);
			});
		},
		
		// Based off of the plugin by Clint Helfers, with permission.
		// http://blindsignals.com/index.php/2009/07/jquery-delay/
		delay : function (time, type) {
			time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
			type = type || "fx";
			
			return this.queue(type, function () {
				var elem = this;
				setTimeout(function () {
					jQuery.dequeue(elem, type);
				}, time);
			});
		},
		
		clearQueue : function (type) {
			return this.queue(type || "fx", []);
		}
	});
	
	var rclass = /[\n\t]/g,
	rspaces = /\s+/,
	rreturn = /\r/g,
	rspecialurl = /^(?:href|src|style)$/,
	rtype = /^(?:button|input)$/i,
	rfocusable = /^(?:button|input|object|select|textarea)$/i,
	rclickable = /^a(?:rea)?$/i,
	rradiocheck = /^(?:radio|checkbox)$/i;
	
	jQuery.fn.extend({
		attr : function (name, value) {
			return jQuery.access(this, name, value, true, jQuery.attr);
		},
		
		removeAttr : function (name, fn) {
			return this.each(function () {
				jQuery.attr(this, name, "");
				if (this.nodeType === 1) {
					this.removeAttribute(name);
				}
			});
		},
		
		addClass : function (value) {
			if (jQuery.isFunction(value)) {
				return this.each(function (i) {
					var self = jQuery(this);
					self.addClass(value.call(this, i, self.attr("class")));
				});
			}
			
			if (value && typeof value === "string") {
				var classNames = (value || "").split(rspaces);
				
				for (var i = 0, l = this.length; i < l; i++) {
					var elem = this[i];
					
					if (elem.nodeType === 1) {
						if (!elem.className) {
							elem.className = value;
							
						} else {
							var className = " " + elem.className + " ",
							setClass = elem.className;
							for (var c = 0, cl = classNames.length; c < cl; c++) {
								if (className.indexOf(" " + classNames[c] + " ") < 0) {
									setClass += " " + classNames[c];
								}
							}
							elem.className = jQuery.trim(setClass);
						}
					}
				}
			}
			
			return this;
		},
		
		removeClass : function (value) {
			if (jQuery.isFunction(value)) {
				return this.each(function (i) {
					var self = jQuery(this);
					self.removeClass(value.call(this, i, self.attr("class")));
				});
			}
			
			if ((value && typeof value === "string") || value === undefined) {
				var classNames = (value || "").split(rspaces);
				
				for (var i = 0, l = this.length; i < l; i++) {
					var elem = this[i];
					
					if (elem.nodeType === 1 && elem.className) {
						if (value) {
							var className = (" " + elem.className + " ").replace(rclass, " ");
							for (var c = 0, cl = classNames.length; c < cl; c++) {
								className = className.replace(" " + classNames[c] + " ", " ");
							}
							elem.className = jQuery.trim(className);
							
						} else {
							elem.className = "";
						}
					}
				}
			}
			
			return this;
		},
		
		toggleClass : function (value, stateVal) {
			var type = typeof value,
			isBool = typeof stateVal === "boolean";
			
			if (jQuery.isFunction(value)) {
				return this.each(function (i) {
					var self = jQuery(this);
					self.toggleClass(value.call(this, i, self.attr("class"), stateVal), stateVal);
				});
			}
			
			return this.each(function () {
				if (type === "string") {
					// toggle individual class names
					var className,
					i = 0,
					self = jQuery(this),
					state = stateVal,
					classNames = value.split(rspaces);
					while ((className = classNames[i++])) {
						// check each className given, space seperated list
						state = isBool ? state : !self.hasClass(className);
						self[state ? "addClass" : "removeClass"](className);
					}
					
				} else if (type === "undefined" || type === "boolean") {
					if (this.className) {
						// store className if set
						jQuery.data(this, "__className__", this.className);
					}
					
					// toggle whole className
					this.className = this.className || value === false ? "" : jQuery.data(this, "__className__") || "";
				}
			});
		},
		
		hasClass : function (selector) {
			var className = " " + selector + " ";
			for (var i = 0, l = this.length; i < l; i++) {
				if ((" " + this[i].className + " ").replace(rclass, " ").indexOf(className) > -1) {
					return true;
				}
			}
			
			return false;
		},
		
		val : function (value) {
			if (!arguments.length) {
				var elem = this[0];
				
				if (elem) {
					if (jQuery.nodeName(elem, "option")) {
						// attributes.value is undefined in Blackberry 4.7 but
						// uses .value. See #6932
						var val = elem.attributes.value;
						return !val || val.specified ? elem.value : elem.text;
					}
					
					// We need to handle select boxes special
					if (jQuery.nodeName(elem, "select")) {
						var index = elem.selectedIndex,
						values = [],
						options = elem.options,
						one = elem.type === "select-one";
						
						// Nothing was selected
						if (index < 0) {
							return null;
						}
						
						// Loop through all the selected options
						for (var i = one ? index : 0, max = one ? index + 1 : options.length; i < max; i++) {
							var option = options[i];
							
							// Don't return options that are disabled or in a disabled optgroup
							if (option.selected && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) &&
								(!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
								
								// Get the specific value for the option
								value = jQuery(option).val();
								
								// We don't need an array for one selects
								if (one) {
									return value;
								}
								
								// Multi-Selects return an array
								values.push(value);
							}
						}
						
						return values;
					}
					
					// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
					if (rradiocheck.test(elem.type) && !jQuery.support.checkOn) {
						return elem.getAttribute("value") === null ? "on" : elem.value;
					}
					
					// Everything else, we just grab the value
					return (elem.value || "").replace(rreturn, "");
					
				}
				
				return undefined;
			}
			
			var isFunction = jQuery.isFunction(value);
			
			return this.each(function (i) {
				var self = jQuery(this),
				val = value;
				
				if (this.nodeType !== 1) {
					return;
				}
				
				if (isFunction) {
					val = value.call(this, i, self.val());
				}
				
				// Treat null/undefined as ""; convert numbers to string
				if (val == null) {
					val = "";
				} else if (typeof val === "number") {
					val += "";
				} else if (jQuery.isArray(val)) {
					val = jQuery.map(val, function (value) {
							return value == null ? "" : value + "";
						});
				}
				
				if (jQuery.isArray(val) && rradiocheck.test(this.type)) {
					this.checked = jQuery.inArray(self.val(), val) >= 0;
					
				} else if (jQuery.nodeName(this, "select")) {
					var values = jQuery.makeArray(val);
					
					jQuery("option", this).each(function () {
						this.selected = jQuery.inArray(jQuery(this).val(), values) >= 0;
					});
					
					if (!values.length) {
						this.selectedIndex = -1;
					}
					
				} else {
					this.value = val;
				}
			});
		}
	});
	
	jQuery.extend({
		attrFn : {
			val : true,
			css : true,
			html : true,
			text : true,
			data : true,
			width : true,
			height : true,
			offset : true
		},
		
		attr : function (elem, name, value, pass) {
			// don't set attributes on text and comment nodes
			if (!elem || elem.nodeType === 3 || elem.nodeType === 8) {
				return undefined;
			}
			
			if (pass && name in jQuery.attrFn) {
				return jQuery(elem)[name](value);
			}
			
			var notxml = elem.nodeType !== 1 || !jQuery.isXMLDoc(elem),
			// Whether we are setting (or getting)
			set = value !== undefined;
			
			// Try to normalize/fix the name
			name = notxml && jQuery.props[name] || name;
			
			// Only do all the following if this is a node (faster for style)
			if (elem.nodeType === 1) {
				// These attributes require special treatment
				var special = rspecialurl.test(name);
				
				// Safari mis-reports the default selected property of an option
				// Accessing the parent's selectedIndex property fixes it
				if (name === "selected" && !jQuery.support.optSelected) {
					var parent = elem.parentNode;
					if (parent) {
						parent.selectedIndex;
						
						// Make sure that it also works with optgroups, see #5701
						if (parent.parentNode) {
							parent.parentNode.selectedIndex;
						}
					}
				}
				
				// If applicable, access the attribute via the DOM 0 way
				// 'in' checks fail in Blackberry 4.7 #6931
				if ((name in elem || elem[name] !== undefined) && notxml && !special) {
					if (set) {
						// We can't allow the type property to be changed (since it causes problems in IE)
						if (name === "type" && rtype.test(elem.nodeName) && elem.parentNode) {
							jQuery.error("type property can't be changed");
						}
						
						if (value === null) {
							if (elem.nodeType === 1) {
								elem.removeAttribute(name);
							}
							
						} else {
							elem[name] = value;
						}
					}
					
					// browsers index elements by id/name on forms, give priority to attributes.
					if (jQuery.nodeName(elem, "form") && elem.getAttributeNode(name)) {
						return elem.getAttributeNode(name).nodeValue;
					}
					
					// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					if (name === "tabIndex") {
						var attributeNode = elem.getAttributeNode("tabIndex");
						
						return attributeNode && attributeNode.specified ?
						attributeNode.value :
						rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ?
						0 :
						undefined;
					}
					
					return elem[name];
				}
				
				if (!jQuery.support.style && notxml && name === "style") {
					if (set) {
						elem.style.cssText = "" + value;
					}
					
					return elem.style.cssText;
				}
				
				if (set) {
					// convert the value to a string (all browsers do this but IE) see #1070
					elem.setAttribute(name, "" + value);
				}
				
				// Ensure that missing attributes return undefined
				// Blackberry 4.7 returns "" from getAttribute #6938
				if (!elem.attributes[name] && (elem.hasAttribute && !elem.hasAttribute(name))) {
					return undefined;
				}
				
				var attr = !jQuery.support.hrefNormalized && notxml && special ?
					// Some attributes require a special call on IE
					elem.getAttribute(name, 2) :
					elem.getAttribute(name);
				
				// Non-existent attributes return null, we normalize to undefined
				return attr === null ? undefined : attr;
			}
		}
	});
	
	var rnamespaces = /\.(.*)$/,
	rformElems = /^(?:textarea|input|select)$/i,
	rperiod = /\./g,
	rspace = / /g,
	rescape = /[^\w\s.|`]/g,
	fcleanup = function (nm) {
		return nm.replace(rescape, "\\$&");
	},
	focusCounts = {
		focusin : 0,
		focusout : 0
	};
	
	/*
	 * A number of helper functions used for managing events.
	 * Many of the ideas behind this code originated from
	 * Dean Edwards' addEvent library.
	 */
	jQuery.event = {
		
		// Bind an event to an element
		// Original by Dean Edwards
		add : function (elem, types, handler, data) {
			if (elem.nodeType === 3 || elem.nodeType === 8) {
				return;
			}
			
			// For whatever reason, IE has trouble passing the window object
			// around, causing it to be cloned in the process
			if (jQuery.isWindow(elem) && (elem !== window && !elem.frameElement)) {
				elem = window;
			}
			
			if (handler === false) {
				handler = returnFalse;
			}
			
			var handleObjIn,
			handleObj;
			
			if (handler.handler) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
			}
			
			// Make sure that the function being executed has a unique ID
			if (!handler.guid) {
				handler.guid = jQuery.guid++;
			}
			
			// Init the element's event structure
			var elemData = jQuery.data(elem);
			
			// If no elemData is found then we must be trying to bind to one of the
			// banned noData elements
			if (!elemData) {
				return;
			}
			
			// Use a key less likely to result in collisions for plain JS objects.
			// Fixes bug #7150.
			var eventKey = elem.nodeType ? "events" : "__events__",
			events = elemData[eventKey],
			eventHandle = elemData.handle;
			
			if (typeof events === "function") {
				// On plain objects events is a fn that holds the the data
				// which prevents this data from being JSON serialized
				// the function does not need to be called, it just contains the data
				eventHandle = events.handle;
				events = events.events;
				
			} else if (!events) {
				if (!elem.nodeType) {
					// On plain objects, create a fn that acts as the holder
					// of the values to avoid JSON serialization of event data
					elemData[eventKey] = elemData = function () {};
				}
				
				elemData.events = events = {};
			}
			
			if (!eventHandle) {
				elemData.handle = eventHandle = function () {
					// Handle the second event of a trigger and when
					// an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && !jQuery.event.triggered ?
					jQuery.event.handle.apply(eventHandle.elem, arguments) :
					undefined;
				};
			}
			
			// Add elem as a property of the handle function
			// This is to prevent a memory leak with non-native events in IE.
			eventHandle.elem = elem;
			
			// Handle multiple events separated by a space
			// jQuery(...).bind("mouseover mouseout", fn);
			types = types.split(" ");
			
			var type,
			i = 0,
			namespaces;
			while ((type = types[i++])) {
				handleObj = handleObjIn ?
					jQuery.extend({}, handleObjIn) : {
					handler : handler,
					data : data
				};
				
				// Namespaced event handlers
				if (type.indexOf(".") > -1) {
					namespaces = type.split(".");
					type = namespaces.shift();
					handleObj.namespace = namespaces.slice(0).sort().join(".");
					
				} else {
					namespaces = [];
					handleObj.namespace = "";
				}
				
				handleObj.type = type;
				if (!handleObj.guid) {
					handleObj.guid = handler.guid;
				}
				
				// Get the current list of functions bound to this event
				var handlers = events[type],
				special = jQuery.event.special[type] || {};
				
				// Init the event handler queue
				if (!handlers) {
					handlers = events[type] = [];
					
					// Check for a special event handler
					// Only use addEventListener/attachEvent if the special
					// events handler returns false
					if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
						// Bind the global event handler to the element
						if (elem.addEventListener) {
							elem.addEventListener(type, eventHandle, false);
							
						} else if (elem.attachEvent) {
							elem.attachEvent("on" + type, eventHandle);
						}
					}
				}
				
				if (special.add) {
					special.add.call(elem, handleObj);
					
					if (!handleObj.handler.guid) {
						handleObj.handler.guid = handler.guid;
					}
				}
				
				// Add the function to the element's handler list
				handlers.push(handleObj);
				
				// Keep track of which events have been used, for global triggering
				jQuery.event.global[type] = true;
			}
			
			// Nullify elem to prevent memory leaks in IE
			elem = null;
		},
		
		global : {},
		
		// Detach an event or set of events from an element
		remove : function (elem, types, handler, pos) {
			// don't do events on text and comment nodes
			if (elem.nodeType === 3 || elem.nodeType === 8) {
				return;
			}
			
			if (handler === false) {
				handler = returnFalse;
			}
			
			var ret,
			type,
			fn,
			j,
			i = 0,
			all,
			namespaces,
			namespace,
			special,
			eventType,
			handleObj,
			origType,
			eventKey = elem.nodeType ? "events" : "__events__",
			elemData = jQuery.data(elem),
			events = elemData && elemData[eventKey];
			
			if (!elemData || !events) {
				return;
			}
			
			if (typeof events === "function") {
				elemData = events;
				events = events.events;
			}
			
			// types is actually an event object here
			if (types && types.type) {
				handler = types.handler;
				types = types.type;
			}
			
			// Unbind all events for the element
			if (!types || typeof types === "string" && types.charAt(0) === ".") {
				types = types || "";
				
				for (type in events) {
					jQuery.event.remove(elem, type + types);
				}
				
				return;
			}
			
			// Handle multiple events separated by a space
			// jQuery(...).unbind("mouseover mouseout", fn);
			types = types.split(" ");
			while ((type = types[i++])) {
				origType = type;
				handleObj = null;
				all = type.indexOf(".") < 0;
				namespaces = [];
				
				if (!all) {
					// Namespaced event handlers
					namespaces = type.split(".");
					type = namespaces.shift();
					
					namespace = new RegExp("(^|\\.)" +
							jQuery.map(namespaces.slice(0).sort(), fcleanup).join("\\.(?:.*\\.)?") + "(\\.|$)");
				}
				
				eventType = events[type];
				
				if (!eventType) {
					continue;
				}
				
				if (!handler) {
					for (j = 0; j < eventType.length; j++) {
						handleObj = eventType[j];
						
						if (all || namespace.test(handleObj.namespace)) {
							jQuery.event.remove(elem, origType, handleObj.handler, j);
							eventType.splice(j--, 1);
						}
					}
					
					continue;
				}
				
				special = jQuery.event.special[type] || {};
				
				for (j = pos || 0; j < eventType.length; j++) {
					handleObj = eventType[j];
					
					if (handler.guid === handleObj.guid) {
						// remove the given handler for the given type
						if (all || namespace.test(handleObj.namespace)) {
							if (pos == null) {
								eventType.splice(j--, 1);
							}
							
							if (special.remove) {
								special.remove.call(elem, handleObj);
							}
						}
						
						if (pos != null) {
							break;
						}
					}
				}
				
				// remove generic event handler if no more handlers exist
				if (eventType.length === 0 || pos != null && eventType.length === 1) {
					if (!special.teardown || special.teardown.call(elem, namespaces) === false) {
						jQuery.removeEvent(elem, type, elemData.handle);
					}
					
					ret = null;
					delete events[type];
				}
			}
			
			// Remove the expando if it's no longer used
			if (jQuery.isEmptyObject(events)) {
				var handle = elemData.handle;
				if (handle) {
					handle.elem = null;
				}
				
				delete elemData.events;
				delete elemData.handle;
				
				if (typeof elemData === "function") {
					jQuery.removeData(elem, eventKey);
					
				} else if (jQuery.isEmptyObject(elemData)) {
					jQuery.removeData(elem);
				}
			}
		},
		
		// bubbling is internal
		trigger : function (event, data, elem /*, bubbling */
		) {
			// Event object or event type
			var type = event.type || event,
			bubbling = arguments[3];
			
			if (!bubbling) {
				event = typeof event === "object" ?
					// jQuery.Event object
					event[jQuery.expando] ? event :
					// Object literal
					jQuery.extend(jQuery.Event(type), event) :
					// Just the event type (string)
					jQuery.Event(type);
				
				if (type.indexOf("!") >= 0) {
					event.type = type = type.slice(0, -1);
					event.exclusive = true;
				}
				
				// Handle a global trigger
				if (!elem) {
					// Don't bubble custom events when global (to avoid too much overhead)
					event.stopPropagation();
					
					// Only trigger if we've ever bound an event for it
					if (jQuery.event.global[type]) {
						jQuery.each(jQuery.cache, function () {
							if (this.events && this.events[type]) {
								jQuery.event.trigger(event, data, this.handle.elem);
							}
						});
					}
				}
				
				// Handle triggering a single element
				
				// don't do events on text and comment nodes
				if (!elem || elem.nodeType === 3 || elem.nodeType === 8) {
					return undefined;
				}
				
				// Clean up in case it is reused
				event.result = undefined;
				event.target = elem;
				
				// Clone the incoming data, if any
				data = jQuery.makeArray(data);
				data.unshift(event);
			}
			
			event.currentTarget = elem;
			
			// Trigger the event, it is assumed that "handle" is a function
			var handle = elem.nodeType ?
				jQuery.data(elem, "handle") :
				(jQuery.data(elem, "__events__") || {}).handle;
			
			if (handle) {
				handle.apply(elem, data);
			}
			
			var parent = elem.parentNode || elem.ownerDocument;
			
			// Trigger an inline bound script
			try {
				if (!(elem && elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()])) {
					if (elem["on" + type] && elem["on" + type].apply(elem, data) === false) {
						event.result = false;
						event.preventDefault();
					}
				}
				
				// prevent IE from throwing an error for some elements with some event types, see #3533
			} catch (inlineError) {}
			
			if (!event.isPropagationStopped() && parent) {
				jQuery.event.trigger(event, data, parent, true);
				
			} else if (!event.isDefaultPrevented()) {
				var target = event.target,
				old,
				targetType = type.replace(rnamespaces, ""),
				isClick = jQuery.nodeName(target, "a") && targetType === "click",
				special = jQuery.event.special[targetType] || {};
				
				if ((!special._default || special._default.call(elem, event) === false) &&
					!isClick && !(target && target.nodeName && jQuery.noData[target.nodeName.toLowerCase()])) {
					
					try {
						if (target[targetType]) {
							// Make sure that we don't accidentally re-trigger the onFOO events
							old = target["on" + targetType];
							
							if (old) {
								target["on" + targetType] = null;
							}
							
							jQuery.event.triggered = true;
							target[targetType]();
						}
						
						// prevent IE from throwing an error for some elements with some event types, see #3533
					} catch (triggerError) {}
					
					if (old) {
						target["on" + targetType] = old;
					}
					
					jQuery.event.triggered = false;
				}
			}
		},
		
		handle : function (event) {
			var all,
			handlers,
			namespaces,
			namespace_sort = [],
			namespace_re,
			events,
			args = jQuery.makeArray(arguments);
			
			event = args[0] = jQuery.event.fix(event || window.event);
			event.currentTarget = this;
			
			// Namespaced event handlers
			all = event.type.indexOf(".") < 0 && !event.exclusive;
			
			if (!all) {
				namespaces = event.type.split(".");
				event.type = namespaces.shift();
				namespace_sort = namespaces.slice(0).sort();
				namespace_re = new RegExp("(^|\\.)" + namespace_sort.join("\\.(?:.*\\.)?") + "(\\.|$)");
			}
			
			event.namespace = event.namespace || namespace_sort.join(".");
			
			events = jQuery.data(this, this.nodeType ? "events" : "__events__");
			
			if (typeof events === "function") {
				events = events.events;
			}
			
			handlers = (events || {})[event.type];
			
			if (events && handlers) {
				// Clone the handlers to prevent manipulation
				handlers = handlers.slice(0);
				
				for (var j = 0, l = handlers.length; j < l; j++) {
					var handleObj = handlers[j];
					
					// Filter the functions by class
					if (all || namespace_re.test(handleObj.namespace)) {
						// Pass in a reference to the handler function itself
						// So that we can later remove it
						event.handler = handleObj.handler;
						event.data = handleObj.data;
						event.handleObj = handleObj;
						
						var ret = handleObj.handler.apply(this, args);
						
						if (ret !== undefined) {
							event.result = ret;
							if (ret === false) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
						
						if (event.isImmediatePropagationStopped()) {
							break;
						}
					}
				}
			}
			
			return event.result;
		},
		
		props : "altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),
		
		fix : function (event) {
			if (event[jQuery.expando]) {
				return event;
			}
			
			// store a copy of the original event object
			// and "clone" to set read-only properties
			var originalEvent = event;
			event = jQuery.Event(originalEvent);
			
			for (var i = this.props.length, prop; i; ) {
				prop = this.props[--i];
				event[prop] = originalEvent[prop];
			}
			
			// Fix target property, if necessary
			if (!event.target) {
				event.target = event.srcElement || document; // Fixes #1925 where srcElement might not be defined either
			}
			
			// check if target is a textnode (safari)
			if (event.target.nodeType === 3) {
				event.target = event.target.parentNode;
			}
			
			// Add relatedTarget, if necessary
			if (!event.relatedTarget && event.fromElement) {
				event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;
			}
			
			// Calculate pageX/Y if missing and clientX/Y available
			if (event.pageX == null && event.clientX != null) {
				var doc = document.documentElement,
				body = document.body;
				event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
				event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
			}
			
			// Add which for key events
			if (event.which == null && (event.charCode != null || event.keyCode != null)) {
				event.which = event.charCode != null ? event.charCode : event.keyCode;
			}
			
			// Add metaKey to non-Mac browsers (use ctrl for PC's and Meta for Macs)
			if (!event.metaKey && event.ctrlKey) {
				event.metaKey = event.ctrlKey;
			}
			
			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if (!event.which && event.button !== undefined) {
				event.which = (event.button & 1 ? 1 : (event.button & 2 ? 3 : (event.button & 4 ? 2 : 0)));
			}
			
			return event;
		},
		
		// Deprecated, use jQuery.guid instead
		guid : 1E8,
		
		// Deprecated, use jQuery.proxy instead
		proxy : jQuery.proxy,
		
		special : {
			ready : {
				// Make sure the ready event is setup
				setup : jQuery.bindReady,
				teardown : jQuery.noop
			},
			
			live : {
				add : function (handleObj) {
					jQuery.event.add(this,
						liveConvert(handleObj.origType, handleObj.selector),
						jQuery.extend({}, handleObj, {
							handler : liveHandler,
							guid : handleObj.handler.guid
						}));
				},
				
				remove : function (handleObj) {
					jQuery.event.remove(this, liveConvert(handleObj.origType, handleObj.selector), handleObj);
				}
			},
			
			beforeunload : {
				setup : function (data, namespaces, eventHandle) {
					// We only want to do this special case on windows
					if (jQuery.isWindow(this)) {
						this.onbeforeunload = eventHandle;
					}
				},
				
				teardown : function (namespaces, eventHandle) {
					if (this.onbeforeunload === eventHandle) {
						this.onbeforeunload = null;
					}
				}
			}
		}
	};
	
	jQuery.removeEvent = document.removeEventListener ?
	function (elem, type, handle) {
		if (elem.removeEventListener) {
			elem.removeEventListener(type, handle, false);
		}
	}
	 :
	function (elem, type, handle) {
		if (elem.detachEvent) {
			elem.detachEvent("on" + type, handle);
		}
	};
	
	jQuery.Event = function (src) {
		// Allow instantiation without the 'new' keyword
		if (!this.preventDefault) {
			return new jQuery.Event(src);
		}
		
		// Event object
		if (src && src.type) {
			this.originalEvent = src;
			this.type = src.type;
			// Event type
		} else {
			this.type = src;
		}
		
		// timeStamp is buggy for some events on Firefox(#3843)
		// So we won't rely on the native value
		this.timeStamp = jQuery.now();
		
		// Mark it as fixed
		this[jQuery.expando] = true;
	};
	
	function returnFalse() {
		return false;
	}
	function returnTrue() {
		return true;
	}
	
	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		preventDefault : function () {
			this.isDefaultPrevented = returnTrue;
			
			var e = this.originalEvent;
			if (!e) {
				return;
			}
			
			// if preventDefault exists run it on the original event
			if (e.preventDefault) {
				e.preventDefault();
				
				// otherwise set the returnValue property of the original event to false (IE)
			} else {
				e.returnValue = false;
			}
		},
		stopPropagation : function () {
			this.isPropagationStopped = returnTrue;
			
			var e = this.originalEvent;
			if (!e) {
				return;
			}
			// if stopPropagation exists run it on the original event
			if (e.stopPropagation) {
				e.stopPropagation();
			}
			// otherwise set the cancelBubble property of the original event to true (IE)
			e.cancelBubble = true;
		},
		stopImmediatePropagation : function () {
			this.isImmediatePropagationStopped = returnTrue;
			this.stopPropagation();
		},
		isDefaultPrevented : returnFalse,
		isPropagationStopped : returnFalse,
		isImmediatePropagationStopped : returnFalse
	};
	
	// Checks if an event happened on an element within another element
	// Used in jQuery.event.special.mouseenter and mouseleave handlers
	var withinElement = function (event) {
		// Check if mouse(over|out) are still within the same parent element
		var parent = event.relatedTarget;
		
		// Firefox sometimes assigns relatedTarget a XUL element
		// which we cannot access the parentNode property of
		try {
			// Traverse up the tree
			while (parent && parent !== this) {
				parent = parent.parentNode;
			}
			
			if (parent !== this) {
				// set the correct event type
				event.type = event.data;
				
				// handle event if we actually just moused on to a non sub-element
				jQuery.event.handle.apply(this, arguments);
			}
			
			// assuming we've left the element since we most likely mousedover a xul element
		} catch (e) {}
	},
	
	// In case of event delegation, we only need to rename the event.type,
	// liveHandler will take care of the rest.
	delegate = function (event) {
		event.type = event.data;
		jQuery.event.handle.apply(this, arguments);
	};
	
	// Create mouseenter and mouseleave events
	jQuery.each({
		mouseenter : "mouseover",
		mouseleave : "mouseout"
	}, function (orig, fix) {
		jQuery.event.special[orig] = {
			setup : function (data) {
				jQuery.event.add(this, fix, data && data.selector ? delegate : withinElement, orig);
			},
			teardown : function (data) {
				jQuery.event.remove(this, fix, data && data.selector ? delegate : withinElement);
			}
		};
	});
	
	// submit delegation
	if (!jQuery.support.submitBubbles) {
		
		jQuery.event.special.submit = {
			setup : function (data, namespaces) {
				if (this.nodeName.toLowerCase() !== "form") {
					jQuery.event.add(this, "click.specialSubmit", function (e) {
						var elem = e.target,
						type = elem.type;
						
						if ((type === "submit" || type === "image") && jQuery(elem).closest("form").length) {
							e.liveFired = undefined;
							return trigger("submit", this, arguments);
						}
					});
					
					jQuery.event.add(this, "keypress.specialSubmit", function (e) {
						var elem = e.target,
						type = elem.type;
						
						if ((type === "text" || type === "password") && jQuery(elem).closest("form").length && e.keyCode === 13) {
							e.liveFired = undefined;
							return trigger("submit", this, arguments);
						}
					});
					
				} else {
					return false;
				}
			},
			
			teardown : function (namespaces) {
				jQuery.event.remove(this, ".specialSubmit");
			}
		};
		
	}
	
	// change delegation, happens here so we have bind.
	if (!jQuery.support.changeBubbles) {
		
		var changeFilters,
		
		getVal = function (elem) {
			var type = elem.type,
			val = elem.value;
			
			if (type === "radio" || type === "checkbox") {
				val = elem.checked;
				
			} else if (type === "select-multiple") {
				val = elem.selectedIndex > -1 ?
					jQuery.map(elem.options, function (elem) {
						return elem.selected;
					}).join("-") :
					"";
				
			} else if (elem.nodeName.toLowerCase() === "select") {
				val = elem.selectedIndex;
			}
			
			return val;
		},
		
		testChange = function testChange(e) {
			var elem = e.target,
			data,
			val;
			
			if (!rformElems.test(elem.nodeName) || elem.readOnly) {
				return;
			}
			
			data = jQuery.data(elem, "_change_data");
			val = getVal(elem);
			
			// the current data will be also retrieved by beforeactivate
			if (e.type !== "focusout" || elem.type !== "radio") {
				jQuery.data(elem, "_change_data", val);
			}
			
			if (data === undefined || val === data) {
				return;
			}
			
			if (data != null || val) {
				e.type = "change";
				e.liveFired = undefined;
				return jQuery.event.trigger(e, arguments[1], elem);
			}
		};
		
		jQuery.event.special.change = {
			filters : {
				focusout : testChange,
				
				beforedeactivate : testChange,
				
				click : function (e) {
					var elem = e.target,
					type = elem.type;
					
					if (type === "radio" || type === "checkbox" || elem.nodeName.toLowerCase() === "select") {
						return testChange.call(this, e);
					}
				},
				
				// Change has to be called before submit
				// Keydown will be called before keypress, which is used in submit-event delegation
				keydown : function (e) {
					var elem = e.target,
					type = elem.type;
					
					if ((e.keyCode === 13 && elem.nodeName.toLowerCase() !== "textarea") ||
						(e.keyCode === 32 && (type === "checkbox" || type === "radio")) ||
						type === "select-multiple") {
						return testChange.call(this, e);
					}
				},
				
				// Beforeactivate happens also before the previous element is blurred
				// with this event you can't trigger a change event, but you can store
				// information
				beforeactivate : function (e) {
					var elem = e.target;
					jQuery.data(elem, "_change_data", getVal(elem));
				}
			},
			
			setup : function (data, namespaces) {
				if (this.type === "file") {
					return false;
				}
				
				for (var type in changeFilters) {
					jQuery.event.add(this, type + ".specialChange", changeFilters[type]);
				}
				
				return rformElems.test(this.nodeName);
			},
			
			teardown : function (namespaces) {
				jQuery.event.remove(this, ".specialChange");
				
				return rformElems.test(this.nodeName);
			}
		};
		
		changeFilters = jQuery.event.special.change.filters;
		
		// Handle when the input is .focus()'d
		changeFilters.focus = changeFilters.beforeactivate;
	}
	
	function trigger(type, elem, args) {
		args[0].type = type;
		return jQuery.event.handle.apply(elem, args);
	}
	
	// Create "bubbling" focus and blur events
	if (document.addEventListener) {
		jQuery.each({
			focus : "focusin",
			blur : "focusout"
		}, function (orig, fix) {
			jQuery.event.special[fix] = {
				setup : function () {
					if (focusCounts[fix]++ === 0) {
						document.addEventListener(orig, handler, true);
					}
				},
				teardown : function () {
					if (--focusCounts[fix] === 0) {
						document.removeEventListener(orig, handler, true);
					}
				}
			};
			
			function handler(e) {
				e = jQuery.event.fix(e);
				e.type = fix;
				return jQuery.event.trigger(e, null, e.target);
			}
		});
	}
	
	jQuery.each(["bind", "one"], function (i, name) {
		jQuery.fn[name] = function (type, data, fn) {
			// Handle object literals
			if (typeof type === "object") {
				for (var key in type) {
					this[name](key, data, type[key], fn);
				}
				return this;
			}
			
			if (jQuery.isFunction(data) || data === false) {
				fn = data;
				data = undefined;
			}
			
			var handler = name === "one" ? jQuery.proxy(fn, function (event) {
					jQuery(this).unbind(event, handler);
					return fn.apply(this, arguments);
				}) : fn;
			
			if (type === "unload" && name !== "one") {
				this.one(type, data, fn);
				
			} else {
				for (var i = 0, l = this.length; i < l; i++) {
					jQuery.event.add(this[i], type, handler, data);
				}
			}
			
			return this;
		};
	});
	
	jQuery.fn.extend({
		unbind : function (type, fn) {
			// Handle object literals
			if (typeof type === "object" && !type.preventDefault) {
				for (var key in type) {
					this.unbind(key, type[key]);
				}
				
			} else {
				for (var i = 0, l = this.length; i < l; i++) {
					jQuery.event.remove(this[i], type, fn);
				}
			}
			
			return this;
		},
		
		delegate : function (selector, types, data, fn) {
			return this.live(types, data, fn, selector);
		},
		
		undelegate : function (selector, types, fn) {
			if (arguments.length === 0) {
				return this.unbind("live");
				
			} else {
				return this.die(types, null, fn, selector);
			}
		},
		
		trigger : function (type, data) {
			return this.each(function () {
				jQuery.event.trigger(type, data, this);
			});
		},
		
		triggerHandler : function (type, data) {
			if (this[0]) {
				var event = jQuery.Event(type);
				event.preventDefault();
				event.stopPropagation();
				jQuery.event.trigger(event, data, this[0]);
				return event.result;
			}
		},
		
		toggle : function (fn) {
			// Save reference to arguments for access in closure
			var args = arguments,
			i = 1;
			
			// link all the functions, so any of them can unbind this click handler
			while (i < args.length) {
				jQuery.proxy(fn, args[i++]);
			}
			
			return this.click(jQuery.proxy(fn, function (event) {
					// Figure out which function to execute
					var lastToggle = (jQuery.data(this, "lastToggle" + fn.guid) || 0) % i;
					jQuery.data(this, "lastToggle" + fn.guid, lastToggle + 1);
					
					// Make sure that clicks stop
					event.preventDefault();
					
					// and execute the function
					return args[lastToggle].apply(this, arguments) || false;
				}));
		},
		
		hover : function (fnOver, fnOut) {
			return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
		}
	});
	
	var liveMap = {
		focus : "focusin",
		blur : "focusout",
		mouseenter : "mouseover",
		mouseleave : "mouseout"
	};
	
	jQuery.each(["live", "die"], function (i, name) {
		jQuery.fn[name] = function (types, data, fn, origSelector /* Internal Use Only */
		) {
			var type,
			i = 0,
			match,
			namespaces,
			preType,
			selector = origSelector || this.selector,
			context = origSelector ? this : jQuery(this.context);
			
			if (typeof types === "object" && !types.preventDefault) {
				for (var key in types) {
					context[name](key, data, types[key], selector);
				}
				
				return this;
			}
			
			if (jQuery.isFunction(data)) {
				fn = data;
				data = undefined;
			}
			
			types = (types || "").split(" ");
			while ((type = types[i++]) != null) {
				match = rnamespaces.exec(type);
				namespaces = "";
				
				if (match) {
					namespaces = match[0];
					type = type.replace(rnamespaces, "");
				}
				
				if (type === "hover") {
					types.push("mouseenter" + namespaces, "mouseleave" + namespaces);
					continue;
				}
				
				preType = type;
				
				if (type === "focus" || type === "blur") {
					types.push(liveMap[type] + namespaces);
					type = type + namespaces;
					
				} else {
					type = (liveMap[type] || type) + namespaces;
				}
				
				if (name === "live") {
					// bind live handler
					for (var j = 0, l = context.length; j < l; j++) {
						jQuery.event.add(context[j], "live." + liveConvert(type, selector), {
							data : data,
							selector : selector,
							handler : fn,
							origType : type,
							origHandler : fn,
							preType : preType
						});
					}
					
				} else {
					// unbind live handler
					context.unbind("live." + liveConvert(type, selector), fn);
				}
			}
			
			return this;
		};
	});
	
	function liveHandler(event) {
		var stop,
		maxLevel,
		elems = [],
		selectors = [],
		related,
		match,
		handleObj,
		elem,
		j,
		i,
		l,
		data,
		close,
		namespace,
		ret,
		events = jQuery.data(this, this.nodeType ? "events" : "__events__");
		
		if (typeof events === "function") {
			events = events.events;
		}
		
		// Make sure we avoid non-left-click bubbling in Firefox (#3861)
		if (event.liveFired === this || !events || !events.live || event.button && event.type === "click") {
			return;
		}
		
		if (event.namespace) {
			namespace = new RegExp("(^|\\.)" + event.namespace.split(".").join("\\.(?:.*\\.)?") + "(\\.|$)");
		}
		
		event.liveFired = this;
		
		var live = events.live.slice(0);
		
		for (j = 0; j < live.length; j++) {
			handleObj = live[j];
			
			if (handleObj.origType.replace(rnamespaces, "") === event.type) {
				selectors.push(handleObj.selector);
				
			} else {
				live.splice(j--, 1);
			}
		}
		
		match = jQuery(event.target).closest(selectors, event.currentTarget);
		
		for (i = 0, l = match.length; i < l; i++) {
			close = match[i];
			
			for (j = 0; j < live.length; j++) {
				handleObj = live[j];
				
				if (close.selector === handleObj.selector && (!namespace || namespace.test(handleObj.namespace))) {
					elem = close.elem;
					related = null;
					
					// Those two events require additional checking
					if (handleObj.preType === "mouseenter" || handleObj.preType === "mouseleave") {
						event.type = handleObj.preType;
						related = jQuery(event.relatedTarget).closest(handleObj.selector)[0];
					}
					
					if (!related || related !== elem) {
						elems.push({
							elem : elem,
							handleObj : handleObj,
							level : close.level
						});
					}
				}
			}
		}
		
		for (i = 0, l = elems.length; i < l; i++) {
			match = elems[i];
			
			if (maxLevel && match.level > maxLevel) {
				break;
			}
			
			event.currentTarget = match.elem;
			event.data = match.handleObj.data;
			event.handleObj = match.handleObj;
			
			ret = match.handleObj.origHandler.apply(match.elem, arguments);
			
			if (ret === false || event.isPropagationStopped()) {
				maxLevel = match.level;
				
				if (ret === false) {
					stop = false;
				}
			}
		}
		
		return stop;
	}
	
	function liveConvert(type, selector) {
		return (type && type !== "*" ? type + "." : "") + selector.replace(rperiod, "`").replace(rspace, "&");
	}
	
	jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " +
			"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
			"change select submit keydown keypress keyup error").split(" "), function (i, name) {
		
		// Handle event binding
		jQuery.fn[name] = function (data, fn) {
			if (fn == null) {
				fn = data;
				data = null;
			}
			
			return arguments.length > 0 ?
			this.bind(name, data, fn) :
			this.trigger(name);
		};
		
		if (jQuery.attrFn) {
			jQuery.attrFn[name] = true;
		}
	});
	
	// Prevent memory leaks in IE
	// Window isn't included so as not to unbind existing unload events
	// More info:
	//  - http://isaacschlueter.com/2006/10/msie-memory-leaks/
	if (window.attachEvent && !window.addEventListener) {
		jQuery(window).bind("unload", function () {
			for (var id in jQuery.cache) {
				if (jQuery.cache[id].handle) {
					// Try/Catch is to handle iframes being unloaded, see #4280
					try {
						jQuery.event.remove(jQuery.cache[id].handle.elem);
					} catch (e) {}
				}
			}
		});
	}
	
	/**
	 * @license Sizzle CSS Selector Engine - v1.0
	 *  Copyright 2009, The Dojo Foundation
	 *  Released under the MIT, BSD, and GPL Licenses.
	 *  More information: http://sizzlejs.com/
	 */
	(function () {
		
		var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
		done = 0,
		toString = Object.prototype.toString,
		hasDuplicate = false,
		baseHasDuplicate = true;
		
		// Here we check if the JavaScript engine is using some sort of
		// optimization where it does not always call our comparision
		// function. If that is the case, discard the hasDuplicate value.
		//   Thus far that includes Google Chrome.
		[0, 0].sort(function () {
			baseHasDuplicate = false;
			return 0;
		});
		
		var Sizzle = function (selector, context, results, seed) {
			results = results || [];
			context = context || document;
			
			var origContext = context;
			
			if (context.nodeType !== 1 && context.nodeType !== 9) {
				return [];
			}
			
			if (!selector || typeof selector !== "string") {
				return results;
			}
			
			var parts = [],
			m,
			set,
			checkSet,
			extra,
			prune = true,
			contextXML = Sizzle.isXML(context),
			soFar = selector,
			ret,
			cur,
			pop,
			i;
			
			// Reset the position of the chunker regexp (start from head)
			do {
				chunker.exec("");
				m = chunker.exec(soFar);
				
				if (m) {
					soFar = m[3];
					
					parts.push(m[1]);
					
					if (m[2]) {
						extra = m[3];
						break;
					}
				}
			} while (m);
			
			if (parts.length > 1 && origPOS.exec(selector)) {
				if (parts.length === 2 && Expr.relative[parts[0]]) {
					set = posProcess(parts[0] + parts[1], context);
				} else {
					set = Expr.relative[parts[0]] ?
						[context] :
						Sizzle(parts.shift(), context);
					while (parts.length) {
						selector = parts.shift();
						
						if (Expr.relative[selector]) {
							selector += parts.shift();
						}
						
						set = posProcess(selector, set);
					}
				}
			} else {
				// Take a shortcut and set the context if the root selector is an ID
				// (but not if it'll be faster if the inner selector is an ID)
				if (!seed && parts.length > 1 && context.nodeType === 9 && !contextXML &&
					Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1])) {
					ret = Sizzle.find(parts.shift(), context, contextXML);
					context = ret.expr ? Sizzle.filter(ret.expr, ret.set)[0] : ret.set[0];
				}
				
				if (context) {
					ret = seed ? {
						expr : parts.pop(),
						set : makeArray(seed)
					}
					 :
					Sizzle.find(parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML);
					set = ret.expr ? Sizzle.filter(ret.expr, ret.set) : ret.set;
					
					if (parts.length > 0) {
						checkSet = makeArray(set);
					} else {
						prune = false;
					}
					while (parts.length) {
						cur = parts.pop();
						pop = cur;
						
						if (!Expr.relative[cur]) {
							cur = "";
						} else {
							pop = parts.pop();
						}
						
						if (pop == null) {
							pop = context;
						}
						
						Expr.relative[cur](checkSet, pop, contextXML);
					}
				} else {
					checkSet = parts = [];
				}
			}
			
			if (!checkSet) {
				checkSet = set;
			}
			
			if (!checkSet) {
				Sizzle.error(cur || selector);
			}
			
			if (toString.call(checkSet) === "[object Array]") {
				if (!prune) {
					results.push.apply(results, checkSet);
				} else if (context && context.nodeType === 1) {
					for (i = 0; checkSet[i] != null; i++) {
						if (checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && Sizzle.contains(context, checkSet[i]))) {
							results.push(set[i]);
						}
					}
				} else {
					for (i = 0; checkSet[i] != null; i++) {
						if (checkSet[i] && checkSet[i].nodeType === 1) {
							results.push(set[i]);
						}
					}
				}
			} else {
				makeArray(checkSet, results);
			}
			
			if (extra) {
				Sizzle(extra, origContext, results, seed);
				Sizzle.uniqueSort(results);
			}
			
			return results;
		};
		
		Sizzle.uniqueSort = function (results) {
			if (sortOrder) {
				hasDuplicate = baseHasDuplicate;
				results.sort(sortOrder);
				
				if (hasDuplicate) {
					for (var i = 1; i < results.length; i++) {
						if (results[i] === results[i - 1]) {
							results.splice(i--, 1);
						}
					}
				}
			}
			
			return results;
		};
		
		Sizzle.matches = function (expr, set) {
			return Sizzle(expr, null, null, set);
		};
		
		Sizzle.matchesSelector = function (node, expr) {
			return Sizzle(expr, null, null, [node]).length > 0;
		};
		
		Sizzle.find = function (expr, context, isXML) {
			var set;
			
			if (!expr) {
				return [];
			}
			
			for (var i = 0, l = Expr.order.length; i < l; i++) {
				var type = Expr.order[i],
				match;
				
				if ((match = Expr.leftMatch[type].exec(expr))) {
					var left = match[1];
					match.splice(1, 1);
					
					if (left.substr(left.length - 1) !== "\\") {
						match[1] = (match[1] || "").replace(/\\/g, "");
						set = Expr.find[type](match, context, isXML);
						if (set != null) {
							expr = expr.replace(Expr.match[type], "");
							break;
						}
					}
				}
			}
			
			if (!set) {
				set = context.getElementsByTagName("*");
			}
			
			return {
				set : set,
				expr : expr
			};
		};
		
		Sizzle.filter = function (expr, set, inplace, not) {
			var old = expr,
			result = [],
			curLoop = set,
			match,
			anyFound,
			isXMLFilter = set && set[0] && Sizzle.isXML(set[0]);
			while (expr && set.length) {
				for (var type in Expr.filter) {
					if ((match = Expr.leftMatch[type].exec(expr)) != null && match[2]) {
						var filter = Expr.filter[type],
						found,
						item,
						left = match[1];
						anyFound = false;
						
						match.splice(1, 1);
						
						if (left.substr(left.length - 1) === "\\") {
							continue;
						}
						
						if (curLoop === result) {
							result = [];
						}
						
						if (Expr.preFilter[type]) {
							match = Expr.preFilter[type](match, curLoop, inplace, result, not, isXMLFilter);
							
							if (!match) {
								anyFound = found = true;
							} else if (match === true) {
								continue;
							}
						}
						
						if (match) {
							for (var i = 0; (item = curLoop[i]) != null; i++) {
								if (item) {
									found = filter(item, match, i, curLoop);
									var pass = not^!!found;
									
									if (inplace && found != null) {
										if (pass) {
											anyFound = true;
										} else {
											curLoop[i] = false;
										}
									} else if (pass) {
										result.push(item);
										anyFound = true;
									}
								}
							}
						}
						
						if (found !== undefined) {
							if (!inplace) {
								curLoop = result;
							}
							
							expr = expr.replace(Expr.match[type], "");
							
							if (!anyFound) {
								return [];
							}
							
							break;
						}
					}
				}
				
				// Improper expression
				if (expr === old) {
					if (anyFound == null) {
						Sizzle.error(expr);
					} else {
						break;
					}
				}
				
				old = expr;
			}
			
			return curLoop;
		};
		
		Sizzle.error = function (msg) {
			throw "Syntax error, unrecognized expression: " + msg;
		};
		
		var Expr = Sizzle.selectors = {
			order : ["ID", "NAME", "TAG"],
			match : {
				ID : /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
				CLASS : /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
				NAME : /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
				ATTR : /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(['"]*)(.*?)\3|)\s*\]/,
				TAG : /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
				CHILD : /:(only|nth|last|first)-child(?:\((even|odd|[\dn+\-]*)\))?/,
				POS : /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
				PSEUDO : /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
			},
			leftMatch : {},
			attrMap : {
				"class" : "className",
				"for" : "htmlFor"
			},
			attrHandle : {
				href : function (elem) {
					return elem.getAttribute("href");
				}
			},
			relative : {
				"+" : function (checkSet, part) {
					var isPartStr = typeof part === "string",
					isTag = isPartStr && !/\W/.test(part),
					isPartStrNotTag = isPartStr && !isTag;
					
					if (isTag) {
						part = part.toLowerCase();
					}
					
					for (var i = 0, l = checkSet.length, elem; i < l; i++) {
						if ((elem = checkSet[i])) {
							while ((elem = elem.previousSibling) && elem.nodeType !== 1) {}
							
							checkSet[i] = isPartStrNotTag || elem && elem.nodeName.toLowerCase() === part ?
								elem || false :
								elem === part;
						}
					}
					
					if (isPartStrNotTag) {
						Sizzle.filter(part, checkSet, true);
					}
				},
				">" : function (checkSet, part) {
					var isPartStr = typeof part === "string",
					elem,
					i = 0,
					l = checkSet.length;
					
					if (isPartStr && !/\W/.test(part)) {
						part = part.toLowerCase();
						
						for (; i < l; i++) {
							elem = checkSet[i];
							if (elem) {
								var parent = elem.parentNode;
								checkSet[i] = parent.nodeName.toLowerCase() === part ? parent : false;
							}
						}
					} else {
						for (; i < l; i++) {
							elem = checkSet[i];
							if (elem) {
								checkSet[i] = isPartStr ?
									elem.parentNode :
									elem.parentNode === part;
							}
						}
						
						if (isPartStr) {
							Sizzle.filter(part, checkSet, true);
						}
					}
				},
				"" : function (checkSet, part, isXML) {
					var doneName = done++,
					checkFn = dirCheck,
					nodeCheck;
					
					if (typeof part === "string" && !/\W/.test(part)) {
						part = part.toLowerCase();
						nodeCheck = part;
						checkFn = dirNodeCheck;
					}
					
					checkFn("parentNode", part, doneName, checkSet, nodeCheck, isXML);
				},
				"~" : function (checkSet, part, isXML) {
					var doneName = done++,
					checkFn = dirCheck,
					nodeCheck;
					
					if (typeof part === "string" && !/\W/.test(part)) {
						part = part.toLowerCase();
						nodeCheck = part;
						checkFn = dirNodeCheck;
					}
					
					checkFn("previousSibling", part, doneName, checkSet, nodeCheck, isXML);
				}
			},
			find : {
				ID : function (match, context, isXML) {
					if (typeof context.getElementById !== "undefined" && !isXML) {
						var m = context.getElementById(match[1]);
						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						return m && m.parentNode ? [m] : [];
					}
				},
				NAME : function (match, context) {
					if (typeof context.getElementsByName !== "undefined") {
						var ret = [],
						results = context.getElementsByName(match[1]);
						
						for (var i = 0, l = results.length; i < l; i++) {
							if (results[i].getAttribute("name") === match[1]) {
								ret.push(results[i]);
							}
						}
						
						return ret.length === 0 ? null : ret;
					}
				},
				TAG : function (match, context) {
					return context.getElementsByTagName(match[1]);
				}
			},
			preFilter : {
				CLASS : function (match, curLoop, inplace, result, not, isXML) {
					match = " " + match[1].replace(/\\/g, "") + " ";
					
					if (isXML) {
						return match;
					}
					
					for (var i = 0, elem; (elem = curLoop[i]) != null; i++) {
						if (elem) {
							if (not^(elem.className && (" " + elem.className + " ").replace(/[\t\n]/g, " ").indexOf(match) >= 0)) {
								if (!inplace) {
									result.push(elem);
								}
							} else if (inplace) {
								curLoop[i] = false;
							}
						}
					}
					
					return false;
				},
				ID : function (match) {
					return match[1].replace(/\\/g, "");
				},
				TAG : function (match, curLoop) {
					return match[1].toLowerCase();
				},
				CHILD : function (match) {
					if (match[1] === "nth") {
						// parse equations like 'even', 'odd', '5', '2n', '3n+2', '4n-1', '-n+6'
						var test = /(-?)(\d*)n((?:\+|-)?\d*)/.exec(
								match[2] === "even" && "2n" || match[2] === "odd" && "2n+1" ||
								!/\D/.test(match[2]) && "0n+" + match[2] || match[2]);
						
						// calculate the numbers (first)n+(last) including if they are negative
						match[2] = (test[1] + (test[2] || 1)) - 0;
						match[3] = test[3] - 0;
					}
					
					// TODO: Move to normal caching system
					match[0] = done++;
					
					return match;
				},
				ATTR : function (match, curLoop, inplace, result, not, isXML) {
					var name = match[1].replace(/\\/g, "");
					
					if (!isXML && Expr.attrMap[name]) {
						match[1] = Expr.attrMap[name];
					}
					
					if (match[2] === "~=") {
						match[4] = " " + match[4] + " ";
					}
					
					return match;
				},
				PSEUDO : function (match, curLoop, inplace, result, not) {
					if (match[1] === "not") {
						// If we're dealing with a complex expression, or a simple one
						if ((chunker.exec(match[3]) || "").length > 1 || /^\w/.test(match[3])) {
							match[3] = Sizzle(match[3], null, null, curLoop);
						} else {
							var ret = Sizzle.filter(match[3], curLoop, inplace, true^not);
							if (!inplace) {
								result.push.apply(result, ret);
							}
							return false;
						}
					} else if (Expr.match.POS.test(match[0]) || Expr.match.CHILD.test(match[0])) {
						return true;
					}
					
					return match;
				},
				POS : function (match) {
					match.unshift(true);
					return match;
				}
			},
			filters : {
				enabled : function (elem) {
					return elem.disabled === false && elem.type !== "hidden";
				},
				disabled : function (elem) {
					return elem.disabled === true;
				},
				checked : function (elem) {
					return elem.checked === true;
				},
				selected : function (elem) {
					// Accessing this property makes selected-by-default
					// options in Safari work properly
					elem.parentNode.selectedIndex;
					return elem.selected === true;
				},
				parent : function (elem) {
					return !!elem.firstChild;
				},
				empty : function (elem) {
					return !elem.firstChild;
				},
				has : function (elem, i, match) {
					return !!Sizzle(match[3], elem).length;
				},
				header : function (elem) {
					return (/h\d/i).test(elem.nodeName);
				},
				text : function (elem) {
					return "text" === elem.type;
				},
				radio : function (elem) {
					return "radio" === elem.type;
				},
				checkbox : function (elem) {
					return "checkbox" === elem.type;
				},
				file : function (elem) {
					return "file" === elem.type;
				},
				password : function (elem) {
					return "password" === elem.type;
				},
				submit : function (elem) {
					return "submit" === elem.type;
				},
				image : function (elem) {
					return "image" === elem.type;
				},
				reset : function (elem) {
					return "reset" === elem.type;
				},
				button : function (elem) {
					return "button" === elem.type || elem.nodeName.toLowerCase() === "button";
				},
				input : function (elem) {
					return (/input|select|textarea|button/i).test(elem.nodeName);
				}
			},
			setFilters : {
				first : function (elem, i) {
					return i === 0;
				},
				last : function (elem, i, match, array) {
					return i === array.length - 1;
				},
				even : function (elem, i) {
					return i % 2 === 0;
				},
				odd : function (elem, i) {
					return i % 2 === 1;
				},
				lt : function (elem, i, match) {
					return i < match[3] - 0;
				},
				gt : function (elem, i, match) {
					return i > match[3] - 0;
				},
				nth : function (elem, i, match) {
					return match[3] - 0 === i;
				},
				eq : function (elem, i, match) {
					return match[3] - 0 === i;
				}
			},
			filter : {
				PSEUDO : function (elem, match, i, array) {
					var name = match[1],
					filter = Expr.filters[name];
					
					if (filter) {
						return filter(elem, i, match, array);
					} else if (name === "contains") {
						return (elem.textContent || elem.innerText || Sizzle.getText([elem]) || "").indexOf(match[3]) >= 0;
					} else if (name === "not") {
						var not = match[3];
						
						for (var j = 0, l = not.length; j < l; j++) {
							if (not[j] === elem) {
								return false;
							}
						}
						
						return true;
					} else {
						Sizzle.error("Syntax error, unrecognized expression: " + name);
					}
				},
				CHILD : function (elem, match) {
					var type = match[1],
					node = elem;
					switch (type) {
					case 'only':
					case 'first':
						while ((node = node.previousSibling)) {
							if (node.nodeType === 1) {
								return false;
							}
						}
						if (type === "first") {
							return true;
						}
						node = elem;
					case 'last':
						while ((node = node.nextSibling)) {
							if (node.nodeType === 1) {
								return false;
							}
						}
						return true;
					case 'nth':
						var first = match[2],
						last = match[3];
						
						if (first === 1 && last === 0) {
							return true;
						}
						
						var doneName = match[0],
						parent = elem.parentNode;
						
						if (parent && (parent.sizcache !== doneName || !elem.nodeIndex)) {
							var count = 0;
							for (node = parent.firstChild; node; node = node.nextSibling) {
								if (node.nodeType === 1) {
									node.nodeIndex = ++count;
								}
							}
							parent.sizcache = doneName;
						}
						
						var diff = elem.nodeIndex - last;
						if (first === 0) {
							return diff === 0;
						} else {
							return (diff % first === 0 && diff / first >= 0);
						}
					}
				},
				ID : function (elem, match) {
					return elem.nodeType === 1 && elem.getAttribute("id") === match;
				},
				TAG : function (elem, match) {
					return (match === "*" && elem.nodeType === 1) || elem.nodeName.toLowerCase() === match;
				},
				CLASS : function (elem, match) {
					return (" " + (elem.className || elem.getAttribute("class")) + " ")
					.indexOf(match) > -1;
				},
				ATTR : function (elem, match) {
					var name = match[1],
					result = Expr.attrHandle[name] ?
						Expr.attrHandle[name](elem) :
						elem[name] != null ?
						elem[name] :
						elem.getAttribute(name),
					value = result + "",
					type = match[2],
					check = match[4];
					
					return result == null ?
					type === "!=" :
					type === "=" ?
					value === check :
					type === "*=" ?
					value.indexOf(check) >= 0 :
					type === "~=" ?
					(" " + value + " ").indexOf(check) >= 0 :
					!check ?
					value && result !== false :
					type === "!=" ?
					value !== check :
					type === "^=" ?
					value.indexOf(check) === 0 :
					type === "$=" ?
					value.substr(value.length - check.length) === check :
					type === "|=" ?
					value === check || value.substr(0, check.length + 1) === check + "-" :
					false;
				},
				POS : function (elem, match, i, array) {
					var name = match[2],
					filter = Expr.setFilters[name];
					
					if (filter) {
						return filter(elem, i, match, array);
					}
				}
			}
		};
		
		var origPOS = Expr.match.POS,
		fescape = function (all, num) {
			return "\\" + (num - 0 + 1);
		};
		
		for (var type in Expr.match) {
			Expr.match[type] = new RegExp(Expr.match[type].source + (/(?![^\[]*\])(?![^\(]*\))/.source));
			Expr.leftMatch[type] = new RegExp(/(^(?:.|\r|\n)*?)/.source + Expr.match[type].source.replace(/\\(\d+)/g, fescape));
		}
		
		var makeArray = function (array, results) {
			array = Array.prototype.slice.call(array, 0);
			
			if (results) {
				results.push.apply(results, array);
				return results;
			}
			
			return array;
		};
		
		// Perform a simple check to determine if the browser is capable of
		// converting a NodeList to an array using builtin methods.
		// Also verifies that the returned array holds DOM nodes
		// (which is not the case in the Blackberry browser)
		try {
			Array.prototype.slice.call(document.documentElement.childNodes, 0)[0].nodeType;
			
			// Provide a fallback method if it does not work
		} catch (e) {
			makeArray = function (array, results) {
				var ret = results || [],
				i = 0;
				
				if (toString.call(array) === "[object Array]") {
					Array.prototype.push.apply(ret, array);
				} else {
					if (typeof array.length === "number") {
						for (var l = array.length; i < l; i++) {
							ret.push(array[i]);
						}
					} else {
						for (; array[i]; i++) {
							ret.push(array[i]);
						}
					}
				}
				
				return ret;
			};
		}
		
		var sortOrder,
		siblingCheck;
		
		if (document.documentElement.compareDocumentPosition) {
			sortOrder = function (a, b) {
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}
				
				if (!a.compareDocumentPosition || !b.compareDocumentPosition) {
					return a.compareDocumentPosition ? -1 : 1;
				}
				
				return a.compareDocumentPosition(b) & 4 ? -1 : 1;
			};
		} else {
			sortOrder = function (a, b) {
				var ap = [],
				bp = [],
				aup = a.parentNode,
				bup = b.parentNode,
				cur = aup,
				al,
				bl;
				
				// The nodes are identical, we can exit early
				if (a === b) {
					hasDuplicate = true;
					return 0;
					
					// If the nodes are siblings (or identical) we can do a quick check
				} else if (aup === bup) {
					return siblingCheck(a, b);
					
					// If no parents were found then the nodes are disconnected
				} else if (!aup) {
					return -1;
					
				} else if (!bup) {
					return 1;
				}
				
				// Otherwise they're somewhere else in the tree so we need
				// to build up a full list of the parentNodes for comparison
				while (cur) {
					ap.unshift(cur);
					cur = cur.parentNode;
				}
				
				cur = bup;
				while (cur) {
					bp.unshift(cur);
					cur = cur.parentNode;
				}
				
				al = ap.length;
				bl = bp.length;
				
				// Start walking down the tree looking for a discrepancy
				for (var i = 0; i < al && i < bl; i++) {
					if (ap[i] !== bp[i]) {
						return siblingCheck(ap[i], bp[i]);
					}
				}
				
				// We ended someplace up the tree so do a sibling check
				return i === al ?
				siblingCheck(a, bp[i], -1) :
				siblingCheck(ap[i], b, 1);
			};
			
			siblingCheck = function (a, b, ret) {
				if (a === b) {
					return ret;
				}
				
				var cur = a.nextSibling;
				while (cur) {
					if (cur === b) {
						return -1;
					}
					
					cur = cur.nextSibling;
				}
				
				return 1;
			};
		}
		
		// Utility function for retreiving the text value of an array of DOM nodes
		Sizzle.getText = function (elems) {
			var ret = "",
			elem;
			
			for (var i = 0; elems[i]; i++) {
				elem = elems[i];
				
				// Get the text from text nodes and CDATA nodes
				if (elem.nodeType === 3 || elem.nodeType === 4) {
					ret += elem.nodeValue;
					
					// Traverse everything else, except comment nodes
				} else if (elem.nodeType !== 8) {
					ret += Sizzle.getText(elem.childNodes);
				}
			}
			
			return ret;
		};
		
		// Check to see if the browser returns elements by name when
		// querying by getElementById (and provide a workaround)
		(function () {
			// We're going to inject a fake input element with a specified name
			var form = document.createElement("div"),
			id = "script" + (new Date()).getTime();
			form.innerHTML = "<a name='" + id + "'/>";
			
			// Inject it into the root element, check its status, and remove it quickly
			var root = document.documentElement;
			root.insertBefore(form, root.firstChild);
			
			// The workaround has to do additional checks after a getElementById
			// Which slows things down for other browsers (hence the branching)
			if (document.getElementById(id)) {
				Expr.find.ID = function (match, context, isXML) {
					if (typeof context.getElementById !== "undefined" && !isXML) {
						var m = context.getElementById(match[1]);
						return m ? m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ? [m] : undefined : [];
					}
				};
				
				Expr.filter.ID = function (elem, match) {
					var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
					return elem.nodeType === 1 && node && node.nodeValue === match;
				};
			}
			
			root.removeChild(form);
			root = form = null; // release memory in IE
		})();
		
		(function () {
			// Check to see if the browser returns only elements
			// when doing getElementsByTagName("*")
			
			// Create a fake element
			var div = document.createElement("div");
			div.appendChild(document.createComment(""));
			
			// Make sure no comments are found
			if (div.getElementsByTagName("*").length > 0) {
				Expr.find.TAG = function (match, context) {
					var results = context.getElementsByTagName(match[1]);
					
					// Filter out possible comments
					if (match[1] === "*") {
						var tmp = [];
						
						for (var i = 0; results[i]; i++) {
							if (results[i].nodeType === 1) {
								tmp.push(results[i]);
							}
						}
						
						results = tmp;
					}
					
					return results;
				};
			}
			
			// Check to see if an attribute returns normalized href attributes
			div.innerHTML = "<a href='#'></a>";
			if (div.firstChild && typeof div.firstChild.getAttribute !== "undefined" &&
				div.firstChild.getAttribute("href") !== "#") {
				Expr.attrHandle.href = function (elem) {
					return elem.getAttribute("href", 2);
				};
			}
			
			div = null; // release memory in IE
		})();
		
		if (document.querySelectorAll) {
			(function () {
				var oldSizzle = Sizzle,
				div = document.createElement("div");
				div.innerHTML = "<p class='TEST'></p>";
				
				// Safari can't handle uppercase or unicode characters when
				// in quirks mode.
				if (div.querySelectorAll && div.querySelectorAll(".TEST").length === 0) {
					return;
				}
				
				Sizzle = function (query, context, extra, seed) {
					context = context || document;
					
					// Only use querySelectorAll on non-XML documents
					// (ID selectors don't work in non-HTML documents)
					if (!seed && !Sizzle.isXML(context)) {
						if (context.nodeType === 9) {
							try {
								return makeArray(context.querySelectorAll(query), extra);
							} catch (qsaError) {}
							
							// qSA works strangely on Element-rooted queries
							// We can work around this by specifying an extra ID on the root
							// and working up from there (Thanks to Andrew Dupont for the technique)
							// IE 8 doesn't work on object elements
						} else if (context.nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
							var old = context.id,
							id = context.id = "__sizzle__";
							
							try {
								return makeArray(context.querySelectorAll("#" + id + " " + query), extra);
								
							} catch (pseudoError) {}
							
							finally {
								if (old) {
									context.id = old;
									
								} else {
									context.removeAttribute("id");
								}
							}
						}
					}
					
					return oldSizzle(query, context, extra, seed);
				};
				
				for (var prop in oldSizzle) {
					Sizzle[prop] = oldSizzle[prop];
				}
				
				div = null; // release memory in IE
			})();
		}
		
		(function () {
			var html = document.documentElement,
			matches = html.matchesSelector || html.mozMatchesSelector || html.webkitMatchesSelector || html.msMatchesSelector,
			pseudoWorks = false;
			
			try {
				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call(document.documentElement, ":sizzle");
				
			} catch (pseudoError) {
				pseudoWorks = true;
			}
			
			if (matches) {
				Sizzle.matchesSelector = function (node, expr) {
					try {
						if (pseudoWorks || !Expr.match.PSEUDO.test(expr)) {
							return matches.call(node, expr);
						}
					} catch (e) {}
					
					return Sizzle(expr, null, null, [node]).length > 0;
				};
			}
		})();
		
		(function () {
			var div = document.createElement("div");
			
			div.innerHTML = "<div class='test e'></div><div class='test'></div>";
			
			// Opera can't find a second classname (in 9.6)
			// Also, make sure that getElementsByClassName actually exists
			if (!div.getElementsByClassName || div.getElementsByClassName("e").length === 0) {
				return;
			}
			
			// Safari caches class attributes, doesn't catch changes (in 3.2)
			div.lastChild.className = "e";
			
			if (div.getElementsByClassName("e").length === 1) {
				return;
			}
			
			Expr.order.splice(1, 0, "CLASS");
			Expr.find.CLASS = function (match, context, isXML) {
				if (typeof context.getElementsByClassName !== "undefined" && !isXML) {
					return context.getElementsByClassName(match[1]);
				}
			};
			
			div = null; // release memory in IE
		})();
		
		function dirNodeCheck(dir, cur, doneName, checkSet, nodeCheck, isXML) {
			for (var i = 0, l = checkSet.length; i < l; i++) {
				var elem = checkSet[i];
				if (elem) {
					elem = elem[dir];
					var match = false;
					while (elem) {
						if (elem.sizcache === doneName) {
							match = checkSet[elem.sizset];
							break;
						}
						
						if (elem.nodeType === 1 && !isXML) {
							elem.sizcache = doneName;
							elem.sizset = i;
						}
						
						if (elem.nodeName.toLowerCase() === cur) {
							match = elem;
							break;
						}
						
						elem = elem[dir];
					}
					
					checkSet[i] = match;
				}
			}
		}
		
		function dirCheck(dir, cur, doneName, checkSet, nodeCheck, isXML) {
			for (var i = 0, l = checkSet.length; i < l; i++) {
				var elem = checkSet[i];
				if (elem) {
					elem = elem[dir];
					var match = false;
					while (elem) {
						if (elem.sizcache === doneName) {
							match = checkSet[elem.sizset];
							break;
						}
						
						if (elem.nodeType === 1) {
							if (!isXML) {
								elem.sizcache = doneName;
								elem.sizset = i;
							}
							if (typeof cur !== "string") {
								if (elem === cur) {
									match = true;
									break;
								}
								
							} else if (Sizzle.filter(cur, [elem]).length > 0) {
								match = elem;
								break;
							}
						}
						
						elem = elem[dir];
					}
					
					checkSet[i] = match;
				}
			}
		}
		
		Sizzle.contains = document.documentElement.contains ? function (a, b) {
			return a !== b && (a.contains ? a.contains(b) : true);
		}
		 : function (a, b) {
			return !!(a.compareDocumentPosition(b) & 16);
		};
		
		Sizzle.isXML = function (elem) {
			// documentElement is verified for cases where it doesn't yet exist
			// (such as loading iframes in IE - #4833)
			var documentElement = (elem ? elem.ownerDocument || elem : 0).documentElement;
			return documentElement ? documentElement.nodeName !== "HTML" : false;
		};
		
		var posProcess = function (selector, context) {
			var tmpSet = [],
			later = "",
			match,
			root = context.nodeType ? [context] : context;
			
			// Position selectors must be done after the filter
			// And so must :not(positional) so we move all PSEUDOs to the end
			while ((match = Expr.match.PSEUDO.exec(selector))) {
				later += match[0];
				selector = selector.replace(Expr.match.PSEUDO, "");
			}
			
			selector = Expr.relative[selector] ? selector + "*" : selector;
			
			for (var i = 0, l = root.length; i < l; i++) {
				Sizzle(selector, root[i], tmpSet);
			}
			
			return Sizzle.filter(later, tmpSet);
		};
		
		// EXPOSE
		jQuery.find = Sizzle;
		jQuery.expr = Sizzle.selectors;
		jQuery.expr[":"] = jQuery.expr.filters;
		jQuery.unique = Sizzle.uniqueSort;
		jQuery.text = Sizzle.getText;
		jQuery.isXMLDoc = Sizzle.isXML;
		jQuery.contains = Sizzle.contains;
		
	})();
	
	var runtil = /Until$/,
	rparentsprev = /^(?:parents|prevUntil|prevAll)/,
	// Note: This RegExp should be improved, or likely pulled from Sizzle
	rmultiselector = /,/,
	isSimple = /^.[^:#\[\.,]*$/,
	slice = Array.prototype.slice,
	POS = jQuery.expr.match.POS;
	
	jQuery.fn.extend({
		find : function (selector) {
			var ret = this.pushStack("", "find", selector),
			length = 0;
			
			for (var i = 0, l = this.length; i < l; i++) {
				length = ret.length;
				jQuery.find(selector, this[i], ret);
				
				if (i > 0) {
					// Make sure that the results are unique
					for (var n = length; n < ret.length; n++) {
						for (var r = 0; r < length; r++) {
							if (ret[r] === ret[n]) {
								ret.splice(n--, 1);
								break;
							}
						}
					}
				}
			}
			
			return ret;
		},
		
		has : function (target) {
			var targets = jQuery(target);
			return this.filter(function () {
				for (var i = 0, l = targets.length; i < l; i++) {
					if (jQuery.contains(this, targets[i])) {
						return true;
					}
				}
			});
		},
		
		not : function (selector) {
			return this.pushStack(winnow(this, selector, false), "not", selector);
		},
		
		filter : function (selector) {
			return this.pushStack(winnow(this, selector, true), "filter", selector);
		},
		
		is : function (selector) {
			return !!selector && jQuery.filter(selector, this).length > 0;
		},
		
		closest : function (selectors, context) {
			var ret = [],
			i,
			l,
			cur = this[0];
			
			if (jQuery.isArray(selectors)) {
				var match,
				matches = {},
				selector,
				level = 1;
				
				if (cur && selectors.length) {
					for (i = 0, l = selectors.length; i < l; i++) {
						selector = selectors[i];
						
						if (!matches[selector]) {
							matches[selector] = jQuery.expr.match.POS.test(selector) ?
								jQuery(selector, context || this.context) :
								selector;
						}
					}
					while (cur && cur.ownerDocument && cur !== context) {
						for (selector in matches) {
							match = matches[selector];
							
							if (match.jquery ? match.index(cur) > -1 : jQuery(cur).is(match)) {
								ret.push({
									selector : selector,
									elem : cur,
									level : level
								});
							}
						}
						
						cur = cur.parentNode;
						level++;
					}
				}
				
				return ret;
			}
			
			var pos = POS.test(selectors) ?
				jQuery(selectors, context || this.context) : null;
			
			for (i = 0, l = this.length; i < l; i++) {
				cur = this[i];
				while (cur) {
					if (pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors)) {
						ret.push(cur);
						break;
						
					} else {
						cur = cur.parentNode;
						if (!cur || !cur.ownerDocument || cur === context) {
							break;
						}
					}
				}
			}
			
			ret = ret.length > 1 ? jQuery.unique(ret) : ret;
			
			return this.pushStack(ret, "closest", selectors);
		},
		
		// Determine the position of an element within
		// the matched set of elements
		index : function (elem) {
			if (!elem || typeof elem === "string") {
				return jQuery.inArray(this[0],
					// If it receives a string, the selector is used
					// If it receives nothing, the siblings are used
					elem ? jQuery(elem) : this.parent().children());
			}
			// Locate the position of the desired element
			return jQuery.inArray(
				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[0] : elem, this);
		},
		
		add : function (selector, context) {
			var set = typeof selector === "string" ?
				jQuery(selector, context || this.context) :
				jQuery.makeArray(selector),
			all = jQuery.merge(this.get(), set);
			
			return this.pushStack(isDisconnected(set[0]) || isDisconnected(all[0]) ?
				all :
				jQuery.unique(all));
		},
		
		andSelf : function () {
			return this.add(this.prevObject);
		}
	});
	
	// A painfully simple check to see if an element is disconnected
	// from a document (should be improved, where feasible).
	function isDisconnected(node) {
		return !node || !node.parentNode || node.parentNode.nodeType === 11;
	}
	
	jQuery.each({
		parent : function (elem) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents : function (elem) {
			return jQuery.dir(elem, "parentNode");
		},
		parentsUntil : function (elem, i, until) {
			return jQuery.dir(elem, "parentNode", until);
		},
		next : function (elem) {
			return jQuery.nth(elem, 2, "nextSibling");
		},
		prev : function (elem) {
			return jQuery.nth(elem, 2, "previousSibling");
		},
		nextAll : function (elem) {
			return jQuery.dir(elem, "nextSibling");
		},
		prevAll : function (elem) {
			return jQuery.dir(elem, "previousSibling");
		},
		nextUntil : function (elem, i, until) {
			return jQuery.dir(elem, "nextSibling", until);
		},
		prevUntil : function (elem, i, until) {
			return jQuery.dir(elem, "previousSibling", until);
		},
		siblings : function (elem) {
			return jQuery.sibling(elem.parentNode.firstChild, elem);
		},
		children : function (elem) {
			return jQuery.sibling(elem.firstChild);
		},
		contents : function (elem) {
			return jQuery.nodeName(elem, "iframe") ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.makeArray(elem.childNodes);
		}
	}, function (name, fn) {
		jQuery.fn[name] = function (until, selector) {
			var ret = jQuery.map(this, fn, until);
			
			if (!runtil.test(name)) {
				selector = until;
			}
			
			if (selector && typeof selector === "string") {
				ret = jQuery.filter(selector, ret);
			}
			
			ret = this.length > 1 ? jQuery.unique(ret) : ret;
			
			if ((this.length > 1 || rmultiselector.test(selector)) && rparentsprev.test(name)) {
				ret = ret.reverse();
			}
			
			return this.pushStack(ret, name, slice.call(arguments).join(","));
		};
	});
	
	jQuery.extend({
		filter : function (expr, elems, not) {
			if (not) {
				expr = ":not(" + expr + ")";
			}
			
			return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [elems[0]] : [] :
			jQuery.find.matches(expr, elems);
		},
		
		dir : function (elem, dir, until) {
			var matched = [],
			cur = elem[dir];
			while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {
				if (cur.nodeType === 1) {
					matched.push(cur);
				}
				cur = cur[dir];
			}
			return matched;
		},
		
		nth : function (cur, result, dir, elem) {
			result = result || 1;
			var num = 0;
			
			for (; cur; cur = cur[dir]) {
				if (cur.nodeType === 1 && ++num === result) {
					break;
				}
			}
			
			return cur;
		},
		
		sibling : function (n, elem) {
			var r = [];
			
			for (; n; n = n.nextSibling) {
				if (n.nodeType === 1 && n !== elem) {
					r.push(n);
				}
			}
			
			return r;
		}
	});
	
	// Implement the identical functionality for filter and not
	function winnow(elements, qualifier, keep) {
		if (jQuery.isFunction(qualifier)) {
			return jQuery.grep(elements, function (elem, i) {
				var retVal = !!qualifier.call(elem, i, elem);
				return retVal === keep;
			});
			
		} else if (qualifier.nodeType) {
			return jQuery.grep(elements, function (elem, i) {
				return (elem === qualifier) === keep;
			});
			
		} else if (typeof qualifier === "string") {
			var filtered = jQuery.grep(elements, function (elem) {
					return elem.nodeType === 1;
				});
			
			if (isSimple.test(qualifier)) {
				return jQuery.filter(qualifier, filtered, !keep);
			} else {
				qualifier = jQuery.filter(qualifier, filtered);
			}
		}
		
		return jQuery.grep(elements, function (elem, i) {
			return (jQuery.inArray(elem, qualifier) >= 0) === keep;
		});
	}
	
	var rinlinejQuery = / jQuery\d+="(?:\d+|null)"/g,
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnocache = /<(?:script|object|embed|option|style)/i,
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, // checked="checked" or checked (html5)
	raction = /\=([^="'>\s]+\/)>/g,
	wrapMap = {
		option : [1, "<select multiple='multiple'>", "</select>"],
		legend : [1, "<fieldset>", "</fieldset>"],
		thead : [1, "<table>", "</table>"],
		tr : [2, "<table><tbody>", "</tbody></table>"],
		td : [3, "<table><tbody><tr>", "</tr></tbody></table>"],
		col : [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
		area : [1, "<map>", "</map>"],
		_default : [0, "", ""]
	};
	
	wrapMap.optgroup = wrapMap.option;
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;
	
	// IE can't serialize <link> and <script> tags normally
	if (!jQuery.support.htmlSerialize) {
		wrapMap._default = [1, "div<div>", "</div>"];
	}
	
	jQuery.fn.extend({
		text : function (text) {
			if (jQuery.isFunction(text)) {
				return this.each(function (i) {
					var self = jQuery(this);
					self.text(text.call(this, i, self.text()));
				});
			}
			
			if (typeof text !== "object" && text !== undefined) {
				return this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(text));
			}
			
			return jQuery.text(this);
		},
		
		wrapAll : function (html) {
			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapAll(html.call(this, i));
				});
			}
			
			if (this[0]) {
				// The elements to wrap the target around
				var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
				
				if (this[0].parentNode) {
					wrap.insertBefore(this[0]);
				}
				
				wrap.map(function () {
					var elem = this;
					while (elem.firstChild && elem.firstChild.nodeType === 1) {
						elem = elem.firstChild;
					}
					
					return elem;
				}).append(this);
			}
			
			return this;
		},
		
		wrapInner : function (html) {
			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapInner(html.call(this, i));
				});
			}
			
			return this.each(function () {
				var self = jQuery(this),
				contents = self.contents();
				
				if (contents.length) {
					contents.wrapAll(html);
					
				} else {
					self.append(html);
				}
			});
		},
		
		wrap : function (html) {
			return this.each(function () {
				jQuery(this).wrapAll(html);
			});
		},
		
		unwrap : function () {
			return this.parent().each(function () {
				if (!jQuery.nodeName(this, "body")) {
					jQuery(this).replaceWith(this.childNodes);
				}
			}).end();
		},
		
		append : function () {
			return this.domManip(arguments, true, function (elem) {
				if (this.nodeType === 1) {
					this.appendChild(elem);
				}
			});
		},
		
		prepend : function () {
			return this.domManip(arguments, true, function (elem) {
				if (this.nodeType === 1) {
					this.insertBefore(elem, this.firstChild);
				}
			});
		},
		
		before : function () {
			if (this[0] && this[0].parentNode) {
				return this.domManip(arguments, false, function (elem) {
					this.parentNode.insertBefore(elem, this);
				});
			} else if (arguments.length) {
				var set = jQuery(arguments[0]);
				set.push.apply(set, this.toArray());
				return this.pushStack(set, "before", arguments);
			}
		},
		
		after : function () {
			if (this[0] && this[0].parentNode) {
				return this.domManip(arguments, false, function (elem) {
					this.parentNode.insertBefore(elem, this.nextSibling);
				});
			} else if (arguments.length) {
				var set = this.pushStack(this, "after", arguments);
				set.push.apply(set, jQuery(arguments[0]).toArray());
				return set;
			}
		},
		
		// keepData is for internal use only--do not document
		remove : function (selector, keepData) {
			for (var i = 0, elem; (elem = this[i]) != null; i++) {
				if (!selector || jQuery.filter(selector, [elem]).length) {
					if (!keepData && elem.nodeType === 1) {
						jQuery.cleanData(elem.getElementsByTagName("*"));
						jQuery.cleanData([elem]);
					}
					
					if (elem.parentNode) {
						elem.parentNode.removeChild(elem);
					}
				}
			}
			
			return this;
		},
		
		empty : function () {
			for (var i = 0, elem; (elem = this[i]) != null; i++) {
				// Remove element nodes and prevent memory leaks
				if (elem.nodeType === 1) {
					jQuery.cleanData(elem.getElementsByTagName("*"));
				}
				
				// Remove any remaining nodes
				while (elem.firstChild) {
					elem.removeChild(elem.firstChild);
				}
			}
			
			return this;
		},
		
		clone : function (events) {
			// Do the clone
			var ret = this.map(function () {
					if (!jQuery.support.noCloneEvent && !jQuery.isXMLDoc(this)) {
						// IE copies events bound via attachEvent when
						// using cloneNode. Calling detachEvent on the
						// clone will also remove the events from the orignal
						// In order to get around this, we use innerHTML.
						// Unfortunately, this means some modifications to
						// attributes in IE that are actually only stored
						// as properties will not be copied (such as the
						// the name attribute on an input).
						var html = this.outerHTML,
						ownerDocument = this.ownerDocument;
						if (!html) {
							var div = ownerDocument.createElement("div");
							div.appendChild(this.cloneNode(true));
							html = div.innerHTML;
						}
						
						return jQuery.clean([html.replace(rinlinejQuery, "")
								// Handle the case in IE 8 where action=/test/> self-closes a tag
								.replace(raction, '="$1">')
								.replace(rleadingWhitespace, "")], ownerDocument)[0];
					} else {
						return this.cloneNode(true);
					}
				});
			
			// Copy the events from the original to the clone
			if (events === true) {
				cloneCopyEvent(this, ret);
				cloneCopyEvent(this.find("*"), ret.find("*"));
			}
			
			// Return the cloned set
			return ret;
		},
		
		html : function (value) {
			if (value === undefined) {
				return this[0] && this[0].nodeType === 1 ?
				this[0].innerHTML.replace(rinlinejQuery, "") :
				null;
				
				// See if we can take a shortcut and just use innerHTML
			} else if (typeof value === "string" && !rnocache.test(value) &&
				(jQuery.support.leadingWhitespace || !rleadingWhitespace.test(value)) &&
				!wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
				
				value = value.replace(rxhtmlTag, "<$1></$2>");
				
				try {
					for (var i = 0, l = this.length; i < l; i++) {
						// Remove element nodes and prevent memory leaks
						if (this[i].nodeType === 1) {
							jQuery.cleanData(this[i].getElementsByTagName("*"));
							this[i].innerHTML = value;
						}
					}
					
					// If using innerHTML throws an exception, use the fallback method
				} catch (e) {
					this.empty().append(value);
				}
				
			} else if (jQuery.isFunction(value)) {
				this.each(function (i) {
					var self = jQuery(this);
					self.html(value.call(this, i, self.html()));
				});
				
			} else {
				this.empty().append(value);
			}
			
			return this;
		},
		
		replaceWith : function (value) {
			if (this[0] && this[0].parentNode) {
				// Make sure that the elements are removed from the DOM before they are inserted
				// this can help fix replacing a parent with child elements
				if (jQuery.isFunction(value)) {
					return this.each(function (i) {
						var self = jQuery(this),
						old = self.html();
						self.replaceWith(value.call(this, i, old));
					});
				}
				
				if (typeof value !== "string") {
					value = jQuery(value).detach();
				}
				
				return this.each(function () {
					var next = this.nextSibling,
					parent = this.parentNode;
					
					jQuery(this).remove();
					
					if (next) {
						jQuery(next).before(value);
					} else {
						jQuery(parent).append(value);
					}
				});
			} else {
				return this.pushStack(jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value);
			}
		},
		
		detach : function (selector) {
			return this.remove(selector, true);
		},
		
		domManip : function (args, table, callback) {
			var results,
			first,
			value = args[0],
			scripts = [],
			fragment,
			parent;
			
			// We can't cloneNode fragments that contain checked, in WebKit
			if (!jQuery.support.checkClone && arguments.length === 3 && typeof value === "string" && rchecked.test(value)) {
				return this.each(function () {
					jQuery(this).domManip(args, table, callback, true);
				});
			}
			
			if (jQuery.isFunction(value)) {
				return this.each(function (i) {
					var self = jQuery(this);
					args[0] = value.call(this, i, table ? self.html() : undefined);
					self.domManip(args, table, callback);
				});
			}
			
			if (this[0]) {
				parent = value && value.parentNode;
				
				// If we're in a fragment, just use that instead of building a new one
				if (jQuery.support.parentNode && parent && parent.nodeType === 11 && parent.childNodes.length === this.length) {
					results = {
						fragment : parent
					};
					
				} else {
					results = jQuery.buildFragment(args, this, scripts);
				}
				
				fragment = results.fragment;
				
				if (fragment.childNodes.length === 1) {
					first = fragment = fragment.firstChild;
				} else {
					first = fragment.firstChild;
				}
				
				if (first) {
					table = table && jQuery.nodeName(first, "tr");
					
					for (var i = 0, l = this.length; i < l; i++) {
						callback.call(
							table ?
							root(this[i], first) :
							this[i],
							i > 0 || results.cacheable || this.length > 1 ?
							fragment.cloneNode(true) :
							fragment);
					}
				}
				
				if (scripts.length) {
					jQuery.each(scripts, evalScript);
				}
			}
			
			return this;
		}
	});
	
	function root(elem, cur) {
		return jQuery.nodeName(elem, "table") ?
		(elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild(elem.ownerDocument.createElement("tbody"))) :
		elem;
	}
	
	function cloneCopyEvent(orig, ret) {
		var i = 0;
		
		ret.each(function () {
			if (this.nodeName !== (orig[i] && orig[i].nodeName)) {
				return;
			}
			
			var oldData = jQuery.data(orig[i++]),
			curData = jQuery.data(this, oldData),
			events = oldData && oldData.events;
			
			if (events) {
				delete curData.handle;
				curData.events = {};
				
				for (var type in events) {
					for (var handler in events[type]) {
						jQuery.event.add(this, type, events[type][handler], events[type][handler].data);
					}
				}
			}
		});
	}
	
	jQuery.buildFragment = function (args, nodes, scripts) {
		var fragment,
		cacheable,
		cacheresults,
		doc = (nodes && nodes[0] ? nodes[0].ownerDocument || nodes[0] : document);
		
		// Only cache "small" (1/2 KB) strings that are associated with the main document
		// Cloning options loses the selected state, so don't cache them
		// IE 6 doesn't like it when you put <object> or <embed> elements in a fragment
		// Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache
		if (args.length === 1 && typeof args[0] === "string" && args[0].length < 512 && doc === document &&
			!rnocache.test(args[0]) && (jQuery.support.checkClone || !rchecked.test(args[0]))) {
			
			cacheable = true;
			cacheresults = jQuery.fragments[args[0]];
			if (cacheresults) {
				if (cacheresults !== 1) {
					fragment = cacheresults;
				}
			}
		}
		
		if (!fragment) {
			fragment = doc.createDocumentFragment();
			jQuery.clean(args, doc, fragment, scripts);
		}
		
		if (cacheable) {
			jQuery.fragments[args[0]] = cacheresults ? fragment : 1;
		}
		
		return {
			fragment : fragment,
			cacheable : cacheable
		};
	};
	
	jQuery.fragments = {};
	
	jQuery.each({
		appendTo : "append",
		prependTo : "prepend",
		insertBefore : "before",
		insertAfter : "after",
		replaceAll : "replaceWith"
	}, function (name, original) {
		jQuery.fn[name] = function (selector) {
			var ret = [],
			insert = jQuery(selector),
			parent = this.length === 1 && this[0].parentNode;
			
			if (parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1) {
				insert[original](this[0]);
				return this;
				
			} else {
				for (var i = 0, l = insert.length; i < l; i++) {
					var elems = (i > 0 ? this.clone(true) : this).get();
					jQuery(insert[i])[original](elems);
					ret = ret.concat(elems);
				}
				
				return this.pushStack(ret, name, insert.selector);
			}
		};
	});
	
	jQuery.extend({
		clean : function (elems, context, fragment, scripts) {
			context = context || document;
			
			// !context.createElement fails in IE with an error but returns typeof 'object'
			if (typeof context.createElement === "undefined") {
				context = context.ownerDocument || context[0] && context[0].ownerDocument || document;
			}
			
			var ret = [];
			
			for (var i = 0, elem; (elem = elems[i]) != null; i++) {
				if (typeof elem === "number") {
					elem += "";
				}
				
				if (!elem) {
					continue;
				}
				
				// Convert html string into DOM nodes
				if (typeof elem === "string" && !rhtml.test(elem)) {
					elem = context.createTextNode(elem);
					
				} else if (typeof elem === "string") {
					// Fix "XHTML"-style tags in all browsers
					elem = elem.replace(rxhtmlTag, "<$1></$2>");
					
					// Trim whitespace, otherwise indexOf won't work as expected
					var tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase(),
					wrap = wrapMap[tag] || wrapMap._default,
					depth = wrap[0],
					div = context.createElement("div");
					
					// Go to html and back, then peel off extra wrappers
					div.innerHTML = wrap[1] + elem + wrap[2];
					
					// Move to the right depth
					while (depth--) {
						div = div.lastChild;
					}
					
					// Remove IE's autoinserted <tbody> from table fragments
					if (!jQuery.support.tbody) {
						
						// String was a <table>, *may* have spurious <tbody>
						var hasBody = rtbody.test(elem),
						tbody = tag === "table" && !hasBody ?
							div.firstChild && div.firstChild.childNodes :
							
							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !hasBody ?
							div.childNodes :
							[];
						
						for (var j = tbody.length - 1; j >= 0; --j) {
							if (jQuery.nodeName(tbody[j], "tbody") && !tbody[j].childNodes.length) {
								tbody[j].parentNode.removeChild(tbody[j]);
							}
						}
						
					}
					
					// IE completely kills leading whitespace when innerHTML is used
					if (!jQuery.support.leadingWhitespace && rleadingWhitespace.test(elem)) {
						div.insertBefore(context.createTextNode(rleadingWhitespace.exec(elem)[0]), div.firstChild);
					}
					
					elem = div.childNodes;
				}
				
				if (elem.nodeType) {
					ret.push(elem);
				} else {
					ret = jQuery.merge(ret, elem);
				}
			}
			
			if (fragment) {
				for (i = 0; ret[i]; i++) {
					if (scripts && jQuery.nodeName(ret[i], "script") && (!ret[i].type || ret[i].type.toLowerCase() === "text/javascript")) {
						scripts.push(ret[i].parentNode ? ret[i].parentNode.removeChild(ret[i]) : ret[i]);
						
					} else {
						if (ret[i].nodeType === 1) {
							ret.splice.apply(ret, [i + 1, 0].concat(jQuery.makeArray(ret[i].getElementsByTagName("script"))));
						}
						fragment.appendChild(ret[i]);
					}
				}
			}
			
			return ret;
		},
		
		cleanData : function (elems) {
			var data,
			id,
			cache = jQuery.cache,
			special = jQuery.event.special,
			deleteExpando = jQuery.support.deleteExpando;
			
			for (var i = 0, elem; (elem = elems[i]) != null; i++) {
				if (elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()]) {
					continue;
				}
				
				id = elem[jQuery.expando];
				
				if (id) {
					data = cache[id];
					
					if (data && data.events) {
						for (var type in data.events) {
							if (special[type]) {
								jQuery.event.remove(elem, type);
								
							} else {
								jQuery.removeEvent(elem, type, data.handle);
							}
						}
					}
					
					if (deleteExpando) {
						delete elem[jQuery.expando];
						
					} else if (elem.removeAttribute) {
						elem.removeAttribute(jQuery.expando);
					}
					
					delete cache[id];
				}
			}
		}
	});
	
	function evalScript(i, elem) {
		if (elem.src) {
			jQuery.ajax({
				url : elem.src,
				async : false,
				dataType : "script"
			});
		} else {
			jQuery.globalEval(elem.text || elem.textContent || elem.innerHTML || "");
		}
		
		if (elem.parentNode) {
			elem.parentNode.removeChild(elem);
		}
	}
	
	var ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity=([^)]*)/,
	rdashAlpha = /-([a-z])/ig,
	rupper = /([A-Z])/g,
	rnumpx = /^-?\d+(?:px)?$/i,
	rnum = /^-?\d/,
	
	cssShow = {
		position : "absolute",
		visibility : "hidden",
		display : "block"
	},
	cssWidth = ["Left", "Right"],
	cssHeight = ["Top", "Bottom"],
	curCSS,
	
	// cache check for defaultView.getComputedStyle
	getComputedStyle = document.defaultView && document.defaultView.getComputedStyle,
	
	fcamelCase = function (all, letter) {
		return letter.toUpperCase();
	};
	
	jQuery.fn.css = function (name, value) {
		// Setting 'undefined' is a no-op
		if (arguments.length === 2 && value === undefined) {
			return this;
		}
		
		return jQuery.access(this, name, value, true, function (elem, name, value) {
			return value !== undefined ?
			jQuery.style(elem, name, value) :
			jQuery.css(elem, name);
		});
	};
	
	jQuery.extend({
		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks : {
			opacity : {
				get : function (elem, computed) {
					if (computed) {
						// We should always get a number back from opacity
						var ret = curCSS(elem, "opacity", "opacity");
						return ret === "" ? "1" : ret;
						
					} else {
						return elem.style.opacity;
					}
				}
			}
		},
		
		// Exclude the following css properties to add px
		cssNumber : {
			"zIndex" : true,
			"fontWeight" : true,
			"opacity" : true,
			"zoom" : true,
			"lineHeight" : true
		},
		
		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps : {
			// normalize float css property
			"float" : jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
		},
		
		// Get and set the style property on a DOM Node
		style : function (elem, name, value, extra) {
			// Don't set styles on text and comment nodes
			if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
				return;
			}
			
			// Make sure that we're working with the right name
			var ret,
			origName = jQuery.camelCase(name),
			style = elem.style,
			hooks = jQuery.cssHooks[origName];
			
			name = jQuery.cssProps[origName] || origName;
			
			// Check if we're setting a value
			if (value !== undefined) {
				// Make sure that NaN and null values aren't set. See: #7116
				if (typeof value === "number" && isNaN(value) || value == null) {
					return;
				}
				
				// If a number was passed in, add 'px' to the (except for certain CSS properties)
				if (typeof value === "number" && !jQuery.cssNumber[origName]) {
					value += "px";
				}
				
				// If a hook was provided, use that value, otherwise just set the specified value
				if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value)) !== undefined) {
					// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
					// Fixes bug #5509
					try {
						style[name] = value;
					} catch (e) {}
				}
				
			} else {
				// If a hook was provided get the non-computed value from there
				if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
					return ret;
				}
				
				// Otherwise just get the value from the style object
				return style[name];
			}
		},
		
		css : function (elem, name, extra) {
			// Make sure that we're working with the right name
			var ret,
			origName = jQuery.camelCase(name),
			hooks = jQuery.cssHooks[origName];
			
			name = jQuery.cssProps[origName] || origName;
			
			// If a hook was provided get the computed value from there
			if (hooks && "get" in hooks && (ret = hooks.get(elem, true, extra)) !== undefined) {
				return ret;
				
				// Otherwise, if a way to get the computed value exists, use that
			} else if (curCSS) {
				return curCSS(elem, name, origName);
			}
		},
		
		// A method for quickly swapping in/out CSS properties to get correct calculations
		swap : function (elem, options, callback) {
			var old = {};
			
			// Remember the old values, and insert the new ones
			for (var name in options) {
				old[name] = elem.style[name];
				elem.style[name] = options[name];
			}
			
			callback.call(elem);
			
			// Revert the old values
			for (name in options) {
				elem.style[name] = old[name];
			}
		},
		
		camelCase : function (string) {
			return string.replace(rdashAlpha, fcamelCase);
		}
	});
	
	// DEPRECATED, Use jQuery.css() instead
	jQuery.curCSS = jQuery.css;
	
	jQuery.each(["height", "width"], function (i, name) {
		jQuery.cssHooks[name] = {
			get : function (elem, computed, extra) {
				var val;
				
				if (computed) {
					if (elem.offsetWidth !== 0) {
						val = getWH(elem, name, extra);
						
					} else {
						jQuery.swap(elem, cssShow, function () {
							val = getWH(elem, name, extra);
						});
					}
					
					return val + "px";
				}
			},
			
			set : function (elem, value) {
				if (rnumpx.test(value)) {
					// ignore negative width and height values #1599
					value = parseFloat(value);
					
					if (value >= 0) {
						return value + "px";
					}
					
				} else {
					return value;
				}
			}
		};
	});
	
	if (!jQuery.support.opacity) {
		jQuery.cssHooks.opacity = {
			get : function (elem, computed) {
				// IE uses filters for opacity
				return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ?
				(parseFloat(RegExp.$1) / 100) + "" :
				computed ? "1" : "";
			},
			
			set : function (elem, value) {
				var style = elem.style;
				
				// IE has trouble with opacity if it does not have layout
				// Force it by setting the zoom level
				style.zoom = 1;
				
				// Set the alpha filter to set the opacity
				var opacity = jQuery.isNaN(value) ?
					"" :
					"alpha(opacity=" + value * 100 + ")",
				filter = style.filter || "";
				
				style.filter = ralpha.test(filter) ?
					filter.replace(ralpha, opacity) :
					style.filter + ' ' + opacity;
			}
		};
	}
	
	if (getComputedStyle) {
		curCSS = function (elem, newName, name) {
			var ret,
			defaultView,
			computedStyle;
			
			name = name.replace(rupper, "-$1").toLowerCase();
			
			if (!(defaultView = elem.ownerDocument.defaultView)) {
				return undefined;
			}
			
			if ((computedStyle = defaultView.getComputedStyle(elem, null))) {
				ret = computedStyle.getPropertyValue(name);
				if (ret === "" && !jQuery.contains(elem.ownerDocument.documentElement, elem)) {
					ret = jQuery.style(elem, name);
				}
			}
			
			return ret;
		};
		
	} else if (document.documentElement.currentStyle) {
		curCSS = function (elem, name) {
			var left,
			rsLeft,
			ret = elem.currentStyle && elem.currentStyle[name],
			style = elem.style;
			
			// From the awesome hack by Dean Edwards
			// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
			
			// If we're not dealing with a regular pixel number
			// but a number that has a weird ending, we need to convert it to pixels
			if (!rnumpx.test(ret) && rnum.test(ret)) {
				// Remember the original values
				left = style.left;
				rsLeft = elem.runtimeStyle.left;
				
				// Put in the new values to get a computed value out
				elem.runtimeStyle.left = elem.currentStyle.left;
				style.left = name === "fontSize" ? "1em" : (ret || 0);
				ret = style.pixelLeft + "px";
				
				// Revert the changed values
				style.left = left;
				elem.runtimeStyle.left = rsLeft;
			}
			
			return ret;
		};
	}
	
	function getWH(elem, name, extra) {
		var which = name === "width" ? cssWidth : cssHeight,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight;
		
		if (extra === "border") {
			return val;
		}
		
		jQuery.each(which, function () {
			if (!extra) {
				val -= parseFloat(jQuery.css(elem, "padding" + this)) || 0;
			}
			
			if (extra === "margin") {
				val += parseFloat(jQuery.css(elem, "margin" + this)) || 0;
				
			} else {
				val -= parseFloat(jQuery.css(elem, "border" + this + "Width")) || 0;
			}
		});
		
		return val;
	}
	
	if (jQuery.expr && jQuery.expr.filters) {
		jQuery.expr.filters.hidden = function (elem) {
			var width = elem.offsetWidth,
			height = elem.offsetHeight;
			
			return (width === 0 && height === 0) || (!jQuery.support.reliableHiddenOffsets && (elem.style.display || jQuery.css(elem, "display")) === "none");
		};
		
		jQuery.expr.filters.visible = function (elem) {
			return !jQuery.expr.filters.hidden(elem);
		};
	}
	
	var jsc = jQuery.now(),
	rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
	rselectTextarea = /^(?:select|textarea)/i,
	rinput = /^(?:color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
	rnoContent = /^(?:GET|HEAD|DELETE)$/,
	rbracket = /\[\]$/,
	jsre = /\=\?(&|$)/,
	rquery = /\?/,
	rts = /([?&])_=[^&]*/,
	rurl = /^(\w+:)?\/\/([^\/?#]+)/,
	r20 = /%20/g,
	rhash = /#.*$/,
	
	// Keep a copy of the old load method
	_load = jQuery.fn.load;
	
	jQuery.fn.extend({
		load : function (url, params, callback) {
			if (typeof url !== "string" && _load) {
				return _load.apply(this, arguments);
				
				// Don't do a request if no elements are being requested
			} else if (!this.length) {
				return this;
			}
			
			var off = url.indexOf(" ");
			if (off >= 0) {
				var selector = url.slice(off, url.length);
				url = url.slice(0, off);
			}
			
			// Default to a GET request
			var type = "GET";
			
			// If the second parameter was provided
			if (params) {
				// If it's a function
				if (jQuery.isFunction(params)) {
					// We assume that it's the callback
					callback = params;
					params = null;
					
					// Otherwise, build a param string
				} else if (typeof params === "object") {
					params = jQuery.param(params, jQuery.ajaxSettings.traditional);
					type = "POST";
				}
			}
			
			var self = this;
			
			// Request the remote document
			jQuery.ajax({
				url : url,
				type : type,
				dataType : "html",
				data : params,
				complete : function (res, status) {
					// If successful, inject the HTML into all the matched elements
					if (status === "success" || status === "notmodified") {
						// See if a selector was specified
						self.html(selector ?
							// Create a dummy div to hold the results
							jQuery("<div>")
							// inject the contents of the document in, removing the scripts
							// to avoid any 'Permission Denied' errors in IE
							.append(res.responseText.replace(rscript, ""))
							
							// Locate the specified elements
							.find(selector) :
							
							// If not, just inject the full result
							res.responseText);
					}
					
					if (callback) {
						self.each(callback, [res.responseText, status, res]);
					}
				}
			});
			
			return this;
		},
		
		serialize : function () {
			return jQuery.param(this.serializeArray());
		},
		
		serializeArray : function () {
			return this.map(function () {
				return this.elements ? jQuery.makeArray(this.elements) : this;
			})
			.filter(function () {
				return this.name && !this.disabled &&
				(this.checked || rselectTextarea.test(this.nodeName) ||
					rinput.test(this.type));
			})
			.map(function (i, elem) {
				var val = jQuery(this).val();
				
				return val == null ?
				null :
				jQuery.isArray(val) ?
				jQuery.map(val, function (val, i) {
					return {
						name : elem.name,
						value : val
					};
				}) : {
					name : elem.name,
					value : val
				};
			}).get();
		}
	});
	
	// Attach a bunch of functions for handling common AJAX events
	jQuery.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function (i, o) {
		jQuery.fn[o] = function (f) {
			return this.bind(o, f);
		};
	});
	
	jQuery.extend({
		get : function (url, data, callback, type) {
			// shift arguments if data argument was omited
			if (jQuery.isFunction(data)) {
				type = type || callback;
				callback = data;
				data = null;
			}
			
			return jQuery.ajax({
				type : "GET",
				url : url,
				data : data,
				success : callback,
				dataType : type
			});
		},
		
		getScript : function (url, callback) {
			return jQuery.get(url, null, callback, "script");
		},
		
		getJSON : function (url, data, callback) {
			return jQuery.get(url, data, callback, "json");
		},
		
		post : function (url, data, callback, type) {
			// shift arguments if data argument was omited
			if (jQuery.isFunction(data)) {
				type = type || callback;
				callback = data;
				data = {};
			}
			
			return jQuery.ajax({
				type : "POST",
				url : url,
				data : data,
				success : callback,
				dataType : type
			});
		},
		
		ajaxSetup : function (settings) {
			jQuery.extend(jQuery.ajaxSettings, settings);
		},
		
		ajaxSettings : {
			url : location.href,
			global : true,
			type : "GET",
			contentType : "application/x-www-form-urlencoded",
			processData : true,
			async : true,
			/*
			timeout: 0,
			data: null,
			username: null,
			password: null,
			traditional: false,
			 */
			// This function can be overriden by calling jQuery.ajaxSetup
			xhr : function () {
				return new window.XMLHttpRequest();
			},
			accepts : {
				xml : "application/xml, text/xml",
				html : "text/html",
				script : "text/javascript, application/javascript",
				json : "application/json, text/javascript",
				text : "text/plain",
				_default : "*/*"
			}
		},
		
		ajax : function (origSettings) {
			var s = jQuery.extend(true, {}, jQuery.ajaxSettings, origSettings),
			jsonp,
			status,
			data,
			type = s.type.toUpperCase(),
			noContent = rnoContent.test(type);
			
			s.url = s.url.replace(rhash, "");
			
			// Use original (not extended) context object if it was provided
			s.context = origSettings && origSettings.context != null ? origSettings.context : s;
			
			// convert data if not already a string
			if (s.data && s.processData && typeof s.data !== "string") {
				s.data = jQuery.param(s.data, s.traditional);
			}
			
			// Handle JSONP Parameter Callbacks
			if (s.dataType === "jsonp") {
				if (type === "GET") {
					if (!jsre.test(s.url)) {
						s.url += (rquery.test(s.url) ? "&" : "?") + (s.jsonp || "callback") + "=?";
					}
				} else if (!s.data || !jsre.test(s.data)) {
					s.data = (s.data ? s.data + "&" : "") + (s.jsonp || "callback") + "=?";
				}
				s.dataType = "json";
			}
			
			// Build temporary JSONP function
			if (s.dataType === "json" && (s.data && jsre.test(s.data) || jsre.test(s.url))) {
				jsonp = s.jsonpCallback || ("jsonp" + jsc++);
				
				// Replace the =? sequence both in the query string and the data
				if (s.data) {
					s.data = (s.data + "").replace(jsre, "=" + jsonp + "$1");
				}
				
				s.url = s.url.replace(jsre, "=" + jsonp + "$1");
				
				// We need to make sure
				// that a JSONP style response is executed properly
				s.dataType = "script";
				
				// Handle JSONP-style loading
				var customJsonp = window[jsonp];
				
				window[jsonp] = function (tmp) {
					data = tmp;
					jQuery.handleSuccess(s, xhr, status, data);
					jQuery.handleComplete(s, xhr, status, data);
					
					if (jQuery.isFunction(customJsonp)) {
						customJsonp(tmp);
						
					} else {
						// Garbage collect
						window[jsonp] = undefined;
						
						try {
							delete window[jsonp];
						} catch (jsonpError) {}
					}
					
					if (head) {
						head.removeChild(script);
					}
				};
			}
			
			if (s.dataType === "script" && s.cache === null) {
				s.cache = false;
			}
			
			if (s.cache === false && type === "GET") {
				var ts = jQuery.now();
				
				// try replacing _= if it is there
				var ret = s.url.replace(rts, "$1_=" + ts);
				
				// if nothing was replaced, add timestamp to the end
				s.url = ret + ((ret === s.url) ? (rquery.test(s.url) ? "&" : "?") + "_=" + ts : "");
			}
			
			// If data is available, append data to url for get requests
			if (s.data && type === "GET") {
				s.url += (rquery.test(s.url) ? "&" : "?") + s.data;
			}
			
			// Watch for a new set of requests
			if (s.global && jQuery.active++ === 0) {
				jQuery.event.trigger("ajaxStart");
			}
			
			// Matches an absolute URL, and saves the domain
			var parts = rurl.exec(s.url),
			remote = parts && (parts[1] && parts[1] !== location.protocol || parts[2] !== location.host);
			
			// If we're requesting a remote document
			// and trying to load JSON or Script with a GET
			if (s.dataType === "script" && type === "GET" && remote) {
				var head = document.getElementsByTagName("head")[0] || document.documentElement;
				var script = document.createElement("script");
				if (s.scriptCharset) {
					script.charset = s.scriptCharset;
				}
				script.src = s.url;
				
				// Handle Script loading
				if (!jsonp) {
					var done = false;
					
					// Attach handlers for all browsers
					script.onload = script.onreadystatechange = function () {
						if (!done && (!this.readyState ||
								this.readyState === "loaded" || this.readyState === "complete")) {
							done = true;
							jQuery.handleSuccess(s, xhr, status, data);
							jQuery.handleComplete(s, xhr, status, data);
							
							// Handle memory leak in IE
							script.onload = script.onreadystatechange = null;
							if (head && script.parentNode) {
								head.removeChild(script);
							}
						}
					};
				}
				
				// Use insertBefore instead of appendChild  to circumvent an IE6 bug.
				// This arises when a base node is used (#2709 and #4378).
				head.insertBefore(script, head.firstChild);
				
				// We handle everything using the script element injection
				return undefined;
			}
			
			var requestDone = false;
			
			// Create the request object
			var xhr = s.xhr();
			
			if (!xhr) {
				return;
			}
			
			// Open the socket
			// Passing null username, generates a login popup on Opera (#2865)
			if (s.username) {
				xhr.open(type, s.url, s.async, s.username, s.password);
			} else {
				xhr.open(type, s.url, s.async);
			}
			
			// Need an extra try/catch for cross domain requests in Firefox 3
			try {
				// Set content-type if data specified and content-body is valid for this type
				if ((s.data != null && !noContent) || (origSettings && origSettings.contentType)) {
					xhr.setRequestHeader("Content-Type", s.contentType);
				}
				
				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if (s.ifModified) {
					if (jQuery.lastModified[s.url]) {
						xhr.setRequestHeader("If-Modified-Since", jQuery.lastModified[s.url]);
					}
					
					if (jQuery.etag[s.url]) {
						xhr.setRequestHeader("If-None-Match", jQuery.etag[s.url]);
					}
				}
				
				// Set header so the called script knows that it's an XMLHttpRequest
				// Only send the header if it's not a remote XHR
				if (!remote) {
					xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
				}
				
				// Set the Accepts header for the server, depending on the dataType
				xhr.setRequestHeader("Accept", s.dataType && s.accepts[s.dataType] ?
					s.accepts[s.dataType] + ", */*; q=0.01" :
					s.accepts._default);
			} catch (headerError) {}
			
			// Allow custom headers/mimetypes and early abort
			if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) {
				// Handle the global AJAX counter
				if (s.global && jQuery.active-- === 1) {
					jQuery.event.trigger("ajaxStop");
				}
				
				// close opended socket
				xhr.abort();
				return false;
			}
			
			if (s.global) {
				jQuery.triggerGlobal(s, "ajaxSend", [xhr, s]);
			}
			
			// Wait for a response to come back
			var onreadystatechange = xhr.onreadystatechange = function (isTimeout) {
				// The request was aborted
				if (!xhr || xhr.readyState === 0 || isTimeout === "abort") {
					// Opera doesn't call onreadystatechange before this point
					// so we simulate the call
					if (!requestDone) {
						jQuery.handleComplete(s, xhr, status, data);
					}
					
					requestDone = true;
					if (xhr) {
						xhr.onreadystatechange = jQuery.noop;
					}
					
					// The transfer is complete and the data is available, or the request timed out
				} else if (!requestDone && xhr && (xhr.readyState === 4 || isTimeout === "timeout")) {
					requestDone = true;
					xhr.onreadystatechange = jQuery.noop;
					
					status = isTimeout === "timeout" ?
						"timeout" :
						!jQuery.httpSuccess(xhr) ?
						"error" :
						s.ifModified && jQuery.httpNotModified(xhr, s.url) ?
						"notmodified" :
						"success";
					
					var errMsg;
					
					if (status === "success") {
						// Watch for, and catch, XML document parse errors
						try {
							// process the data (runs the xml through httpData regardless of callback)
							data = jQuery.httpData(xhr, s.dataType, s);
						} catch (parserError) {
							status = "parsererror";
							errMsg = parserError;
						}
					}
					
					// Make sure that the request was successful or notmodified
					if (status === "success" || status === "notmodified") {
						// JSONP handles its own success callback
						if (!jsonp) {
							jQuery.handleSuccess(s, xhr, status, data);
						}
					} else {
						jQuery.handleError(s, xhr, status, errMsg);
					}
					
					// Fire the complete handlers
					if (!jsonp) {
						jQuery.handleComplete(s, xhr, status, data);
					}
					
					if (isTimeout === "timeout") {
						xhr.abort();
					}
					
					// Stop memory leaks
					if (s.async) {
						xhr = null;
					}
				}
			};
			
			// Override the abort handler, if we can (IE 6 doesn't allow it, but that's OK)
			// Opera doesn't fire onreadystatechange at all on abort
			try {
				var oldAbort = xhr.abort;
				xhr.abort = function () {
					// xhr.abort in IE7 is not a native JS function
					// and does not have a call property
					if (xhr && oldAbort.call) {
						oldAbort.call(xhr);
					}
					
					onreadystatechange("abort");
				};
			} catch (abortError) {}
			
			// Timeout checker
			if (s.async && s.timeout > 0) {
				setTimeout(function () {
					// Check to see if the request is still happening
					if (xhr && !requestDone) {
						onreadystatechange("timeout");
					}
				}, s.timeout);
			}
			
			// Send the data
			try {
				xhr.send(noContent || s.data == null ? null : s.data);
				
			} catch (sendError) {
				jQuery.handleError(s, xhr, null, sendError);
				
				// Fire the complete handlers
				jQuery.handleComplete(s, xhr, status, data);
			}
			
			// firefox 1.5 doesn't fire statechange for sync requests
			if (!s.async) {
				onreadystatechange();
			}
			
			// return XMLHttpRequest to allow aborting the request etc.
			return xhr;
		},
		
		// Serialize an array of form elements or a set of
		// key/values into a query string
		param : function (a, traditional) {
			var s = [],
			add = function (key, value) {
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction(value) ? value() : value;
				s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
			};
			
			// Set traditional to true for jQuery <= 1.3.2 behavior.
			if (traditional === undefined) {
				traditional = jQuery.ajaxSettings.traditional;
			}
			
			// If an array was passed in, assume that it is an array of form elements.
			if (jQuery.isArray(a) || a.jquery) {
				// Serialize the form elements
				jQuery.each(a, function () {
					add(this.name, this.value);
				});
				
			} else {
				// If traditional, encode the "old" way (the way 1.3.2 or older
				// did it), otherwise encode params recursively.
				for (var prefix in a) {
					buildParams(prefix, a[prefix], traditional, add);
				}
			}
			
			// Return the resulting serialization
			return s.join("&").replace(r20, "+");
		}
	});
	
	function buildParams(prefix, obj, traditional, add) {
		if (jQuery.isArray(obj) && obj.length) {
			// Serialize array item.
			jQuery.each(obj, function (i, v) {
				if (traditional || rbracket.test(prefix)) {
					// Treat each array item as a scalar.
					add(prefix, v);
					
				} else {
					// If array item is non-scalar (array or object), encode its
					// numeric index to resolve deserialization ambiguity issues.
					// Note that rack (as of 1.0.0) can't currently deserialize
					// nested arrays properly, and attempting to do so may cause
					// a server error. Possible fixes are to modify rack's
					// deserialization algorithm or to provide an option or flag
					// to force array serialization to be shallow.
					buildParams(prefix + "[" + (typeof v === "object" || jQuery.isArray(v) ? i : "") + "]", v, traditional, add);
				}
			});
			
		} else if (!traditional && obj != null && typeof obj === "object") {
			if (jQuery.isEmptyObject(obj)) {
				add(prefix, "");
				
				// Serialize object item.
			} else {
				jQuery.each(obj, function (k, v) {
					buildParams(prefix + "[" + k + "]", v, traditional, add);
				});
			}
			
		} else {
			// Serialize scalar item.
			add(prefix, obj);
		}
	}
	
	// This is still on the jQuery object... for now
	// Want to move this to jQuery.ajax some day
	jQuery.extend({
		
		// Counter for holding the number of active queries
		active : 0,
		
		// Last-Modified header cache for next request
		lastModified : {},
		etag : {},
		
		handleError : function (s, xhr, status, e) {
			// If a local callback was specified, fire it
			if (s.error) {
				s.error.call(s.context, xhr, status, e);
			}
			
			// Fire the global callback
			if (s.global) {
				jQuery.triggerGlobal(s, "ajaxError", [xhr, s, e]);
			}
		},
		
		handleSuccess : function (s, xhr, status, data) {
			// If a local callback was specified, fire it and pass it the data
			if (s.success) {
				s.success.call(s.context, data, status, xhr);
			}
			
			// Fire the global callback
			if (s.global) {
				jQuery.triggerGlobal(s, "ajaxSuccess", [xhr, s]);
			}
		},
		
		handleComplete : function (s, xhr, status) {
			// Process result
			if (s.complete) {
				s.complete.call(s.context, xhr, status);
			}
			
			// The request was completed
			if (s.global) {
				jQuery.triggerGlobal(s, "ajaxComplete", [xhr, s]);
			}
			
			// Handle the global AJAX counter
			if (s.global && jQuery.active-- === 1) {
				jQuery.event.trigger("ajaxStop");
			}
		},
		
		triggerGlobal : function (s, type, args) {
			(s.context && s.context.url == null ? jQuery(s.context) : jQuery.event).trigger(type, args);
		},
		
		// Determines if an XMLHttpRequest was successful or not
		httpSuccess : function (xhr) {
			try {
				// IE error sometimes returns 1223 when it should be 204 so treat it as success, see #1450
				return !xhr.status && location.protocol === "file:" ||
				xhr.status >= 200 && xhr.status < 300 ||
				xhr.status === 304 || xhr.status === 1223;
			} catch (e) {}
			
			return false;
		},
		
		// Determines if an XMLHttpRequest returns NotModified
		httpNotModified : function (xhr, url) {
			var lastModified = xhr.getResponseHeader("Last-Modified"),
			etag = xhr.getResponseHeader("Etag");
			
			if (lastModified) {
				jQuery.lastModified[url] = lastModified;
			}
			
			if (etag) {
				jQuery.etag[url] = etag;
			}
			
			return xhr.status === 304;
		},
		
		httpData : function (xhr, type, s) {
			var ct = xhr.getResponseHeader("content-type") || "",
			xml = type === "xml" || !type && ct.indexOf("xml") >= 0,
			data = xml ? xhr.responseXML : xhr.responseText;
			
			if (xml && data.documentElement.nodeName === "parsererror") {
				jQuery.error("parsererror");
			}
			
			// Allow a pre-filtering function to sanitize the response
			// s is checked to keep backwards compatibility
			if (s && s.dataFilter) {
				data = s.dataFilter(data, type);
			}
			
			// The filter can actually parse the response
			if (typeof data === "string") {
				// Get the JavaScript object, if JSON is used.
				if (type === "json" || !type && ct.indexOf("json") >= 0) {
					data = jQuery.parseJSON(data);
					
					// If the type is "script", eval it in global context
				} else if (type === "script" || !type && ct.indexOf("javascript") >= 0) {
					jQuery.globalEval(data);
				}
			}
			
			return data;
		}
		
	});
	
	/*
	 * Create the request object; Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	if (window.ActiveXObject) {
		jQuery.ajaxSettings.xhr = function () {
			if (window.location.protocol !== "file:") {
				try {
					return new window.XMLHttpRequest();
				} catch (xhrError) {}
			}
			
			try {
				return new window.ActiveXObject("Microsoft.XMLHTTP");
			} catch (activeError) {}
		};
	}
	
	// Does this browser support XHR requests?
	jQuery.support.ajax = !!jQuery.ajaxSettings.xhr();
	
	var elemdisplay = {},
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = /^([+\-]=)?([\d+.\-]+)(.*)$/,
	timerId,
	fxAttrs = [
		// height animations
		["height", "marginTop", "marginBottom", "paddingTop", "paddingBottom"],
		// width animations
		["width", "marginLeft", "marginRight", "paddingLeft", "paddingRight"],
		// opacity animations
		["opacity"]
	];
	
	jQuery.fn.extend({
		show : function (speed, easing, callback) {
			if (speed || speed === 0) {
				return this.animate(genFx("show", 3), speed, easing, callback);
			} else {
				for (var i = 0, j = this.length; i < j; i++) {
					// Reset the inline display of this element to learn if it is
					// being hidden by cascaded rules or not
					if (!jQuery.data(this[i], "olddisplay") && this[i].style.display === "none") {
						this[i].style.display = "";
					}
					
					// Set elements which have been overridden with display: none
					// in a stylesheet to whatever the default browser style is
					// for such an element
					if (this[i].style.display === "" && jQuery.css(this[i], "display") === "none") {
						jQuery.data(this[i], "olddisplay", defaultDisplay(this[i].nodeName));
					}
				}
				
				// Set the display of most of the elements in a second loop
				// to avoid the constant reflow
				for (i = 0; i < j; i++) {
					this[i].style.display = jQuery.data(this[i], "olddisplay") || "";
				}
				
				return this;
			}
		},
		
		hide : function (speed, easing, callback) {
			if (speed || speed === 0) {
				return this.animate(genFx("hide", 3), speed, easing, callback);
				
			} else {
				for (var i = 0, j = this.length; i < j; i++) {
					var display = jQuery.css(this[i], "display");
					
					if (display !== "none") {
						jQuery.data(this[i], "olddisplay", display);
					}
				}
				
				// Set the display of the elements in a second loop
				// to avoid the constant reflow
				for (i = 0; i < j; i++) {
					this[i].style.display = "none";
				}
				
				return this;
			}
		},
		
		// Save the old toggle function
		_toggle : jQuery.fn.toggle,
		
		toggle : function (fn, fn2, callback) {
			var bool = typeof fn === "boolean";
			
			if (jQuery.isFunction(fn) && jQuery.isFunction(fn2)) {
				this._toggle.apply(this, arguments);
				
			} else if (fn == null || bool) {
				this.each(function () {
					var state = bool ? fn : jQuery(this).is(":hidden");
					jQuery(this)[state ? "show" : "hide"]();
				});
				
			} else {
				this.animate(genFx("toggle", 3), fn, fn2, callback);
			}
			
			return this;
		},
		
		fadeTo : function (speed, to, easing, callback) {
			return this.filter(":hidden").css("opacity", 0).show().end()
			.animate({
				opacity : to
			}, speed, easing, callback);
		},
		
		animate : function (prop, speed, easing, callback) {
			var optall = jQuery.speed(speed, easing, callback);
			
			if (jQuery.isEmptyObject(prop)) {
				return this.each(optall.complete);
			}
			
			return this[optall.queue === false ? "each" : "queue"](function () {
				// XXX ‘this’ does not always have a nodeName when running the
				// test suite
				
				var opt = jQuery.extend({}, optall),
				p,
				isElement = this.nodeType === 1,
				hidden = isElement && jQuery(this).is(":hidden"),
				self = this;
				
				for (p in prop) {
					var name = jQuery.camelCase(p);
					
					if (p !== name) {
						prop[name] = prop[p];
						delete prop[p];
						p = name;
					}
					
					if (prop[p] === "hide" && hidden || prop[p] === "show" && !hidden) {
						return opt.complete.call(this);
					}
					
					if (isElement && (p === "height" || p === "width")) {
						// Make sure that nothing sneaks out
						// Record all 3 overflow attributes because IE does not
						// change the overflow attribute when overflowX and
						// overflowY are set to the same value
						opt.overflow = [this.style.overflow, this.style.overflowX, this.style.overflowY];
						
						// Set display property to inline-block for height/width
						// animations on inline elements that are having width/height
						// animated
						if (jQuery.css(this, "display") === "inline" &&
							jQuery.css(this, "float") === "none") {
							if (!jQuery.support.inlineBlockNeedsLayout) {
								this.style.display = "inline-block";
								
							} else {
								var display = defaultDisplay(this.nodeName);
								
								// inline-level elements accept inline-block;
								// block-level elements need to be inline with layout
								if (display === "inline") {
									this.style.display = "inline-block";
									
								} else {
									this.style.display = "inline";
									this.style.zoom = 1;
								}
							}
						}
					}
					
					if (jQuery.isArray(prop[p])) {
						// Create (if needed) and add to specialEasing
						(opt.specialEasing = opt.specialEasing || {})[p] = prop[p][1];
						prop[p] = prop[p][0];
					}
				}
				
				if (opt.overflow != null) {
					this.style.overflow = "hidden";
				}
				
				opt.curAnim = jQuery.extend({}, prop);
				
				jQuery.each(prop, function (name, val) {
					var e = new jQuery.fx(self, opt, name);
					
					if (rfxtypes.test(val)) {
						e[val === "toggle" ? hidden ? "show" : "hide" : val](prop);
						
					} else {
						var parts = rfxnum.exec(val),
						start = e.cur(true) || 0;
						
						if (parts) {
							var end = parseFloat(parts[2]),
							unit = parts[3] || "px";
							
							// We need to compute starting value
							if (unit !== "px") {
								jQuery.style(self, name, (end || 1) + unit);
								start = ((end || 1) / e.cur(true)) * start;
								jQuery.style(self, name, start + unit);
							}
							
							// If a +=/-= token was provided, we're doing a relative animation
							if (parts[1]) {
								end = ((parts[1] === "-=" ? -1 : 1) * end) + start;
							}
							
							e.custom(start, end, unit);
							
						} else {
							e.custom(start, val, "");
						}
					}
				});
				
				// For JS strict compliance
				return true;
			});
		},
		
		stop : function (clearQueue, gotoEnd) {
			var timers = jQuery.timers;
			
			if (clearQueue) {
				this.queue([]);
			}
			
			this.each(function () {
				// go in reverse order so anything added to the queue during the loop is ignored
				for (var i = timers.length - 1; i >= 0; i--) {
					if (timers[i].elem === this) {
						if (gotoEnd) {
							// force the next step to be the last
							timers[i](true);
						}
						
						timers.splice(i, 1);
					}
				}
			});
			
			// start the next in the queue if the last step wasn't forced
			if (!gotoEnd) {
				this.dequeue();
			}
			
			return this;
		}
		
	});
	
	function genFx(type, num) {
		var obj = {};
		
		jQuery.each(fxAttrs.concat.apply([], fxAttrs.slice(0, num)), function () {
			obj[this] = type;
		});
		
		return obj;
	}
	
	// Generate shortcuts for custom animations
	jQuery.each({
		slideDown : genFx("show", 1),
		slideUp : genFx("hide", 1),
		slideToggle : genFx("toggle", 1),
		fadeIn : {
			opacity : "show"
		},
		fadeOut : {
			opacity : "hide"
		}
	}, function (name, props) {
		jQuery.fn[name] = function (speed, easing, callback) {
			return this.animate(props, speed, easing, callback);
		};
	});
	
	jQuery.extend({
		speed : function (speed, easing, fn) {
			var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
				complete : fn || !fn && easing ||
				jQuery.isFunction(speed) && speed,
				duration : speed,
				easing : fn && easing || easing && !jQuery.isFunction(easing) && easing
			};
			
			opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
				opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
			
			// Queueing
			opt.old = opt.complete;
			opt.complete = function () {
				if (opt.queue !== false) {
					jQuery(this).dequeue();
				}
				if (jQuery.isFunction(opt.old)) {
					opt.old.call(this);
				}
			};
			
			return opt;
		},
		
		easing : {
			linear : function (p, n, firstNum, diff) {
				return firstNum + diff * p;
			},
			swing : function (p, n, firstNum, diff) {
				return ((-Math.cos(p * Math.PI) / 2) + 0.5) * diff + firstNum;
			}
		},
		
		timers : [],
		
		fx : function (elem, options, prop) {
			this.options = options;
			this.elem = elem;
			this.prop = prop;
			
			if (!options.orig) {
				options.orig = {};
			}
		}
		
	});
	
	jQuery.fx.prototype = {
		// Simple function for setting a style value
		update : function () {
			if (this.options.step) {
				this.options.step.call(this.elem, this.now, this);
			}
			
			(jQuery.fx.step[this.prop] || jQuery.fx.step._default)(this);
		},
		
		// Get the current size
		cur : function () {
			if (this.elem[this.prop] != null && (!this.elem.style || this.elem.style[this.prop] == null)) {
				return this.elem[this.prop];
			}
			
			var r = parseFloat(jQuery.css(this.elem, this.prop));
			return r && r > -10000 ? r : 0;
		},
		
		// Start an animation from one number to another
		custom : function (from, to, unit) {
			this.startTime = jQuery.now();
			this.start = from;
			this.end = to;
			this.unit = unit || this.unit || "px";
			this.now = this.start;
			this.pos = this.state = 0;
			
			var self = this,
			fx = jQuery.fx;
			function t(gotoEnd) {
				return self.step(gotoEnd);
			}
			
			t.elem = this.elem;
			
			if (t() && jQuery.timers.push(t) && !timerId) {
				timerId = setInterval(fx.tick, fx.interval);
			}
		},
		
		// Simple 'show' function
		show : function () {
			// Remember where we started, so that we can go back to it later
			this.options.orig[this.prop] = jQuery.style(this.elem, this.prop);
			this.options.show = true;
			
			// Begin the animation
			// Make sure that we start at a small width/height to avoid any
			// flash of content
			this.custom(this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur());
			
			// Start by showing the element
			jQuery(this.elem).show();
		},
		
		// Simple 'hide' function
		hide : function () {
			// Remember where we started, so that we can go back to it later
			this.options.orig[this.prop] = jQuery.style(this.elem, this.prop);
			this.options.hide = true;
			
			// Begin the animation
			this.custom(this.cur(), 0);
		},
		
		// Each step of an animation
		step : function (gotoEnd) {
			var t = jQuery.now(),
			done = true;
			
			if (gotoEnd || t >= this.options.duration + this.startTime) {
				this.now = this.end;
				this.pos = this.state = 1;
				this.update();
				
				this.options.curAnim[this.prop] = true;
				
				for (var i in this.options.curAnim) {
					if (this.options.curAnim[i] !== true) {
						done = false;
					}
				}
				
				if (done) {
					// Reset the overflow
					if (this.options.overflow != null && !jQuery.support.shrinkWrapBlocks) {
						var elem = this.elem,
						options = this.options;
						jQuery.each(["", "X", "Y"], function (index, value) {
							elem.style["overflow" + value] = options.overflow[index];
						});
					}
					
					// Hide the element if the "hide" operation was done
					if (this.options.hide) {
						jQuery(this.elem).hide();
					}
					
					// Reset the properties, if the item has been hidden or shown
					if (this.options.hide || this.options.show) {
						for (var p in this.options.curAnim) {
							jQuery.style(this.elem, p, this.options.orig[p]);
						}
					}
					
					// Execute the complete function
					this.options.complete.call(this.elem);
				}
				
				return false;
				
			} else {
				var n = t - this.startTime;
				this.state = n / this.options.duration;
				
				// Perform the easing function, defaults to swing
				var specialEasing = this.options.specialEasing && this.options.specialEasing[this.prop];
				var defaultEasing = this.options.easing || (jQuery.easing.swing ? "swing" : "linear");
				this.pos = jQuery.easing[specialEasing || defaultEasing](this.state, n, 0, 1, this.options.duration);
				this.now = this.start + ((this.end - this.start) * this.pos);
				
				// Perform the next step of the animation
				this.update();
			}
			
			return true;
		}
	};
	
	jQuery.extend(jQuery.fx, {
		tick : function () {
			var timers = jQuery.timers;
			
			for (var i = 0; i < timers.length; i++) {
				if (!timers[i]()) {
					timers.splice(i--, 1);
				}
			}
			
			if (!timers.length) {
				jQuery.fx.stop();
			}
		},
		
		interval : 13,
		
		stop : function () {
			clearInterval(timerId);
			timerId = null;
		},
		
		speeds : {
			slow : 600,
			fast : 200,
			// Default speed
			_default : 400
		},
		
		step : {
			opacity : function (fx) {
				jQuery.style(fx.elem, "opacity", fx.now);
			},
			
			_default : function (fx) {
				if (fx.elem.style && fx.elem.style[fx.prop] != null) {
					fx.elem.style[fx.prop] = (fx.prop === "width" || fx.prop === "height" ? Math.max(0, fx.now) : fx.now) + fx.unit;
				} else {
					fx.elem[fx.prop] = fx.now;
				}
			}
		}
	});
	
	if (jQuery.expr && jQuery.expr.filters) {
		jQuery.expr.filters.animated = function (elem) {
			return jQuery.grep(jQuery.timers, function (fn) {
				return elem === fn.elem;
			}).length;
		};
	}
	
	function defaultDisplay(nodeName) {
		if (!elemdisplay[nodeName]) {
			var elem = jQuery("<" + nodeName + ">").appendTo("body"),
			display = elem.css("display");
			
			elem.remove();
			
			if (display === "none" || display === "") {
				display = "block";
			}
			
			elemdisplay[nodeName] = display;
		}
		
		return elemdisplay[nodeName];
	}
	
	var rtable = /^t(?:able|d|h)$/i,
	rroot = /^(?:body|html)$/i;
	
	if ("getBoundingClientRect" in document.documentElement) {
		jQuery.fn.offset = function (options) {
			var elem = this[0],
			box;
			
			if (options) {
				return this.each(function (i) {
					jQuery.offset.setOffset(this, options, i);
				});
			}
			
			if (!elem || !elem.ownerDocument) {
				return null;
			}
			
			if (elem === elem.ownerDocument.body) {
				return jQuery.offset.bodyOffset(elem);
			}
			
			try {
				box = elem.getBoundingClientRect();
			} catch (e) {}
			
			var doc = elem.ownerDocument,
			docElem = doc.documentElement;
			
			// Make sure we're not dealing with a disconnected DOM node
			if (!box || !jQuery.contains(docElem, elem)) {
				return box || {
					top : 0,
					left : 0
				};
			}
			
			var body = doc.body,
			win = getWindow(doc),
			clientTop = docElem.clientTop || body.clientTop || 0,
			clientLeft = docElem.clientLeft || body.clientLeft || 0,
			scrollTop = (win.pageYOffset || jQuery.support.boxModel && docElem.scrollTop || body.scrollTop),
			scrollLeft = (win.pageXOffset || jQuery.support.boxModel && docElem.scrollLeft || body.scrollLeft),
			top = box.top + scrollTop - clientTop,
			left = box.left + scrollLeft - clientLeft;
			
			return {
				top : top,
				left : left
			};
		};
		
	} else {
		jQuery.fn.offset = function (options) {
			var elem = this[0];
			
			if (options) {
				return this.each(function (i) {
					jQuery.offset.setOffset(this, options, i);
				});
			}
			
			if (!elem || !elem.ownerDocument) {
				return null;
			}
			
			if (elem === elem.ownerDocument.body) {
				return jQuery.offset.bodyOffset(elem);
			}
			
			jQuery.offset.initialize();
			
			var offsetParent = elem.offsetParent,
			prevOffsetParent = elem,
			doc = elem.ownerDocument,
			computedStyle,
			docElem = doc.documentElement,
			body = doc.body,
			defaultView = doc.defaultView,
			prevComputedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle,
			top = elem.offsetTop,
			left = elem.offsetLeft;
			while ((elem = elem.parentNode) && elem !== body && elem !== docElem) {
				if (jQuery.offset.supportsFixedPosition && prevComputedStyle.position === "fixed") {
					break;
				}
				
				computedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle;
				top -= elem.scrollTop;
				left -= elem.scrollLeft;
				
				if (elem === offsetParent) {
					top += elem.offsetTop;
					left += elem.offsetLeft;
					
					if (jQuery.offset.doesNotAddBorder && !(jQuery.offset.doesAddBorderForTableAndCells && rtable.test(elem.nodeName))) {
						top += parseFloat(computedStyle.borderTopWidth) || 0;
						left += parseFloat(computedStyle.borderLeftWidth) || 0;
					}
					
					prevOffsetParent = offsetParent;
					offsetParent = elem.offsetParent;
				}
				
				if (jQuery.offset.subtractsBorderForOverflowNotVisible && computedStyle.overflow !== "visible") {
					top += parseFloat(computedStyle.borderTopWidth) || 0;
					left += parseFloat(computedStyle.borderLeftWidth) || 0;
				}
				
				prevComputedStyle = computedStyle;
			}
			
			if (prevComputedStyle.position === "relative" || prevComputedStyle.position === "static") {
				top += body.offsetTop;
				left += body.offsetLeft;
			}
			
			if (jQuery.offset.supportsFixedPosition && prevComputedStyle.position === "fixed") {
				top += Math.max(docElem.scrollTop, body.scrollTop);
				left += Math.max(docElem.scrollLeft, body.scrollLeft);
			}
			
			return {
				top : top,
				left : left
			};
		};
	}
	
	jQuery.offset = {
		initialize : function () {
			var body = document.body,
			container = document.createElement("div"),
			innerDiv,
			checkDiv,
			table,
			td,
			bodyMarginTop = parseFloat(jQuery.css(body, "marginTop")) || 0,
			html = "<div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'><div></div></div><table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>";
			
			jQuery.extend(container.style, {
				position : "absolute",
				top : 0,
				left : 0,
				margin : 0,
				border : 0,
				width : "1px",
				height : "1px",
				visibility : "hidden"
			});
			
			container.innerHTML = html;
			body.insertBefore(container, body.firstChild);
			innerDiv = container.firstChild;
			checkDiv = innerDiv.firstChild;
			td = innerDiv.nextSibling.firstChild.firstChild;
			
			this.doesNotAddBorder = (checkDiv.offsetTop !== 5);
			this.doesAddBorderForTableAndCells = (td.offsetTop === 5);
			
			checkDiv.style.position = "fixed";
			checkDiv.style.top = "20px";
			
			// safari subtracts parent border width here which is 5px
			this.supportsFixedPosition = (checkDiv.offsetTop === 20 || checkDiv.offsetTop === 15);
			checkDiv.style.position = checkDiv.style.top = "";
			
			innerDiv.style.overflow = "hidden";
			innerDiv.style.position = "relative";
			
			this.subtractsBorderForOverflowNotVisible = (checkDiv.offsetTop === -5);
			
			this.doesNotIncludeMarginInBodyOffset = (body.offsetTop !== bodyMarginTop);
			
			body.removeChild(container);
			body = container = innerDiv = checkDiv = table = td = null;
			jQuery.offset.initialize = jQuery.noop;
		},
		
		bodyOffset : function (body) {
			var top = body.offsetTop,
			left = body.offsetLeft;
			
			jQuery.offset.initialize();
			
			if (jQuery.offset.doesNotIncludeMarginInBodyOffset) {
				top += parseFloat(jQuery.css(body, "marginTop")) || 0;
				left += parseFloat(jQuery.css(body, "marginLeft")) || 0;
			}
			
			return {
				top : top,
				left : left
			};
		},
		
		setOffset : function (elem, options, i) {
			var position = jQuery.css(elem, "position");
			
			// set position first, in-case top/left are set even on static elem
			if (position === "static") {
				elem.style.position = "relative";
			}
			
			var curElem = jQuery(elem),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css(elem, "top"),
			curCSSLeft = jQuery.css(elem, "left"),
			calculatePosition = (position === "absolute" && jQuery.inArray('auto', [curCSSTop, curCSSLeft]) > -1),
			props = {},
			curPosition = {},
			curTop,
			curLeft;
			
			// need to be able to calculate position if either top or left is auto and position is absolute
			if (calculatePosition) {
				curPosition = curElem.position();
			}
			
			curTop = calculatePosition ? curPosition.top : parseInt(curCSSTop, 10) || 0;
			curLeft = calculatePosition ? curPosition.left : parseInt(curCSSLeft, 10) || 0;
			
			if (jQuery.isFunction(options)) {
				options = options.call(elem, i, curOffset);
			}
			
			if (options.top != null) {
				props.top = (options.top - curOffset.top) + curTop;
			}
			if (options.left != null) {
				props.left = (options.left - curOffset.left) + curLeft;
			}
			
			if ("using" in options) {
				options.using.call(elem, props);
			} else {
				curElem.css(props);
			}
		}
	};
	
	jQuery.fn.extend({
		position : function () {
			if (!this[0]) {
				return null;
			}
			
			var elem = this[0],
			
			// Get *real* offsetParent
			offsetParent = this.offsetParent(),
			
			// Get correct offsets
			offset = this.offset(),
			parentOffset = rroot.test(offsetParent[0].nodeName) ? {
				top : 0,
				left : 0
			}
			 : offsetParent.offset();
			
			// Subtract element margins
			// note: when an element has margin: auto the offsetLeft and marginLeft
			// are the same in Safari causing offset.left to incorrectly be 0
			offset.top -= parseFloat(jQuery.css(elem, "marginTop")) || 0;
			offset.left -= parseFloat(jQuery.css(elem, "marginLeft")) || 0;
			
			// Add offsetParent borders
			parentOffset.top += parseFloat(jQuery.css(offsetParent[0], "borderTopWidth")) || 0;
			parentOffset.left += parseFloat(jQuery.css(offsetParent[0], "borderLeftWidth")) || 0;
			
			// Subtract the two offsets
			return {
				top : offset.top - parentOffset.top,
				left : offset.left - parentOffset.left
			};
		},
		
		offsetParent : function () {
			return this.map(function () {
				var offsetParent = this.offsetParent || document.body;
				while (offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static")) {
					offsetParent = offsetParent.offsetParent;
				}
				return offsetParent;
			});
		}
	});
	
	// Create scrollLeft and scrollTop methods
	jQuery.each(["Left", "Top"], function (i, name) {
		var method = "scroll" + name;
		
		jQuery.fn[method] = function (val) {
			var elem = this[0],
			win;
			
			if (!elem) {
				return null;
			}
			
			if (val !== undefined) {
				// Set the scroll offset
				return this.each(function () {
					win = getWindow(this);
					
					if (win) {
						win.scrollTo(
							!i ? val : jQuery(win).scrollLeft(),
							i ? val : jQuery(win).scrollTop());
						
					} else {
						this[method] = val;
					}
				});
			} else {
				win = getWindow(elem);
				
				// Return the scroll offset
				return win ? ("pageXOffset" in win) ? win[i ? "pageYOffset" : "pageXOffset"] :
				jQuery.support.boxModel && win.document.documentElement[method] ||
				win.document.body[method] :
				elem[method];
			}
		};
	});
	
	function getWindow(elem) {
		return jQuery.isWindow(elem) ?
		elem :
		elem.nodeType === 9 ?
		elem.defaultView || elem.parentWindow :
		false;
	}
	
	// Create innerHeight, innerWidth, outerHeight and outerWidth methods
	jQuery.each(["Height", "Width"], function (i, name) {
		
		var type = name.toLowerCase();
		
		// innerHeight and innerWidth
		jQuery.fn["inner" + name] = function () {
			return this[0] ?
			parseFloat(jQuery.css(this[0], type, "padding")) :
			null;
		};
		
		// outerHeight and outerWidth
		jQuery.fn["outer" + name] = function (margin) {
			return this[0] ?
			parseFloat(jQuery.css(this[0], type, margin ? "margin" : "border")) :
			null;
		};
		
		jQuery.fn[type] = function (size) {
			// Get window width or height
			var elem = this[0];
			if (!elem) {
				return size == null ? null : this;
			}
			
			if (jQuery.isFunction(size)) {
				return this.each(function (i) {
					var self = jQuery(this);
					self[type](size.call(this, i, self[type]()));
				});
			}
			
			return jQuery.isWindow(elem) ?
			// Everyone else use document.documentElement or document.body depending on Quirks vs Standards mode
			elem.document.compatMode === "CSS1Compat" && elem.document.documentElement["client" + name] ||
			elem.document.body["client" + name] :
			
			// Get document width or height
			(elem.nodeType === 9) ? // is it a document
			// Either scroll[Width/Height] or offset[Width/Height], whichever is greater
			Math.max(
				elem.documentElement["client" + name],
				elem.body["scroll" + name], elem.documentElement["scroll" + name],
				elem.body["offset" + name], elem.documentElement["offset" + name]) :
			
			// Get or set width or height on the element
			size === undefined ?
			// Get width or height on the element
			parseFloat(jQuery.css(elem, type)) :
			
			// Set the width or height on the element (default to pixels if value is unitless)
			this.css(type, typeof size === "string" ? size : size + "px");
		};
		
	});
	
})(window);
define("jQuery/jquery", function () {});

/** @license
 * jQuery UI 1.7
 *
 * Copyright (c) 2009 AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT (MIT-LICENSE.txt)
 * and GPL (GPL-LICENSE.txt) licenses.
 *
 * http://docs.jquery.com/UI
 */
jQuery.ui || (function (c) {
	var i = c.fn.remove,
	d = c.browser.mozilla && (parseFloat(c.browser.version) < 1.9);
	c.ui = {
		version : "1.7",
		plugin : {
			add : function (k, l, n) {
				var m = c.ui[k].prototype;
				for (var j in n) {
					m.plugins[j] = m.plugins[j] || [];
					m.plugins[j].push([l, n[j]])
				}
			},
			call : function (j, l, k) {
				var n = j.plugins[l];
				if (!n || !j.element[0].parentNode) {
					return
				}
				for (var m = 0; m < n.length; m++) {
					if (j.options[n[m][0]]) {
						n[m][1].apply(j.element, k)
					}
				}
			}
		},
		contains : function (k, j) {
			return document.compareDocumentPosition ? k.compareDocumentPosition(j) & 16 : k !== j && k.contains(j)
		},
		hasScroll : function (m, k) {
			if (c(m).css("overflow") == "hidden") {
				return false
			}
			var j = (k && k == "left") ? "scrollLeft" : "scrollTop",
			l = false;
			if (m[j] > 0) {
				return true
			}
			m[j] = 1;
			l = (m[j] > 0);
			m[j] = 0;
			return l
		},
		isOverAxis : function (k, j, l) {
			return (k > j) && (k < (j + l))
		},
		isOver : function (o, k, n, m, j, l) {
			return c.ui.isOverAxis(o, n, j) && c.ui.isOverAxis(k, m, l)
		},
		keyCode : {
			BACKSPACE : 8,
			CAPS_LOCK : 20,
			COMMA : 188,
			CONTROL : 17,
			DELETE : 46,
			DOWN : 40,
			END : 35,
			ENTER : 13,
			ESCAPE : 27,
			HOME : 36,
			INSERT : 45,
			LEFT : 37,
			NUMPAD_ADD : 107,
			NUMPAD_DECIMAL : 110,
			NUMPAD_DIVIDE : 111,
			NUMPAD_ENTER : 108,
			NUMPAD_MULTIPLY : 106,
			NUMPAD_SUBTRACT : 109,
			PAGE_DOWN : 34,
			PAGE_UP : 33,
			PERIOD : 190,
			RIGHT : 39,
			SHIFT : 16,
			SPACE : 32,
			TAB : 9,
			UP : 38
		}
	};
	if (d) {
		var f = c.attr,
		e = c.fn.removeAttr,
		h = "http://www.w3.org/2005/07/aaa",
		a = /^aria-/,
		b = /^wairole:/;
		c.attr = function (k, j, l) {
			var m = l !== undefined;
			return (j == "role" ? (m ? f.call(this, k, j, "wairole:" + l) : (f.apply(this, arguments) || "").replace(b, "")) : (a.test(j) ? (m ? k.setAttributeNS(h, j.replace(a, "aaa:"), l) : f.call(this, k, j.replace(a, "aaa:"))) : f.apply(this, arguments)))
		};
		c.fn.removeAttr = function (j) {
			return (a.test(j) ? this.each(function () {
					this.removeAttributeNS(h, j.replace(a, ""))
				}) : e.call(this, j))
		}
	}
	c.fn.extend({
		remove : function () {
			c("*", this).add(this).each(function () {
				c(this).triggerHandler("remove")
			});
			return i.apply(this, arguments)
		},
		enableSelection : function () {
			return this.attr("unselectable", "off")
						.css({
							'MozUserSelect':'',
							'-moz-user-select':'', 
							'-webkit-user-select':'', 
							'user-select':'', 
							'-ms-user-select':'' 
						})
						.unbind("selectstart.ui")
		},
		disableSelection : function () {
			return this.attr('unselectable', 'on') 
						.css({
							'MozUserSelect':'none',
							'-moz-user-select':'none', 
							'-webkit-user-select':'none', 
							'user-select':'none', 
							'-ms-user-select':'none' 
						})
						.bind("selectstart.ui", function () {
							return false
						});
		},
		scrollParent : function () {
			var j;
			if ((c.browser.msie && (/(static|relative)/).test(this.css("position"))) || (/absolute/).test(this.css("position"))) {
				j = this.parents().filter(function () {
						return (/(relative|absolute|fixed)/).test(c.curCSS(this, "position", 1)) && (/(auto|scroll)/).test(c.curCSS(this, "overflow", 1) + c.curCSS(this, "overflow-y", 1) + c.curCSS(this, "overflow-x", 1))
					}).eq(0)
			} else {
				j = this.parents().filter(function () {
						return (/(auto|scroll)/).test(c.curCSS(this, "overflow", 1) + c.curCSS(this, "overflow-y", 1) + c.curCSS(this, "overflow-x", 1))
					}).eq(0)
			}
			return (/fixed/).test(this.css("position")) || !j.length ? c(document) : j
		}
	});
	c.extend(c.expr[":"], {
		data : function (l, k, j) {
			return !!c.data(l, j[3])
		},
		focusable : function (k) {
			var l = k.nodeName.toLowerCase(),
			j = c.attr(k, "tabindex");
			return (/input|select|textarea|button|object/.test(l) ? !k.disabled : "a" == l || "area" == l ? k.href || !isNaN(j) : !isNaN(j)) && !c(k)["area" == l ? "parents" : "closest"](":hidden").length
		},
		tabbable : function (k) {
			var j = c.attr(k, "tabindex");
			return (isNaN(j) || j >= 0) && c(k).is(":focusable")
		}
	});
	function g(m, n, o, l) {
		function k(q) {
			var p = c[m][n][q] || [];
			return (typeof p == "string" ? p.split(/,?\s+/) : p)
		}
		var j = k("getter");
		if (l.length == 1 && typeof l[0] == "string") {
			j = j.concat(k("getterSetter"))
		}
		return (c.inArray(o, j) != -1)
	}
	c.widget = function (k, j) {
		var l = k.split(".")[0];
		k = k.split(".")[1];
		c.fn[k] = function (p) {
			var n = (typeof p == "string"),
			o = Array.prototype.slice.call(arguments, 1);
			if (n && p.substring(0, 1) == "_") {
				return this
			}
			if (n && g(l, k, p, o)) {
				var m = c.data(this[0], k);
				return (m ? m[p].apply(m, o) : undefined)
			}
			return this.each(function () {
				var q = c.data(this, k);
				(!q && !n && c.data(this, k, new c[l][k](this, p))._init());
				(q && n && c.isFunction(q[p]) && q[p].apply(q, o))
			})
		};
		c[l] = c[l] || {};
		c[l][k] = function (o, n) {
			var m = this;
			this.namespace = l;
			this.widgetName = k;
			this.widgetEventPrefix = c[l][k].eventPrefix || k;
			this.widgetBaseClass = l + "-" + k;
			this.options = c.extend({}, c.widget.defaults, c[l][k].defaults, c.metadata && c.metadata.get(o)[k], n);
			this.element = c(o).bind("setData." + k, function (q, p, r) {
					if (q.target == o) {
						return m._setData(p, r)
					}
				}).bind("getData." + k, function (q, p) {
					if (q.target == o) {
						return m._getData(p)
					}
				}).bind("remove", function () {
					return m.destroy()
				})
		};
		c[l][k].prototype = c.extend({}, c.widget.prototype, j);
		c[l][k].getterSetter = "option"
	};
	c.widget.prototype = {
		_init : function () {},
		destroy : function () {
			this.element.removeData(this.widgetName).removeClass(this.widgetBaseClass + "-disabled " + this.namespace + "-state-disabled").removeAttr("aria-disabled")
		},
		option : function (l, m) {
			var k = l,
			j = this;
			if (typeof l == "string") {
				if (m === undefined) {
					return this._getData(l)
				}
				k = {};
				k[l] = m
			}
			c.each(k, function (n, o) {
				j._setData(n, o)
			})
		},
		_getData : function (j) {
			return this.options[j]
		},
		_setData : function (j, k) {
			this.options[j] = k;
			if (j == "disabled") {
				this.element[k ? "addClass" : "removeClass"](this.widgetBaseClass + "-disabled " + this.namespace + "-state-disabled").attr("aria-disabled", k)
			}
		},
		enable : function () {
			this._setData("disabled", false)
		},
		disable : function () {
			this._setData("disabled", true)
		},
		_trigger : function (l, m, n) {
			var p = this.options[l],
			j = (l == this.widgetEventPrefix ? l : this.widgetEventPrefix + l);
			m = c.Event(m);
			m.type = j;
			if (m.originalEvent) {
				for (var k = c.event.props.length, o; k; ) {
					o = c.event.props[--k];
					m[o] = m.originalEvent[o]
				}
			}
			this.element.trigger(m, n);
			return !(c.isFunction(p) && p.call(this.element[0], m, n) === false || m.isDefaultPrevented())
		}
	};
	c.widget.defaults = {
		disabled : false
	};
	c.ui.mouse = {
		_mouseInit : function () {
			var j = this;
			this.element.bind("mousedown." + this.widgetName, function (k) {
				return j._mouseDown(k)
			}).bind("click." + this.widgetName, function (k) {
				if (j._preventClickEvent) {
					j._preventClickEvent = false;
					k.stopImmediatePropagation();
					return false
				}
			});
			if (c.browser.msie) {
				this._mouseUnselectable = this.element.attr("unselectable");
				this.element.attr("unselectable", "on")
			}
			this.started = false
		},
		_mouseDestroy : function () {
			this.element.unbind("." + this.widgetName);
			(c.browser.msie && this.element.attr("unselectable", this._mouseUnselectable))
		},
		_mouseDown : function (l) {
			l.originalEvent = l.originalEvent || {};
			if (l.originalEvent.mouseHandled) {
				return
			}
			(this._mouseStarted && this._mouseUp(l));
			this._mouseDownEvent = l;
			var k = this,
			m = (l.which == 1),
			j = (typeof this.options.cancel == "string" ? c(l.target).parents().add(l.target).filter(this.options.cancel).length : false);
			if (!m || j || !this._mouseCapture(l)) {
				return true
			}
			this.mouseDelayMet = !this.options.delay;
			if (!this.mouseDelayMet) {
				this._mouseDelayTimer = setTimeout(function () {
						k.mouseDelayMet = true
					}, this.options.delay)
			}
			if (this._mouseDistanceMet(l) && this._mouseDelayMet(l)) {
				this._mouseStarted = (this._mouseStart(l) !== false);
				if (!this._mouseStarted) {
					l.preventDefault();
					return true
				}
			}
			this._mouseMoveDelegate = function (n) {
				return k._mouseMove(n)
			};
			this._mouseUpDelegate = function (n) {
				return k._mouseUp(n)
			};
			c(document).bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName, this._mouseUpDelegate);
			(c.browser.safari || l.preventDefault());
			l.originalEvent.mouseHandled = true;
			return true
		},
		_mouseMove : function (j) {
			if (c.browser.msie && !j.button) {
				return this._mouseUp(j)
			}
			if (this._mouseStarted) {
				this._mouseDrag(j);
				return j.preventDefault()
			}
			if (this._mouseDistanceMet(j) && this._mouseDelayMet(j)) {
				this._mouseStarted = (this._mouseStart(this._mouseDownEvent, j) !== false);
				(this._mouseStarted ? this._mouseDrag(j) : this._mouseUp(j))
			}
			return !this._mouseStarted
		},
		_mouseUp : function (j) {
			c(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
			if (this._mouseStarted) {
				this._mouseStarted = false;
				this._preventClickEvent = (j.target == this._mouseDownEvent.target);
				this._mouseStop(j)
			}
			return false
		},
		_mouseDistanceMet : function (j) {
			return (Math.max(Math.abs(this._mouseDownEvent.pageX - j.pageX), Math.abs(this._mouseDownEvent.pageY - j.pageY)) >= this.options.distance)
		},
		_mouseDelayMet : function (j) {
			return this.mouseDelayMet
		},
		_mouseStart : function (j) {},
		_mouseDrag : function (j) {},
		_mouseStop : function (j) {},
		_mouseCapture : function (j) {
			return true
		}
	};
	c.ui.mouse.defaults = {
		cancel : null,
		distance : 1,
		delay : 0
	}
})(jQuery);
(function (a) {
	a.widget("ui.draggable", a.extend({}, a.ui.mouse, {
			_init : function () {
				if (this.options.helper == "original" && !(/^(?:r|a|f)/).test(this.element.css("position"))) {
					this.element[0].style.position = "relative"
				}
				(this.options.addClasses && this.element.addClass("ui-draggable"));
				(this.options.disabled && this.element.addClass("ui-draggable-disabled"));
				this._mouseInit()
			},
			destroy : function () {
				if (!this.element.data("draggable")) {
					return
				}
				this.element.removeData("draggable").unbind(".draggable").removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled");
				this._mouseDestroy()
			},
			_mouseCapture : function (b) {
				var c = this.options;
				if (this.helper || c.disabled || a(b.target).is(".ui-resizable-handle")) {
					return false
				}
				this.handle = this._getHandle(b);
				if (!this.handle) {
					return false
				}
				return true
			},
			_mouseStart : function (b) {
				var c = this.options;
				this.helper = this._createHelper(b);
				this._cacheHelperProportions();
				if (a.ui.ddmanager) {
					a.ui.ddmanager.current = this
				}
				this._cacheMargins();
				this.cssPosition = this.helper.css("position");
				this.scrollParent = this.helper.scrollParent();
				this.offset = this.element.offset();
				this.offset = {
					top : this.offset.top - this.margins.top,
					left : this.offset.left - this.margins.left
				};
				a.extend(this.offset, {
					click : {
						left : b.pageX - this.offset.left,
						top : b.pageY - this.offset.top
					},
					parent : this._getParentOffset(),
					relative : this._getRelativeOffset()
				});
				this.originalPosition = this._generatePosition(b);
				this.originalPageX = b.pageX;
				this.originalPageY = b.pageY;
				if (c.cursorAt) {
					this._adjustOffsetFromHelper(c.cursorAt)
				}
				if (c.containment) {
					this._setContainment()
				}
				this._trigger("start", b);
				this._cacheHelperProportions();
				if (a.ui.ddmanager && !c.dropBehaviour) {
					a.ui.ddmanager.prepareOffsets(this, b)
				}
				this.helper.addClass("ui-draggable-dragging");
				this._mouseDrag(b, true);
				return true
			},
			_mouseDrag : function (b, d) {
				this.position = this._generatePosition(b);
				this.positionAbs = this._convertPositionTo("absolute");
				if (!d) {
					var c = this._uiHash();
					this._trigger("drag", b, c);
					this.position = c.position
				}
				if (!this.options.axis || this.options.axis != "y") {
					this.helper[0].style.left = this.position.left + "px"
				}
				if (!this.options.axis || this.options.axis != "x") {
					this.helper[0].style.top = this.position.top + "px"
				}
				if (a.ui.ddmanager) {
					a.ui.ddmanager.drag(this, b)
				}
				return false
			},
			_mouseStop : function (c) {
				var d = false;
				if (a.ui.ddmanager && !this.options.dropBehaviour) {
					d = a.ui.ddmanager.drop(this, c)
				}
				if (this.dropped) {
					d = this.dropped;
					this.dropped = false
				}
				if ((this.options.revert == "invalid" && !d) || (this.options.revert == "valid" && d) || this.options.revert === true || (a.isFunction(this.options.revert) && this.options.revert.call(this.element, d))) {
					var b = this;
					a(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () {
						b._trigger("stop", c);
						b._clear()
					})
				} else {
					this._trigger("stop", c);
					this._clear()
				}
				return false
			},
			_getHandle : function (b) {
				var c = !this.options.handle || !a(this.options.handle, this.element).length ? true : false;
				a(this.options.handle, this.element).find("*").andSelf().each(function () {
					if (this == b.target) {
						c = true
					}
				});
				return c
			},
			_createHelper : function (c) {
				var d = this.options;
				var b = a.isFunction(d.helper) ? a(d.helper.apply(this.element[0], [c])) : (d.helper == "clone" ? this.element.clone() : this.element);
				if (!b.parents("body").length) {
					b.appendTo((d.appendTo == "parent" ? this.element[0].parentNode : d.appendTo))
				}
				if (b[0] != this.element[0] && !(/(fixed|absolute)/).test(b.css("position"))) {
					b.css("position", "absolute")
				}
				return b
			},
			_adjustOffsetFromHelper : function (b) {
				if (b.left != undefined) {
					this.offset.click.left = b.left + this.margins.left
				}
				if (b.right != undefined) {
					this.offset.click.left = this.helperProportions.width - b.right + this.margins.left
				}
				if (b.top != undefined) {
					this.offset.click.top = b.top + this.margins.top
				}
				if (b.bottom != undefined) {
					this.offset.click.top = this.helperProportions.height - b.bottom + this.margins.top
				}
			},
			_getParentOffset : function () {
				this.offsetParent = this.helper.offsetParent();
				var b = this.offsetParent.offset();
				if (this.cssPosition == "absolute" && this.scrollParent[0] != document && a.ui.contains(this.scrollParent[0], this.offsetParent[0])) {
					b.left += this.scrollParent.scrollLeft();
					b.top += this.scrollParent.scrollTop()
				}
				if ((this.offsetParent[0] == document.body) || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == "html" && a.browser.msie)) {
					b = {
						top : 0,
						left : 0
					}
				}
				return {
					top : b.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
					left : b.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
				}
			},
			_getRelativeOffset : function () {
				if (this.cssPosition == "relative") {
					var b = this.element.position();
					return {
						top : b.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
						left : b.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
					}
				} else {
					return {
						top : 0,
						left : 0
					}
				}
			},
			_cacheMargins : function () {
				this.margins = {
					left : (parseInt(this.element.css("marginLeft"), 10) || 0),
					top : (parseInt(this.element.css("marginTop"), 10) || 0)
				}
			},
			_cacheHelperProportions : function () {
				this.helperProportions = {
					width : this.helper.outerWidth(),
					height : this.helper.outerHeight()
				}
			},
			_setContainment : function () {
				var e = this.options;
				if (e.containment == "parent") {
					e.containment = this.helper[0].parentNode
				}
				if (e.containment == "document" || e.containment == "window") {
					this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, a(e.containment == "document" ? document : window).width() - this.helperProportions.width - this.margins.left, (a(e.containment == "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]
				}
				if (!(/^(document|window|parent)$/).test(e.containment) && e.containment.constructor != Array) {
					var c = a(e.containment)[0];
					if (!c) {
						return
					}
					var d = a(e.containment).offset();
					var b = (a(c).css("overflow") != "hidden");
					this.containment = [d.left + (parseInt(a(c).css("borderLeftWidth"), 10) || 0) + (parseInt(a(c).css("paddingLeft"), 10) || 0) - this.margins.left, d.top + (parseInt(a(c).css("borderTopWidth"), 10) || 0) + (parseInt(a(c).css("paddingTop"), 10) || 0) - this.margins.top, d.left + (b ? Math.max(c.scrollWidth, c.offsetWidth) : c.offsetWidth) - (parseInt(a(c).css("borderLeftWidth"), 10) || 0) - (parseInt(a(c).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, d.top + (b ? Math.max(c.scrollHeight, c.offsetHeight) : c.offsetHeight) - (parseInt(a(c).css("borderTopWidth"), 10) || 0) - (parseInt(a(c).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top]
				} else {
					if (e.containment.constructor == Array) {
						this.containment = e.containment
					}
				}
			},
			_convertPositionTo : function (f, h) {
				if (!h) {
					h = this.position
				}
				var c = f == "absolute" ? 1 : -1;
				var e = this.options,
				b = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && a.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
				g = (/(html|body)/i).test(b[0].tagName);
				return {
					top : (h.top + this.offset.relative.top * c + this.offset.parent.top * c - (a.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : (g ? 0 : b.scrollTop())) * c)),
					left : (h.left + this.offset.relative.left * c + this.offset.parent.left * c - (a.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : g ? 0 : b.scrollLeft()) * c))
				}
			},
			_generatePosition : function (e) {
				var h = this.options,
				b = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && a.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
				i = (/(html|body)/i).test(b[0].tagName);
				if (this.cssPosition == "relative" && !(this.scrollParent[0] != document && this.scrollParent[0] != this.offsetParent[0])) {
					this.offset.relative = this._getRelativeOffset()
				}
				var d = e.pageX;
				var c = e.pageY;
				if (this.originalPosition) {
					if (this.containment) {
						if (e.pageX - this.offset.click.left < this.containment[0]) {
							d = this.containment[0] + this.offset.click.left
						}
						if (e.pageY - this.offset.click.top < this.containment[1]) {
							c = this.containment[1] + this.offset.click.top
						}
						if (e.pageX - this.offset.click.left > this.containment[2]) {
							d = this.containment[2] + this.offset.click.left
						}
						if (e.pageY - this.offset.click.top > this.containment[3]) {
							c = this.containment[3] + this.offset.click.top
						}
					}
					if (h.grid) {
						var g = this.originalPageY + Math.round((c - this.originalPageY) / h.grid[1]) * h.grid[1];
						c = this.containment ? (!(g - this.offset.click.top < this.containment[1] || g - this.offset.click.top > this.containment[3]) ? g : (!(g - this.offset.click.top < this.containment[1]) ? g - h.grid[1] : g + h.grid[1])) : g;
						var f = this.originalPageX + Math.round((d - this.originalPageX) / h.grid[0]) * h.grid[0];
						d = this.containment ? (!(f - this.offset.click.left < this.containment[0] || f - this.offset.click.left > this.containment[2]) ? f : (!(f - this.offset.click.left < this.containment[0]) ? f - h.grid[0] : f + h.grid[0])) : f
					}
				}
				return {
					top : (c - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + (a.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : (i ? 0 : b.scrollTop())))),
					left : (d - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + (a.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : i ? 0 : b.scrollLeft())))
				}
			},
			_clear : function () {
				this.helper.removeClass("ui-draggable-dragging");
				if (this.helper[0] != this.element[0] && !this.cancelHelperRemoval) {
					this.helper.remove()
				}
				this.helper = null;
				this.cancelHelperRemoval = false
			},
			_trigger : function (b, c, d) {
				d = d || this._uiHash();
				a.ui.plugin.call(this, b, [c, d]);
				if (b == "drag") {
					this.positionAbs = this._convertPositionTo("absolute")
				}
				return a.widget.prototype._trigger.call(this, b, c, d)
			},
			plugins : {},
			_uiHash : function (b) {
				return {
					helper : this.helper,
					position : this.position,
					absolutePosition : this.positionAbs,
					offset : this.positionAbs
				}
			}
		}));
	a.extend(a.ui.draggable, {
		version : "1.7",
		eventPrefix : "drag",
		defaults : {
			addClasses : true,
			appendTo : "parent",
			axis : false,
			cancel : ":input,option",
			connectToSortable : false,
			containment : false,
			cursor : "auto",
			cursorAt : false,
			delay : 0,
			distance : 1,
			grid : false,
			handle : false,
			helper : "original",
			iframeFix : false,
			opacity : false,
			refreshPositions : false,
			revert : false,
			revertDuration : 500,
			scope : "default",
			scroll : true,
			scrollSensitivity : 20,
			scrollSpeed : 20,
			snap : false,
			snapMode : "both",
			snapTolerance : 20,
			stack : false,
			zIndex : false
		}
	});
	a.ui.plugin.add("draggable", "connectToSortable", {
		start : function (c, e) {
			var d = a(this).data("draggable"),
			f = d.options,
			b = a.extend({}, e, {
					item : d.element
				});
			d.sortables = [];
			a(f.connectToSortable).each(function () {
				var g = a.data(this, "sortable");
				if (g && !g.options.disabled) {
					d.sortables.push({
						instance : g,
						shouldRevert : g.options.revert
					});
					g._refreshItems();
					g._trigger("activate", c, b)
				}
			})
		},
		stop : function (c, e) {
			var d = a(this).data("draggable"),
			b = a.extend({}, e, {
					item : d.element
				});
			a.each(d.sortables, function () {
				if (this.instance.isOver) {
					this.instance.isOver = 0;
					d.cancelHelperRemoval = true;
					this.instance.cancelHelperRemoval = false;
					if (this.shouldRevert) {
						this.instance.options.revert = true
					}
					this.instance._mouseStop(c);
					this.instance.options.helper = this.instance.options._helper;
					if (d.options.helper == "original") {
						this.instance.currentItem.css({
							top : "auto",
							left : "auto"
						})
					}
				} else {
					this.instance.cancelHelperRemoval = false;
					this.instance._trigger("deactivate", c, b)
				}
			})
		},
		drag : function (c, f) {
			var e = a(this).data("draggable"),
			b = this;
			var d = function (i) {
				var n = this.offset.click.top,
				m = this.offset.click.left;
				var g = this.positionAbs.top,
				k = this.positionAbs.left;
				var j = i.height,
				l = i.width;
				var p = i.top,
				h = i.left;
				return a.ui.isOver(g + n, k + m, p, h, j, l)
			};
			a.each(e.sortables, function (g) {
				this.instance.positionAbs = e.positionAbs;
				this.instance.helperProportions = e.helperProportions;
				this.instance.offset.click = e.offset.click;
				if (this.instance._intersectsWith(this.instance.containerCache)) {
					if (!this.instance.isOver) {
						this.instance.isOver = 1;
						this.instance.currentItem = a(b).clone().appendTo(this.instance.element).data("sortable-item", true);
						this.instance.options._helper = this.instance.options.helper;
						this.instance.options.helper = function () {
							return f.helper[0]
						};
						c.target = this.instance.currentItem[0];
						this.instance._mouseCapture(c, true);
						this.instance._mouseStart(c, true, true);
						this.instance.offset.click.top = e.offset.click.top;
						this.instance.offset.click.left = e.offset.click.left;
						this.instance.offset.parent.left -= e.offset.parent.left - this.instance.offset.parent.left;
						this.instance.offset.parent.top -= e.offset.parent.top - this.instance.offset.parent.top;
						e._trigger("toSortable", c);
						e.dropped = this.instance.element;
						e.currentItem = e.element;
						this.instance.fromOutside = e
					}
					if (this.instance.currentItem) {
						this.instance._mouseDrag(c)
					}
				} else {
					if (this.instance.isOver) {
						this.instance.isOver = 0;
						this.instance.cancelHelperRemoval = true;
						this.instance.options.revert = false;
						this.instance._trigger("out", c, this.instance._uiHash(this.instance));
						this.instance._mouseStop(c, true);
						this.instance.options.helper = this.instance.options._helper;
						this.instance.currentItem.remove();
						if (this.instance.placeholder) {
							this.instance.placeholder.remove()
						}
						e._trigger("fromSortable", c);
						e.dropped = false
					}
				}
			})
		}
	});
	a.ui.plugin.add("draggable", "cursor", {
		start : function (c, d) {
			var b = a("body"),
			e = a(this).data("draggable").options;
			if (b.css("cursor")) {
				e._cursor = b.css("cursor")
			}
			b.css("cursor", e.cursor)
		},
		stop : function (b, c) {
			var d = a(this).data("draggable").options;
			if (d._cursor) {
				a("body").css("cursor", d._cursor)
			}
		}
	});
	a.ui.plugin.add("draggable", "iframeFix", {
		start : function (b, c) {
			var d = a(this).data("draggable").options;
			a(d.iframeFix === true ? "iframe" : d.iframeFix).each(function () {
				a('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>').css({
					width : this.offsetWidth + "px",
					height : this.offsetHeight + "px",
					position : "absolute",
					opacity : "0.001",
					zIndex : 1000
				}).css(a(this).offset()).appendTo("body")
			})
		},
		stop : function (b, c) {
			a("div.ui-draggable-iframeFix").each(function () {
				this.parentNode.removeChild(this)
			})
		}
	});
	a.ui.plugin.add("draggable", "opacity", {
		start : function (c, d) {
			var b = a(d.helper),
			e = a(this).data("draggable").options;
			if (b.css("opacity")) {
				e._opacity = b.css("opacity")
			}
			b.css("opacity", e.opacity)
		},
		stop : function (b, c) {
			var d = a(this).data("draggable").options;
			if (d._opacity) {
				a(c.helper).css("opacity", d._opacity)
			}
		}
	});
	a.ui.plugin.add("draggable", "scroll", {
		start : function (c, d) {
			var b = a(this).data("draggable");
			if (b.scrollParent[0] != document && b.scrollParent[0].tagName != "HTML") {
				b.overflowOffset = b.scrollParent.offset()
			}
		},
		drag : function (d, e) {
			var c = a(this).data("draggable"),
			f = c.options,
			b = false;
			if (c.scrollParent[0] != document && c.scrollParent[0].tagName != "HTML") {
				if (!f.axis || f.axis != "x") {
					if ((c.overflowOffset.top + c.scrollParent[0].offsetHeight) - d.pageY < f.scrollSensitivity) {
						c.scrollParent[0].scrollTop = b = c.scrollParent[0].scrollTop + f.scrollSpeed
					} else {
						if (d.pageY - c.overflowOffset.top < f.scrollSensitivity) {
							c.scrollParent[0].scrollTop = b = c.scrollParent[0].scrollTop - f.scrollSpeed
						}
					}
				}
				if (!f.axis || f.axis != "y") {
					if ((c.overflowOffset.left + c.scrollParent[0].offsetWidth) - d.pageX < f.scrollSensitivity) {
						c.scrollParent[0].scrollLeft = b = c.scrollParent[0].scrollLeft + f.scrollSpeed
					} else {
						if (d.pageX - c.overflowOffset.left < f.scrollSensitivity) {
							c.scrollParent[0].scrollLeft = b = c.scrollParent[0].scrollLeft - f.scrollSpeed
						}
					}
				}
			} else {
				if (!f.axis || f.axis != "x") {
					if (d.pageY - a(document).scrollTop() < f.scrollSensitivity) {
						b = a(document).scrollTop(a(document).scrollTop() - f.scrollSpeed)
					} else {
						if (a(window).height() - (d.pageY - a(document).scrollTop()) < f.scrollSensitivity) {
							b = a(document).scrollTop(a(document).scrollTop() + f.scrollSpeed)
						}
					}
				}
				if (!f.axis || f.axis != "y") {
					if (d.pageX - a(document).scrollLeft() < f.scrollSensitivity) {
						b = a(document).scrollLeft(a(document).scrollLeft() - f.scrollSpeed)
					} else {
						if (a(window).width() - (d.pageX - a(document).scrollLeft()) < f.scrollSensitivity) {
							b = a(document).scrollLeft(a(document).scrollLeft() + f.scrollSpeed)
						}
					}
				}
			}
			if (b !== false && a.ui.ddmanager && !f.dropBehaviour) {
				a.ui.ddmanager.prepareOffsets(c, d)
			}
		}
	});
	a.ui.plugin.add("draggable", "snap", {
		start : function (c, d) {
			var b = a(this).data("draggable"),
			e = b.options;
			b.snapElements = [];
			a(e.snap.constructor != String ? (e.snap.items || ":data(draggable)") : e.snap).each(function () {
				var g = a(this);
				var f = g.offset();
				if (this != b.element[0]) {
					b.snapElements.push({
						item : this,
						width : g.outerWidth(),
						height : g.outerHeight(),
						top : f.top,
						left : f.left
					})
				}
			})
		},
		drag : function (u, p) {
			var g = a(this).data("draggable"),
			q = g.options;
			var y = q.snapTolerance;
			var x = p.offset.left,
			w = x + g.helperProportions.width,
			f = p.offset.top,
			e = f + g.helperProportions.height;
			for (var v = g.snapElements.length - 1; v >= 0; v--) {
				var s = g.snapElements[v].left,
				n = s + g.snapElements[v].width,
				m = g.snapElements[v].top,
				A = m + g.snapElements[v].height;
				if (!((s - y < x && x < n + y && m - y < f && f < A + y) || (s - y < x && x < n + y && m - y < e && e < A + y) || (s - y < w && w < n + y && m - y < f && f < A + y) || (s - y < w && w < n + y && m - y < e && e < A + y))) {
					if (g.snapElements[v].snapping) {
						(g.options.snap.release && g.options.snap.release.call(g.element, u, a.extend(g._uiHash(), {
									snapItem : g.snapElements[v].item
								})))
					}
					g.snapElements[v].snapping = false;
					continue
				}
				if (q.snapMode != "inner") {
					var c = Math.abs(m - e) <= y;
					var z = Math.abs(A - f) <= y;
					var j = Math.abs(s - w) <= y;
					var k = Math.abs(n - x) <= y;
					if (c) {
						p.position.top = g._convertPositionTo("relative", {
								top : m - g.helperProportions.height,
								left : 0
							}).top - g.margins.top
					}
					if (z) {
						p.position.top = g._convertPositionTo("relative", {
								top : A,
								left : 0
							}).top - g.margins.top
					}
					if (j) {
						p.position.left = g._convertPositionTo("relative", {
								top : 0,
								left : s - g.helperProportions.width
							}).left - g.margins.left
					}
					if (k) {
						p.position.left = g._convertPositionTo("relative", {
								top : 0,
								left : n
							}).left - g.margins.left
					}
				}
				var h = (c || z || j || k);
				if (q.snapMode != "outer") {
					var c = Math.abs(m - f) <= y;
					var z = Math.abs(A - e) <= y;
					var j = Math.abs(s - x) <= y;
					var k = Math.abs(n - w) <= y;
					if (c) {
						p.position.top = g._convertPositionTo("relative", {
								top : m,
								left : 0
							}).top - g.margins.top
					}
					if (z) {
						p.position.top = g._convertPositionTo("relative", {
								top : A - g.helperProportions.height,
								left : 0
							}).top - g.margins.top
					}
					if (j) {
						p.position.left = g._convertPositionTo("relative", {
								top : 0,
								left : s
							}).left - g.margins.left
					}
					if (k) {
						p.position.left = g._convertPositionTo("relative", {
								top : 0,
								left : n - g.helperProportions.width
							}).left - g.margins.left
					}
				}
				if (!g.snapElements[v].snapping && (c || z || j || k || h)) {
					(g.options.snap.snap && g.options.snap.snap.call(g.element, u, a.extend(g._uiHash(), {
								snapItem : g.snapElements[v].item
							})))
				}
				g.snapElements[v].snapping = (c || z || j || k || h)
			}
		}
	});
	a.ui.plugin.add("draggable", "stack", {
		start : function (b, c) {
			var e = a(this).data("draggable").options;
			var d = a.makeArray(a(e.stack.group)).sort(function (g, f) {
					return (parseInt(a(g).css("zIndex"), 10) || e.stack.min) - (parseInt(a(f).css("zIndex"), 10) || e.stack.min)
				});
			a(d).each(function (f) {
				this.style.zIndex = e.stack.min + f
			});
			this[0].style.zIndex = e.stack.min + d.length
		}
	});
	a.ui.plugin.add("draggable", "zIndex", {
		start : function (c, d) {
			var b = a(d.helper),
			e = a(this).data("draggable").options;
			if (b.css("zIndex")) {
				e._zIndex = b.css("zIndex")
			}
			b.css("zIndex", e.zIndex)
		},
		stop : function (b, c) {
			var d = a(this).data("draggable").options;
			if (d._zIndex) {
				a(c.helper).css("zIndex", d._zIndex)
			}
		}
	})
})(jQuery);
(function (a) {
	a.widget("ui.droppable", {
		_init : function () {
			var c = this.options,
			b = c.accept;
			this.isover = 0;
			this.isout = 1;
			this.options.accept = this.options.accept && a.isFunction(this.options.accept) ? this.options.accept : function (e) {
				return e.is(b)
			};
			this.proportions = {
				width : this.element[0].offsetWidth,
				height : this.element[0].offsetHeight
			};
			a.ui.ddmanager.droppables[this.options.scope] = a.ui.ddmanager.droppables[this.options.scope] || [];
			a.ui.ddmanager.droppables[this.options.scope].push(this);
			(this.options.addClasses && this.element.addClass("ui-droppable"))
		},
		destroy : function () {
			var b = a.ui.ddmanager.droppables[this.options.scope];
			for (var c = 0; c < b.length; c++) {
				if (b[c] == this) {
					b.splice(c, 1)
				}
			}
			this.element.removeClass("ui-droppable ui-droppable-disabled").removeData("droppable").unbind(".droppable")
		},
		_setData : function (b, c) {
			if (b == "accept") {
				this.options.accept = c && a.isFunction(c) ? c : function (e) {
					return e.is(accept)
				}
			} else {
				a.widget.prototype._setData.apply(this, arguments)
			}
		},
		_activate : function (c) {
			var b = a.ui.ddmanager.current;
			if (this.options.activeClass) {
				this.element.addClass(this.options.activeClass)
			}
			(b && this._trigger("activate", c, this.ui(b)))
		},
		_deactivate : function (c) {
			var b = a.ui.ddmanager.current;
			if (this.options.activeClass) {
				this.element.removeClass(this.options.activeClass)
			}
			(b && this._trigger("deactivate", c, this.ui(b)))
		},
		_over : function (c) {
			var b = a.ui.ddmanager.current;
			if (!b || (b.currentItem || b.element)[0] == this.element[0]) {
				return
			}
			if (this.options.accept.call(this.element[0], (b.currentItem || b.element))) {
				if (this.options.hoverClass) {
					this.element.addClass(this.options.hoverClass)
				}
				this._trigger("over", c, this.ui(b))
			}
		},
		_out : function (c) {
			var b = a.ui.ddmanager.current;
			if (!b || (b.currentItem || b.element)[0] == this.element[0]) {
				return
			}
			if (this.options.accept.call(this.element[0], (b.currentItem || b.element))) {
				if (this.options.hoverClass) {
					this.element.removeClass(this.options.hoverClass)
				}
				this._trigger("out", c, this.ui(b))
			}
		},
		_drop : function (c, d) {
			var b = d || a.ui.ddmanager.current;
			if (!b || (b.currentItem || b.element)[0] == this.element[0]) {
				return false
			}
			var e = false;
			this.element.find(":data(droppable)").not(".ui-draggable-dragging").each(function () {
				var f = a.data(this, "droppable");
				if (f.options.greedy && a.ui.intersect(b, a.extend(f, {
							offset : f.element.offset()
						}), f.options.tolerance)) {
					e = true;
					return false
				}
			});
			if (e) {
				return false
			}
			if (this.options.accept.call(this.element[0], (b.currentItem || b.element))) {
				if (this.options.activeClass) {
					this.element.removeClass(this.options.activeClass)
				}
				if (this.options.hoverClass) {
					this.element.removeClass(this.options.hoverClass)
				}
				this._trigger("drop", c, this.ui(b));
				return this.element
			}
			return false
		},
		ui : function (b) {
			return {
				draggable : (b.currentItem || b.element),
				helper : b.helper,
				position : b.position,
				absolutePosition : b.positionAbs,
				offset : b.positionAbs
			}
		}
	});
	a.extend(a.ui.droppable, {
		version : "1.7",
		eventPrefix : "drop",
		defaults : {
			accept : "*",
			activeClass : false,
			addClasses : true,
			greedy : false,
			hoverClass : false,
			scope : "default",
			tolerance : "intersect"
		}
	});
	a.ui.intersect = function (q, j, o) {
		if (!j.offset) {
			return false
		}
		var e = (q.positionAbs || q.position.absolute).left,
		d = e + q.helperProportions.width,
		n = (q.positionAbs || q.position.absolute).top,
		m = n + q.helperProportions.height;
		var g = j.offset.left,
		c = g + j.proportions.width,
		p = j.offset.top,
		k = p + j.proportions.height;
		switch (o) {
		case "fit":
			return (g < e && d < c && p < n && m < k);
			break;
		case "intersect":
			return (g < e + (q.helperProportions.width / 2) && d - (q.helperProportions.width / 2) < c && p < n + (q.helperProportions.height / 2) && m - (q.helperProportions.height / 2) < k);
			break;
		case "pointer":
			var h = ((q.positionAbs || q.position.absolute).left + (q.clickOffset || q.offset.click).left),
			i = ((q.positionAbs || q.position.absolute).top + (q.clickOffset || q.offset.click).top),
			f = a.ui.isOver(i, h, p, g, j.proportions.height, j.proportions.width);
			return f;
			break;
		case "touch":
			return ((n >= p && n <= k) || (m >= p && m <= k) || (n < p && m > k)) && ((e >= g && e <= c) || (d >= g && d <= c) || (e < g && d > c));
			break;
		default:
			return false;
			break
		}
	};
	a.ui.ddmanager = {
		current : null,
		droppables : {
			"default" : []
		},
		prepareOffsets : function (e, g) {
			var b = a.ui.ddmanager.droppables[e.options.scope];
			var f = g ? g.type : null;
			var h = (e.currentItem || e.element).find(":data(droppable)").andSelf();
			droppablesLoop : for (var d = 0; d < b.length; d++) {
				if (b[d].options.disabled || (e && !b[d].options.accept.call(b[d].element[0], (e.currentItem || e.element)))) {
					continue
				}
				for (var c = 0; c < h.length; c++) {
					if (h[c] == b[d].element[0]) {
						b[d].proportions.height = 0;
						continue droppablesLoop
					}
				}
				b[d].visible = b[d].element.css("display") != "none";
				if (!b[d].visible) {
					continue
				}
				b[d].offset = b[d].element.offset();
				b[d].proportions = {
					width : b[d].element[0].offsetWidth,
					height : b[d].element[0].offsetHeight
				};
				if (f == "mousedown") {
					b[d]._activate.call(b[d], g)
				}
			}
		},
		drop : function (b, c) {
			var d = false;
			a.each(a.ui.ddmanager.droppables[b.options.scope], function () {
				if (!this.options) {
					return
				}
				if (!this.options.disabled && this.visible && a.ui.intersect(b, this, this.options.tolerance)) {
					d = this._drop.call(this, c)
				}
				if (!this.options.disabled && this.visible && this.options.accept.call(this.element[0], (b.currentItem || b.element))) {
					this.isout = 1;
					this.isover = 0;
					this._deactivate.call(this, c)
				}
			});
			return d
		},
		drag : function (b, c) {
			if (b.options.refreshPositions) {
				a.ui.ddmanager.prepareOffsets(b, c)
			}
			a.each(a.ui.ddmanager.droppables[b.options.scope], function () {
				if (this.options.disabled || this.greedyChild || !this.visible) {
					return
				}
				var e = a.ui.intersect(b, this, this.options.tolerance);
				var g = !e && this.isover == 1 ? "isout" : (e && this.isover == 0 ? "isover" : null);
				if (!g) {
					return
				}
				var f;
				if (this.options.greedy) {
					var d = this.element.parents(":data(droppable):eq(0)");
					if (d.length) {
						f = a.data(d[0], "droppable");
						f.greedyChild = (g == "isover" ? 1 : 0)
					}
				}
				if (f && g == "isover") {
					f.isover = 0;
					f.isout = 1;
					f._out.call(f, c)
				}
				this[g] = 1;
				this[g == "isout" ? "isover" : "isout"] = 0;
				this[g == "isover" ? "_over" : "_out"].call(this, c);
				if (f && g == "isout") {
					f.isout = 0;
					f.isover = 1;
					f._over.call(f, c)
				}
			})
		}
	}
})(jQuery);
(function (c) {
	c.widget("ui.resizable", c.extend({}, c.ui.mouse, {
			_init : function () {
				var e = this,
				j = this.options;
				this.element.addClass("ui-resizable");
				c.extend(this, {
					_aspectRatio : !!(j.aspectRatio),
					aspectRatio : j.aspectRatio,
					originalElement : this.element,
					_proportionallyResizeElements : [],
					_helper : j.helper || j.ghost || j.animate ? j.helper || "ui-resizable-helper" : null
				});
				if (this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {
					if (/relative/.test(this.element.css("position")) && c.browser.opera) {
						this.element.css({
							position : "relative",
							top : "auto",
							left : "auto"
						})
					}
					this.element.wrap(c('<div class="ui-wrapper" style="overflow: hidden;"></div>').css({
							position : this.element.css("position"),
							width : this.element.outerWidth(),
							height : this.element.outerHeight(),
							top : this.element.css("top"),
							left : this.element.css("left")
						}));
					this.element = this.element.parent().data("resizable", this.element.data("resizable"));
					this.elementIsWrapper = true;
					this.element.css({
						marginLeft : this.originalElement.css("marginLeft"),
						marginTop : this.originalElement.css("marginTop"),
						marginRight : this.originalElement.css("marginRight"),
						marginBottom : this.originalElement.css("marginBottom")
					});
					this.originalElement.css({
						marginLeft : 0,
						marginTop : 0,
						marginRight : 0,
						marginBottom : 0
					});
					this.originalResizeStyle = this.originalElement.css("resize");
					this.originalElement.css("resize", "none");
					this._proportionallyResizeElements.push(this.originalElement.css({
							position : "static",
							zoom : 1,
							display : "block"
						}));
					this.originalElement.css({
						margin : this.originalElement.css("margin")
					});
					this._proportionallyResize()
				}
				this.handles = j.handles || (!c(".ui-resizable-handle", this.element).length ? "e,s,se" : {
						n : ".ui-resizable-n",
						e : ".ui-resizable-e",
						s : ".ui-resizable-s",
						w : ".ui-resizable-w",
						se : ".ui-resizable-se",
						sw : ".ui-resizable-sw",
						ne : ".ui-resizable-ne",
						nw : ".ui-resizable-nw"
					});
				if (this.handles.constructor == String) {
					if (this.handles == "all") {
						this.handles = "n,e,s,w,se,sw,ne,nw"
					}
					var k = this.handles.split(",");
					this.handles = {};
					for (var f = 0; f < k.length; f++) {
						var h = c.trim(k[f]),
						d = "ui-resizable-" + h;
						var g = c('<div class="ui-resizable-handle ' + d + '"></div>');
						if (/sw|se|ne|nw/.test(h)) {
							g.css({
								zIndex : ++j.zIndex
							})
						}
						if ("se" == h) {
							g.addClass("ui-icon ui-icon-gripsmall-diagonal-se")
						}
						this.handles[h] = ".ui-resizable-" + h;
						this.element.append(g)
					}
				}
				this._renderAxis = function (p) {
					p = p || this.element;
					for (var m in this.handles) {
						if (this.handles[m].constructor == String) {
							this.handles[m] = c(this.handles[m], this.element).show()
						}
						if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {
							var n = c(this.handles[m], this.element),
							o = 0;
							o = /sw|ne|nw|se|n|s/.test(m) ? n.outerHeight() : n.outerWidth();
							var l = ["padding", /ne|nw|n/.test(m) ? "Top" : /se|sw|s/.test(m) ? "Bottom" : /^e$/.test(m) ? "Right" : "Left"].join("");
							p.css(l, o);
							this._proportionallyResize()
						}
						if (!c(this.handles[m]).length) {
							continue
						}
					}
				};
				this._renderAxis(this.element);
				this._handles = c(".ui-resizable-handle", this.element).disableSelection();
				this._handles.mouseover(function () {
					if (!e.resizing) {
						if (this.className) {
							var i = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)
						}
						e.axis = i && i[1] ? i[1] : "se"
					}
				});
				if (j.autoHide) {
					this._handles.hide();
					c(this.element).addClass("ui-resizable-autohide").hover(function () {
						c(this).removeClass("ui-resizable-autohide");
						e._handles.show()
					}, function () {
						if (!e.resizing) {
							c(this).addClass("ui-resizable-autohide");
							e._handles.hide()
						}
					})
				}
				this._mouseInit()
			},
			destroy : function () {
				this._mouseDestroy();
				var d = function (f) {
					c(f).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").unbind(".resizable").find(".ui-resizable-handle").remove()
				};
				if (this.elementIsWrapper) {
					d(this.element);
					var e = this.element;
					e.parent().append(this.originalElement.css({
							position : e.css("position"),
							width : e.outerWidth(),
							height : e.outerHeight(),
							top : e.css("top"),
							left : e.css("left")
						})).end().remove()
				}
				this.originalElement.css("resize", this.originalResizeStyle);
				d(this.originalElement)
			},
			_mouseCapture : function (e) {
				var f = false;
				for (var d in this.handles) {
					if (c(this.handles[d])[0] == e.target) {
						f = true
					}
				}
				return this.options.disabled || !!f
			},
			_mouseStart : function (f) {
				var i = this.options,
				e = this.element.position(),
				d = this.element;
				this.resizing = true;
				this.documentScroll = {
					top : c(document).scrollTop(),
					left : c(document).scrollLeft()
				};
				if (d.is(".ui-draggable") || (/absolute/).test(d.css("position"))) {
					d.css({
						position : "absolute",
						top : e.top,
						left : e.left
					})
				}
				if (c.browser.opera && (/relative/).test(d.css("position"))) {
					d.css({
						position : "relative",
						top : "auto",
						left : "auto"
					})
				}
				this._renderProxy();
				var j = b(this.helper.css("left")),
				g = b(this.helper.css("top"));
				if (i.containment) {
					j += c(i.containment).scrollLeft() || 0;
					g += c(i.containment).scrollTop() || 0
				}
				this.offset = this.helper.offset();
				this.position = {
					left : j,
					top : g
				};
				this.size = this._helper ? {
					width : d.outerWidth(),
					height : d.outerHeight()
				}
				 : {
					width : d.width(),
					height : d.height()
				};
				this.originalSize = this._helper ? {
					width : d.outerWidth(),
					height : d.outerHeight()
				}
				 : {
					width : d.width(),
					height : d.height()
				};
				this.originalPosition = {
					left : j,
					top : g
				};
				this.sizeDiff = {
					width : d.outerWidth() - d.width(),
					height : d.outerHeight() - d.height()
				};
				this.originalMousePosition = {
					left : f.pageX,
					top : f.pageY
				};
				this.aspectRatio = (typeof i.aspectRatio == "number") ? i.aspectRatio : ((this.originalSize.width / this.originalSize.height) || 1);
				var h = c(".ui-resizable-" + this.axis).css("cursor");
				c("body").css("cursor", h == "auto" ? this.axis + "-resize" : h);
				d.addClass("ui-resizable-resizing");
				this._propagate("start", f);
				return true
			},
			_mouseDrag : function (d) {
				var g = this.helper,
				f = this.options,
				l = {},
				p = this,
				i = this.originalMousePosition,
				m = this.axis;
				var q = (d.pageX - i.left) || 0,
				n = (d.pageY - i.top) || 0;
				var h = this._change[m];
				if (!h) {
					return false
				}
				var k = h.apply(this, [d, q, n]),
				j = c.browser.msie && c.browser.version < 7,
				e = this.sizeDiff;
				if (this._aspectRatio || d.shiftKey) {
					k = this._updateRatio(k, d)
				}
				k = this._respectSize(k, d);
				this._propagate("resize", d);
				g.css({
					top : this.position.top + "px",
					left : this.position.left + "px",
					width : this.size.width + "px",
					height : this.size.height + "px"
				});
				if (!this._helper && this._proportionallyResizeElements.length) {
					this._proportionallyResize()
				}
				this._updateCache(k);
				this._trigger("resize", d, this.ui());
				return false
			},
			_mouseStop : function (g) {
				this.resizing = false;
				var h = this.options,
				l = this;
				if (this._helper) {
					var f = this._proportionallyResizeElements,
					d = f.length && (/textarea/i).test(f[0].nodeName),
					e = d && c.ui.hasScroll(f[0], "left") ? 0 : l.sizeDiff.height,
					j = d ? 0 : l.sizeDiff.width;
					var m = {
						width : (l.size.width - j),
						height : (l.size.height - e)
					},
					i = (parseInt(l.element.css("left"), 10) + (l.position.left - l.originalPosition.left)) || null,
					k = (parseInt(l.element.css("top"), 10) + (l.position.top - l.originalPosition.top)) || null;
					if (!h.animate) {
						this.element.css(c.extend(m, {
								top : k,
								left : i
							}))
					}
					l.helper.height(l.size.height);
					l.helper.width(l.size.width);
					if (this._helper && !h.animate) {
						this._proportionallyResize()
					}
				}
				c("body").css("cursor", "auto");
				this.element.removeClass("ui-resizable-resizing");
				this._propagate("stop", g);
				if (this._helper) {
					this.helper.remove()
				}
				return false
			},
			_updateCache : function (d) {
				var e = this.options;
				this.offset = this.helper.offset();
				if (a(d.left)) {
					this.position.left = d.left
				}
				if (a(d.top)) {
					this.position.top = d.top
				}
				if (a(d.height)) {
					this.size.height = d.height
				}
				if (a(d.width)) {
					this.size.width = d.width
				}
			},
			_updateRatio : function (g, f) {
				var h = this.options,
				i = this.position,
				e = this.size,
				d = this.axis;
				if (g.height) {
					g.width = (e.height * this.aspectRatio)
				} else {
					if (g.width) {
						g.height = (e.width / this.aspectRatio)
					}
				}
				if (d == "sw") {
					g.left = i.left + (e.width - g.width);
					g.top = null
				}
				if (d == "nw") {
					g.top = i.top + (e.height - g.height);
					g.left = i.left + (e.width - g.width)
				}
				return g
			},
			_respectSize : function (k, f) {
				var i = this.helper,
				h = this.options,
				q = this._aspectRatio || f.shiftKey,
				p = this.axis,
				s = a(k.width) && h.maxWidth && (h.maxWidth < k.width),
				l = a(k.height) && h.maxHeight && (h.maxHeight < k.height),
				g = a(k.width) && h.minWidth && (h.minWidth > k.width),
				r = a(k.height) && h.minHeight && (h.minHeight > k.height);
				if (g) {
					k.width = h.minWidth
				}
				if (r) {
					k.height = h.minHeight
				}
				if (s) {
					k.width = h.maxWidth
				}
				if (l) {
					k.height = h.maxHeight
				}
				var e = this.originalPosition.left + this.originalSize.width,
				n = this.position.top + this.size.height;
				var j = /sw|nw|w/.test(p),
				d = /nw|ne|n/.test(p);
				if (g && j) {
					k.left = e - h.minWidth
				}
				if (s && j) {
					k.left = e - h.maxWidth
				}
				if (r && d) {
					k.top = n - h.minHeight
				}
				if (l && d) {
					k.top = n - h.maxHeight
				}
				var m = !k.width && !k.height;
				if (m && !k.left && k.top) {
					k.top = null
				} else {
					if (m && !k.top && k.left) {
						k.left = null
					}
				}
				return k
			},
			_proportionallyResize : function () {
				var j = this.options;
				if (!this._proportionallyResizeElements.length) {
					return
				}
				var f = this.helper || this.element;
				for (var e = 0; e < this._proportionallyResizeElements.length; e++) {
					var g = this._proportionallyResizeElements[e];
					if (!this.borderDif) {
						var d = [g.css("borderTopWidth"), g.css("borderRightWidth"), g.css("borderBottomWidth"), g.css("borderLeftWidth")],
						h = [g.css("paddingTop"), g.css("paddingRight"), g.css("paddingBottom"), g.css("paddingLeft")];
						this.borderDif = c.map(d, function (k, m) {
								var l = parseInt(k, 10) || 0,
								n = parseInt(h[m], 10) || 0;
								return l + n
							})
					}
					if (c.browser.msie && !(!(c(f).is(":hidden") || c(f).parents(":hidden").length))) {
						continue
					}
					g.css({
						height : (f.height() - this.borderDif[0] - this.borderDif[2]) || 0,
						width : (f.width() - this.borderDif[1] - this.borderDif[3]) || 0
					})
				}
			},
			_renderProxy : function () {
				var e = this.element,
				h = this.options;
				this.elementOffset = e.offset();
				if (this._helper) {
					this.helper = this.helper || c('<div style="overflow:hidden;"></div>');
					var d = c.browser.msie && c.browser.version < 7,
					f = (d ? 1 : 0),
					g = (d ? 2 : -1);
					this.helper.addClass(this._helper).css({
						width : this.element.outerWidth() + g,
						height : this.element.outerHeight() + g,
						position : "absolute",
						left : this.elementOffset.left - f + "px",
						top : this.elementOffset.top - f + "px",
						zIndex : ++h.zIndex
					});
					this.helper.appendTo("body").disableSelection()
				} else {
					this.helper = this.element
				}
			},
			_change : {
				e : function (f, e, d) {
					return {
						width : this.originalSize.width + e
					}
				},
				w : function (g, e, d) {
					var i = this.options,
					f = this.originalSize,
					h = this.originalPosition;
					return {
						left : h.left + e,
						width : f.width - e
					}
				},
				n : function (g, e, d) {
					var i = this.options,
					f = this.originalSize,
					h = this.originalPosition;
					return {
						top : h.top + d,
						height : f.height - d
					}
				},
				s : function (f, e, d) {
					return {
						height : this.originalSize.height + d
					}
				},
				se : function (f, e, d) {
					return c.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [f, e, d]))
				},
				sw : function (f, e, d) {
					return c.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [f, e, d]))
				},
				ne : function (f, e, d) {
					return c.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [f, e, d]))
				},
				nw : function (f, e, d) {
					return c.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [f, e, d]))
				}
			},
			_propagate : function (e, d) {
				c.ui.plugin.call(this, e, [d, this.ui()]);
				(e != "resize" && this._trigger(e, d, this.ui()))
			},
			plugins : {},
			ui : function () {
				return {
					originalElement : this.originalElement,
					element : this.element,
					helper : this.helper,
					position : this.position,
					size : this.size,
					originalSize : this.originalSize,
					originalPosition : this.originalPosition
				}
			}
		}));
	c.extend(c.ui.resizable, {
		version : "1.7",
		eventPrefix : "resize",
		defaults : {
			alsoResize : false,
			animate : false,
			animateDuration : "slow",
			animateEasing : "swing",
			aspectRatio : false,
			autoHide : false,
			cancel : ":input,option",
			containment : false,
			delay : 0,
			distance : 1,
			ghost : false,
			grid : false,
			handles : "e,s,se",
			helper : false,
			maxHeight : null,
			maxWidth : null,
			minHeight : 10,
			minWidth : 10,
			zIndex : 1000
		}
	});
	c.ui.plugin.add("resizable", "alsoResize", {
		start : function (e, f) {
			var d = c(this).data("resizable"),
			g = d.options;
			_store = function (h) {
				c(h).each(function () {
					c(this).data("resizable-alsoresize", {
						width : parseInt(c(this).width(), 10),
						height : parseInt(c(this).height(), 10),
						left : parseInt(c(this).css("left"), 10),
						top : parseInt(c(this).css("top"), 10)
					})
				})
			};
			if (typeof(g.alsoResize) == "object" && !g.alsoResize.parentNode) {
				if (g.alsoResize.length) {
					g.alsoResize = g.alsoResize[0];
					_store(g.alsoResize)
				} else {
					c.each(g.alsoResize, function (h, i) {
						_store(h)
					})
				}
			} else {
				_store(g.alsoResize)
			}
		},
		resize : function (f, h) {
			var e = c(this).data("resizable"),
			i = e.options,
			g = e.originalSize,
			k = e.originalPosition;
			var j = {
				height : (e.size.height - g.height) || 0,
				width : (e.size.width - g.width) || 0,
				top : (e.position.top - k.top) || 0,
				left : (e.position.left - k.left) || 0
			},
			d = function (l, m) {
				c(l).each(function () {
					var p = c(this),
					q = c(this).data("resizable-alsoresize"),
					o = {},
					n = m && m.length ? m : ["width", "height", "top", "left"];
					c.each(n || ["width", "height", "top", "left"], function (r, u) {
						var s = (q[u] || 0) + (j[u] || 0);
						if (s && s >= 0) {
							o[u] = s || null
						}
					});
					if (/relative/.test(p.css("position")) && c.browser.opera) {
						e._revertToRelativePosition = true;
						p.css({
							position : "absolute",
							top : "auto",
							left : "auto"
						})
					}
					p.css(o)
				})
			};
			if (typeof(i.alsoResize) == "object" && !i.alsoResize.nodeType) {
				c.each(i.alsoResize, function (l, m) {
					d(l, m)
				})
			} else {
				d(i.alsoResize)
			}
		},
		stop : function (e, f) {
			var d = c(this).data("resizable");
			if (d._revertToRelativePosition && c.browser.opera) {
				d._revertToRelativePosition = false;
				el.css({
					position : "relative"
				})
			}
			c(this).removeData("resizable-alsoresize-start")
		}
	});
	c.ui.plugin.add("resizable", "animate", {
		stop : function (h, m) {
			var n = c(this).data("resizable"),
			i = n.options;
			var g = n._proportionallyResizeElements,
			d = g.length && (/textarea/i).test(g[0].nodeName),
			e = d && c.ui.hasScroll(g[0], "left") ? 0 : n.sizeDiff.height,
			k = d ? 0 : n.sizeDiff.width;
			var f = {
				width : (n.size.width - k),
				height : (n.size.height - e)
			},
			j = (parseInt(n.element.css("left"), 10) + (n.position.left - n.originalPosition.left)) || null,
			l = (parseInt(n.element.css("top"), 10) + (n.position.top - n.originalPosition.top)) || null;
			n.element.animate(c.extend(f, l && j ? {
					top : l,
					left : j
				}
					 : {}), {
				duration : i.animateDuration,
				easing : i.animateEasing,
				step : function () {
					var o = {
						width : parseInt(n.element.css("width"), 10),
						height : parseInt(n.element.css("height"), 10),
						top : parseInt(n.element.css("top"), 10),
						left : parseInt(n.element.css("left"), 10)
					};
					if (g && g.length) {
						c(g[0]).css({
							width : o.width,
							height : o.height
						})
					}
					n._updateCache(o);
					n._propagate("resize", h)
				}
			})
		}
	});
	c.ui.plugin.add("resizable", "containment", {
		start : function (e, q) {
			var s = c(this).data("resizable"),
			i = s.options,
			k = s.element;
			var f = i.containment,
			j = (f instanceof c) ? f.get(0) : (/parent/.test(f)) ? k.parent().get(0) : f;
			if (!j) {
				return
			}
			s.containerElement = c(j);
			if (/document/.test(f) || f == document) {
				s.containerOffset = {
					left : 0,
					top : 0
				};
				s.containerPosition = {
					left : 0,
					top : 0
				};
				s.parentData = {
					element : c(document),
					left : 0,
					top : 0,
					width : c(document).width(),
					height : c(document).height() || document.body.parentNode.scrollHeight
				}
			} else {
				var m = c(j),
				h = [];
				c(["Top", "Right", "Left", "Bottom"]).each(function (p, o) {
					h[p] = b(m.css("padding" + o))
				});
				s.containerOffset = m.offset();
				s.containerPosition = m.position();
				s.containerSize = {
					height : (m.innerHeight() - h[3]),
					width : (m.innerWidth() - h[1])
				};
				var n = s.containerOffset,
				d = s.containerSize.height,
				l = s.containerSize.width,
				g = (c.ui.hasScroll(j, "left") ? j.scrollWidth : l),
				r = (c.ui.hasScroll(j) ? j.scrollHeight : d);
				s.parentData = {
					element : j,
					left : n.left,
					top : n.top,
					width : g,
					height : r
				}
			}
		},
		resize : function (f, p) {
			var s = c(this).data("resizable"),
			h = s.options,
			e = s.containerSize,
			n = s.containerOffset,
			l = s.size,
			m = s.position,
			q = h._aspectRatio || f.shiftKey,
			d = {
				top : 0,
				left : 0
			},
			g = s.containerElement;
			if (g[0] != document && (/static/).test(g.css("position"))) {
				d = n
			}
			if (m.left < (s._helper ? n.left : 0)) {
				s.size.width = s.size.width + (s._helper ? (s.position.left - n.left) : (s.position.left - d.left));
				if (q) {
					s.size.height = s.size.width / h.aspectRatio
				}
				s.position.left = h.helper ? n.left : 0
			}
			if (m.top < (s._helper ? n.top : 0)) {
				s.size.height = s.size.height + (s._helper ? (s.position.top - n.top) : s.position.top);
				if (q) {
					s.size.width = s.size.height * h.aspectRatio
				}
				s.position.top = s._helper ? n.top : 0
			}
			s.offset.left = s.parentData.left + s.position.left;
			s.offset.top = s.parentData.top + s.position.top;
			var k = Math.abs((s._helper ? s.offset.left - d.left : (s.offset.left - d.left)) + s.sizeDiff.width),
			r = Math.abs((s._helper ? s.offset.top - d.top : (s.offset.top - n.top)) + s.sizeDiff.height);
			var j = s.containerElement.get(0) == s.element.parent().get(0),
			i = /relative|absolute/.test(s.containerElement.css("position"));
			if (j && i) {
				k -= s.parentData.left
			}
			if (k + s.size.width >= s.parentData.width) {
				s.size.width = s.parentData.width - k;
				if (q) {
					s.size.height = s.size.width / h.aspectRatio
				}
			}
			if (r + s.size.height >= s.parentData.height) {
				s.size.height = s.parentData.height - r;
				if (q) {
					s.size.width = s.size.height * h.aspectRatio
				}
			}
		},
		stop : function (e, m) {
			var p = c(this).data("resizable"),
			f = p.options,
			k = p.position,
			l = p.containerOffset,
			d = p.containerPosition,
			g = p.containerElement;
			var i = c(p.helper),
			q = i.offset(),
			n = i.outerWidth() - p.sizeDiff.width,
			j = i.outerHeight() - p.sizeDiff.height;
			if (p._helper && !f.animate && (/relative/).test(g.css("position"))) {
				c(this).css({
					left : q.left - d.left - l.left,
					width : n,
					height : j
				})
			}
			if (p._helper && !f.animate && (/static/).test(g.css("position"))) {
				c(this).css({
					left : q.left - d.left - l.left,
					width : n,
					height : j
				})
			}
		}
	});
	c.ui.plugin.add("resizable", "ghost", {
		start : function (f, g) {
			var d = c(this).data("resizable"),
			h = d.options,
			e = d.size;
			d.ghost = d.originalElement.clone();
			d.ghost.css({
				opacity : 0.25,
				display : "block",
				position : "relative",
				height : e.height,
				width : e.width,
				margin : 0,
				left : 0,
				top : 0
			}).addClass("ui-resizable-ghost").addClass(typeof h.ghost == "string" ? h.ghost : "");
			d.ghost.appendTo(d.helper)
		},
		resize : function (e, f) {
			var d = c(this).data("resizable"),
			g = d.options;
			if (d.ghost) {
				d.ghost.css({
					position : "relative",
					height : d.size.height,
					width : d.size.width
				})
			}
		},
		stop : function (e, f) {
			var d = c(this).data("resizable"),
			g = d.options;
			if (d.ghost && d.helper) {
				d.helper.get(0).removeChild(d.ghost.get(0))
			}
		}
	});
	c.ui.plugin.add("resizable", "grid", {
		resize : function (d, l) {
			var n = c(this).data("resizable"),
			g = n.options,
			j = n.size,
			h = n.originalSize,
			i = n.originalPosition,
			m = n.axis,
			k = g._aspectRatio || d.shiftKey;
			g.grid = typeof g.grid == "number" ? [g.grid, g.grid] : g.grid;
			var f = Math.round((j.width - h.width) / (g.grid[0] || 1)) * (g.grid[0] || 1),
			e = Math.round((j.height - h.height) / (g.grid[1] || 1)) * (g.grid[1] || 1);
			if (/^(se|s|e)$/.test(m)) {
				n.size.width = h.width + f;
				n.size.height = h.height + e
			} else {
				if (/^(ne)$/.test(m)) {
					n.size.width = h.width + f;
					n.size.height = h.height + e;
					n.position.top = i.top - e
				} else {
					if (/^(sw)$/.test(m)) {
						n.size.width = h.width + f;
						n.size.height = h.height + e;
						n.position.left = i.left - f
					} else {
						n.size.width = h.width + f;
						n.size.height = h.height + e;
						n.position.top = i.top - e;
						n.position.left = i.left - f
					}
				}
			}
		}
	});
	var b = function (d) {
		return parseInt(d, 10) || 0
	};
	var a = function (d) {
		return !isNaN(parseInt(d, 10))
	}
})(jQuery);
(function (a) {
	a.widget("ui.selectable", a.extend({}, a.ui.mouse, {
			_init : function () {
				var b = this;
				this.element.addClass("ui-selectable");
				this.dragged = false;
				var c;
				this.refresh = function () {
					c = a(b.options.filter, b.element[0]);
					c.each(function () {
						var d = a(this);
						var e = d.offset();
						a.data(this, "selectable-item", {
							element : this,
							$element : d,
							left : e.left,
							top : e.top,
							right : e.left + d.outerWidth(),
							bottom : e.top + d.outerHeight(),
							startselected : false,
							selected : d.hasClass("ui-selected"),
							selecting : d.hasClass("ui-selecting"),
							unselecting : d.hasClass("ui-unselecting")
						})
					})
				};
				this.refresh();
				this.selectees = c.addClass("ui-selectee");
				this._mouseInit();
				this.helper = a(document.createElement("div")).css({
						border : "1px dotted black"
					}).addClass("ui-selectable-helper")
			},
			destroy : function () {
				this.element.removeClass("ui-selectable ui-selectable-disabled").removeData("selectable").unbind(".selectable");
				this._mouseDestroy()
			},
			_mouseStart : function (d) {
				var b = this;
				this.opos = [d.pageX, d.pageY];
				if (this.options.disabled) {
					return
				}
				var c = this.options;
				this.selectees = a(c.filter, this.element[0]);
				this._trigger("start", d);
				a("body").append(this.helper);
				this.helper.css({
					"z-index" : 100,
					position : "absolute",
					left : d.clientX,
					top : d.clientY,
					width : 0,
					height : 0
				});
				if (c.autoRefresh) {
					this.refresh()
				}
				this.selectees.filter(".ui-selected").each(function () {
					var e = a.data(this, "selectable-item");
					e.startselected = true;
					if (!d.metaKey) {
						e.$element.removeClass("ui-selected");
						e.selected = false;
						e.$element.addClass("ui-unselecting");
						e.unselecting = true;
						b._trigger("unselecting", d, {
							unselecting : e.element
						})
					}
				});
				a(d.target).parents().andSelf().each(function () {
					var e = a.data(this, "selectable-item");
					if (e) {
						e.$element.removeClass("ui-unselecting").addClass("ui-selecting");
						e.unselecting = false;
						e.selecting = true;
						e.selected = true;
						b._trigger("selecting", d, {
							selecting : e.element
						});
						return false
					}
				})
			},
			_mouseDrag : function (i) {
				var c = this;
				this.dragged = true;
				if (this.options.disabled) {
					return
				}
				var e = this.options;
				var d = this.opos[0],
				h = this.opos[1],
				b = i.pageX,
				g = i.pageY;
				if (d > b) {
					var f = b;
					b = d;
					d = f
				}
				if (h > g) {
					var f = g;
					g = h;
					h = f
				}
				this.helper.css({
					left : d,
					top : h,
					width : b - d,
					height : g - h
				});
				this.selectees.each(function () {
					var j = a.data(this, "selectable-item");
					if (!j || j.element == c.element[0]) {
						return
					}
					var k = false;
					if (e.tolerance == "touch") {
						k = (!(j.left > b || j.right < d || j.top > g || j.bottom < h))
					} else {
						if (e.tolerance == "fit") {
							k = (j.left > d && j.right < b && j.top > h && j.bottom < g)
						}
					}
					if (k) {
						if (j.selected) {
							j.$element.removeClass("ui-selected");
							j.selected = false
						}
						if (j.unselecting) {
							j.$element.removeClass("ui-unselecting");
							j.unselecting = false
						}
						if (!j.selecting) {
							j.$element.addClass("ui-selecting");
							j.selecting = true;
							c._trigger("selecting", i, {
								selecting : j.element
							})
						}
					} else {
						if (j.selecting) {
							if (i.metaKey && j.startselected) {
								j.$element.removeClass("ui-selecting");
								j.selecting = false;
								j.$element.addClass("ui-selected");
								j.selected = true
							} else {
								j.$element.removeClass("ui-selecting");
								j.selecting = false;
								if (j.startselected) {
									j.$element.addClass("ui-unselecting");
									j.unselecting = true
								}
								c._trigger("unselecting", i, {
									unselecting : j.element
								})
							}
						}
						if (j.selected) {
							if (!i.metaKey && !j.startselected) {
								j.$element.removeClass("ui-selected");
								j.selected = false;
								j.$element.addClass("ui-unselecting");
								j.unselecting = true;
								c._trigger("unselecting", i, {
									unselecting : j.element
								})
							}
						}
					}
				});
				return false
			},
			_mouseStop : function (d) {
				var b = this;
				this.dragged = false;
				var c = this.options;
				a(".ui-unselecting", this.element[0]).each(function () {
					var e = a.data(this, "selectable-item");
					e.$element.removeClass("ui-unselecting");
					e.unselecting = false;
					e.startselected = false;
					b._trigger("unselected", d, {
						unselected : e.element
					})
				});
				a(".ui-selecting", this.element[0]).each(function () {
					var e = a.data(this, "selectable-item");
					e.$element.removeClass("ui-selecting").addClass("ui-selected");
					e.selecting = false;
					e.selected = true;
					e.startselected = true;
					b._trigger("selected", d, {
						selected : e.element
					})
				});
				this._trigger("stop", d);
				this.helper.remove();
				return false
			}
		}));
	a.extend(a.ui.selectable, {
		version : "1.7",
		defaults : {
			appendTo : "body",
			autoRefresh : true,
			cancel : ":input,option",
			delay : 0,
			distance : 0,
			filter : "*",
			tolerance : "touch"
		}
	})
})(jQuery);
(function (a) {
	a.widget("ui.sortable", a.extend({}, a.ui.mouse, {
			_init : function () {
				var b = this.options;
				this.containerCache = {};
				this.element.addClass("ui-sortable");
				this.refresh();
				this.floating = this.items.length ? (/left|right/).test(this.items[0].item.css("float")) : false;
				this.offset = this.element.offset();
				this._mouseInit()
			},
			destroy : function () {
				this.element.removeClass("ui-sortable ui-sortable-disabled").removeData("sortable").unbind(".sortable");
				this._mouseDestroy();
				for (var b = this.items.length - 1; b >= 0; b--) {
					this.items[b].item.removeData("sortable-item")
				}
			},
			_mouseCapture : function (e, f) {
				if (this.reverting) {
					return false
				}
				if (this.options.disabled || this.options.type == "static") {
					return false
				}
				this._refreshItems(e);
				var d = null,
				c = this,
				b = a(e.target).parents().each(function () {
						if (a.data(this, "sortable-item") == c) {
							d = a(this);
							return false
						}
					});
				if (a.data(e.target, "sortable-item") == c) {
					d = a(e.target)
				}
				if (!d) {
					return false
				}
				if (this.options.handle && !f) {
					var g = false;
					a(this.options.handle, d).find("*").andSelf().each(function () {
						if (this == e.target) {
							g = true
						}
					});
					if (!g) {
						return false
					}
				}
				this.currentItem = d;
				this._removeCurrentsFromItems();
				return true
			},
			_mouseStart : function (e, f, b) {
				var g = this.options,
				c = this;
				this.currentContainer = this;
				this.refreshPositions();
				this.helper = this._createHelper(e);
				this._cacheHelperProportions();
				this._cacheMargins();
				this.scrollParent = this.helper.scrollParent();
				this.offset = this.currentItem.offset();
				this.offset = {
					top : this.offset.top - this.margins.top,
					left : this.offset.left - this.margins.left
				};
				this.helper.css("position", "absolute");
				this.cssPosition = this.helper.css("position");
				a.extend(this.offset, {
					click : {
						left : e.pageX - this.offset.left,
						top : e.pageY - this.offset.top
					},
					parent : this._getParentOffset(),
					relative : this._getRelativeOffset()
				});
				this.originalPosition = this._generatePosition(e);
				this.originalPageX = e.pageX;
				this.originalPageY = e.pageY;
				if (g.cursorAt) {
					this._adjustOffsetFromHelper(g.cursorAt)
				}
				this.domPosition = {
					prev : this.currentItem.prev()[0],
					parent : this.currentItem.parent()[0]
				};
				if (this.helper[0] != this.currentItem[0]) {
					this.currentItem.hide()
				}
				this._createPlaceholder();
				if (g.containment) {
					this._setContainment()
				}
				if (g.cursor) {
					if (a("body").css("cursor")) {
						this._storedCursor = a("body").css("cursor")
					}
					a("body").css("cursor", g.cursor)
				}
				if (g.opacity) {
					if (this.helper.css("opacity")) {
						this._storedOpacity = this.helper.css("opacity")
					}
					this.helper.css("opacity", g.opacity)
				}
				if (g.zIndex) {
					if (this.helper.css("zIndex")) {
						this._storedZIndex = this.helper.css("zIndex")
					}
					this.helper.css("zIndex", g.zIndex)
				}
				if (this.scrollParent[0] != document && this.scrollParent[0].tagName != "HTML") {
					this.overflowOffset = this.scrollParent.offset()
				}
				this._trigger("start", e, this._uiHash());
				if (!this._preserveHelperProportions) {
					this._cacheHelperProportions()
				}
				if (!b) {
					for (var d = this.containers.length - 1; d >= 0; d--) {
						this.containers[d]._trigger("activate", e, c._uiHash(this))
					}
				}
				if (a.ui.ddmanager) {
					a.ui.ddmanager.current = this
				}
				if (a.ui.ddmanager && !g.dropBehaviour) {
					a.ui.ddmanager.prepareOffsets(this, e)
				}
				this.dragging = true;
				this.helper.addClass("ui-sortable-helper");
				this._mouseDrag(e);
				return true
			},
			_mouseDrag : function (f) {
				this.position = this._generatePosition(f);
				this.positionAbs = this._convertPositionTo("absolute");
				if (!this.lastPositionAbs) {
					this.lastPositionAbs = this.positionAbs
				}
				if (this.options.scroll) {
					var g = this.options,
					b = false;
					if (this.scrollParent[0] != document && this.scrollParent[0].tagName != "HTML") {
						if ((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - f.pageY < g.scrollSensitivity) {
							this.scrollParent[0].scrollTop = b = this.scrollParent[0].scrollTop + g.scrollSpeed
						} else {
							if (f.pageY - this.overflowOffset.top < g.scrollSensitivity) {
								this.scrollParent[0].scrollTop = b = this.scrollParent[0].scrollTop - g.scrollSpeed
							}
						}
						if ((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - f.pageX < g.scrollSensitivity) {
							this.scrollParent[0].scrollLeft = b = this.scrollParent[0].scrollLeft + g.scrollSpeed
						} else {
							if (f.pageX - this.overflowOffset.left < g.scrollSensitivity) {
								this.scrollParent[0].scrollLeft = b = this.scrollParent[0].scrollLeft - g.scrollSpeed
							}
						}
					} else {
						if (f.pageY - a(document).scrollTop() < g.scrollSensitivity) {
							b = a(document).scrollTop(a(document).scrollTop() - g.scrollSpeed)
						} else {
							if (a(window).height() - (f.pageY - a(document).scrollTop()) < g.scrollSensitivity) {
								b = a(document).scrollTop(a(document).scrollTop() + g.scrollSpeed)
							}
						}
						if (f.pageX - a(document).scrollLeft() < g.scrollSensitivity) {
							b = a(document).scrollLeft(a(document).scrollLeft() - g.scrollSpeed)
						} else {
							if (a(window).width() - (f.pageX - a(document).scrollLeft()) < g.scrollSensitivity) {
								b = a(document).scrollLeft(a(document).scrollLeft() + g.scrollSpeed)
							}
						}
					}
					if (b !== false && a.ui.ddmanager && !g.dropBehaviour) {
						a.ui.ddmanager.prepareOffsets(this, f)
					}
				}
				this.positionAbs = this._convertPositionTo("absolute");
				if (!this.options.axis || this.options.axis != "y") {
					this.helper[0].style.left = this.position.left + "px"
				}
				if (!this.options.axis || this.options.axis != "x") {
					this.helper[0].style.top = this.position.top + "px"
				}
				for (var d = this.items.length - 1; d >= 0; d--) {
					var e = this.items[d],
					c = e.item[0],
					h = this._intersectsWithPointer(e);
					if (!h) {
						continue
					}
					if (c != this.currentItem[0] && this.placeholder[h == 1 ? "next" : "prev"]()[0] != c && !a.ui.contains(this.placeholder[0], c) && (this.options.type == "semi-dynamic" ? !a.ui.contains(this.element[0], c) : true)) {
						this.direction = h == 1 ? "down" : "up";
						if (this.options.tolerance == "pointer" || this._intersectsWithSides(e)) {
							this._rearrange(f, e)
						} else {
							break
						}
						this._trigger("change", f, this._uiHash());
						break
					}
				}
				this._contactContainers(f);
				if (a.ui.ddmanager) {
					a.ui.ddmanager.drag(this, f)
				}
				this._trigger("sort", f, this._uiHash());
				this.lastPositionAbs = this.positionAbs;
				return false
			},
			_mouseStop : function (c, d) {
				if (!c) {
					return
				}
				if (a.ui.ddmanager && !this.options.dropBehaviour) {
					a.ui.ddmanager.drop(this, c)
				}
				if (this.options.revert) {
					var b = this;
					var e = b.placeholder.offset();
					b.reverting = true;
					a(this.helper).animate({
						left : e.left - this.offset.parent.left - b.margins.left + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollLeft),
						top : e.top - this.offset.parent.top - b.margins.top + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollTop)
					}, parseInt(this.options.revert, 10) || 500, function () {
						b._clear(c)
					})
				} else {
					this._clear(c, d)
				}
				return false
			},
			cancel : function () {
				var b = this;
				if (this.dragging) {
					this._mouseUp();
					if (this.options.helper == "original") {
						this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")
					} else {
						this.currentItem.show()
					}
					for (var c = this.containers.length - 1; c >= 0; c--) {
						this.containers[c]._trigger("deactivate", null, b._uiHash(this));
						if (this.containers[c].containerCache.over) {
							this.containers[c]._trigger("out", null, b._uiHash(this));
							this.containers[c].containerCache.over = 0
						}
					}
				}
				if (this.placeholder[0].parentNode) {
					this.placeholder[0].parentNode.removeChild(this.placeholder[0])
				}
				if (this.options.helper != "original" && this.helper && this.helper[0].parentNode) {
					this.helper.remove()
				}
				a.extend(this, {
					helper : null,
					dragging : false,
					reverting : false,
					_noFinalSort : null
				});
				if (this.domPosition.prev) {
					a(this.domPosition.prev).after(this.currentItem)
				} else {
					a(this.domPosition.parent).prepend(this.currentItem)
				}
				return true
			},
			serialize : function (d) {
				var b = this._getItemsAsjQuery(d && d.connected);
				var c = [];
				d = d || {};
				a(b).each(function () {
					var e = (a(d.item || this).attr(d.attribute || "id") || "").match(d.expression || (/(.+)[-=_](.+)/));
					if (e) {
						c.push((d.key || e[1] + "[]") + "=" + (d.key && d.expression ? e[1] : e[2]))
					}
				});
				return c.join("&")
			},
			toArray : function (d) {
				var b = this._getItemsAsjQuery(d && d.connected);
				var c = [];
				d = d || {};
				b.each(function () {
					c.push(a(d.item || this).attr(d.attribute || "id") || "")
				});
				return c
			},
			_intersectsWith : function (m) {
				var e = this.positionAbs.left,
				d = e + this.helperProportions.width,
				k = this.positionAbs.top,
				j = k + this.helperProportions.height;
				var f = m.left,
				c = f + m.width,
				n = m.top,
				i = n + m.height;
				var o = this.offset.click.top,
				h = this.offset.click.left;
				var g = (k + o) > n && (k + o) < i && (e + h) > f && (e + h) < c;
				if (this.options.tolerance == "pointer" || this.options.forcePointerForContainers || (this.options.tolerance != "pointer" && this.helperProportions[this.floating ? "width" : "height"] > m[this.floating ? "width" : "height"])) {
					return g
				} else {
					return (f < e + (this.helperProportions.width / 2) && d - (this.helperProportions.width / 2) < c && n < k + (this.helperProportions.height / 2) && j - (this.helperProportions.height / 2) < i)
				}
			},
			_intersectsWithPointer : function (d) {
				var e = a.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, d.top, d.height),
				c = a.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, d.left, d.width),
				g = e && c,
				b = this._getDragVerticalDirection(),
				f = this._getDragHorizontalDirection();
				if (!g) {
					return false
				}
				return this.floating ? (((f && f == "right") || b == "down") ? 2 : 1) : (b && (b == "down" ? 2 : 1))
			},
			_intersectsWithSides : function (e) {
				var c = a.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, e.top + (e.height / 2), e.height),
				d = a.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, e.left + (e.width / 2), e.width),
				b = this._getDragVerticalDirection(),
				f = this._getDragHorizontalDirection();
				if (this.floating && f) {
					return ((f == "right" && d) || (f == "left" && !d))
				} else {
					return b && ((b == "down" && c) || (b == "up" && !c))
				}
			},
			_getDragVerticalDirection : function () {
				var b = this.positionAbs.top - this.lastPositionAbs.top;
				return b != 0 && (b > 0 ? "down" : "up")
			},
			_getDragHorizontalDirection : function () {
				var b = this.positionAbs.left - this.lastPositionAbs.left;
				return b != 0 && (b > 0 ? "right" : "left")
			},
			refresh : function (b) {
				this._refreshItems(b);
				this.refreshPositions()
			},
			_connectWith : function () {
				var b = this.options;
				return b.connectWith.constructor == String ? [b.connectWith] : b.connectWith
			},
			_getItemsAsjQuery : function (b) {
				var l = this;
				var g = [];
				var e = [];
				var h = this._connectWith();
				if (h && b) {
					for (var d = h.length - 1; d >= 0; d--) {
						var k = a(h[d]);
						for (var c = k.length - 1; c >= 0; c--) {
							var f = a.data(k[c], "sortable");
							if (f && f != this && !f.options.disabled) {
								e.push([a.isFunction(f.options.items) ? f.options.items.call(f.element) : a(f.options.items, f.element).not(".ui-sortable-helper"), f])
							}
						}
					}
				}
				e.push([a.isFunction(this.options.items) ? this.options.items.call(this.element, null, {
							options : this.options,
							item : this.currentItem
						}) : a(this.options.items, this.element).not(".ui-sortable-helper"), this]);
				for (var d = e.length - 1; d >= 0; d--) {
					e[d][0].each(function () {
						g.push(this)
					})
				}
				return a(g)
			},
			_removeCurrentsFromItems : function () {
				var d = this.currentItem.find(":data(sortable-item)");
				for (var c = 0; c < this.items.length; c++) {
					for (var b = 0; b < d.length; b++) {
						if (d[b] == this.items[c].item[0]) {
							this.items.splice(c, 1)
						}
					}
				}
			},
			_refreshItems : function (b) {
				this.items = [];
				this.containers = [this];
				var h = this.items;
				var p = this;
				var f = [[a.isFunction(this.options.items) ? this.options.items.call(this.element[0], b, {
							item : this.currentItem
						}) : a(this.options.items, this.element), this]];
				var l = this._connectWith();
				if (l) {
					for (var e = l.length - 1; e >= 0; e--) {
						var m = a(l[e]);
						for (var d = m.length - 1; d >= 0; d--) {
							var g = a.data(m[d], "sortable");
							if (g && g != this && !g.options.disabled) {
								f.push([a.isFunction(g.options.items) ? g.options.items.call(g.element[0], b, {
											item : this.currentItem
										}) : a(g.options.items, g.element), g]);
								this.containers.push(g)
							}
						}
					}
				}
				for (var e = f.length - 1; e >= 0; e--) {
					var k = f[e][1];
					var c = f[e][0];
					for (var d = 0, n = c.length; d < n; d++) {
						var o = a(c[d]);
						o.data("sortable-item", k);
						h.push({
							item : o,
							instance : k,
							width : 0,
							height : 0,
							left : 0,
							top : 0
						})
					}
				}
			},
			refreshPositions : function (b) {
				if (this.offsetParent && this.helper) {
					this.offset.parent = this._getParentOffset()
				}
				for (var d = this.items.length - 1; d >= 0; d--) {
					var e = this.items[d];
					if (e.instance != this.currentContainer && this.currentContainer && e.item[0] != this.currentItem[0]) {
						continue
					}
					var c = this.options.toleranceElement ? a(this.options.toleranceElement, e.item) : e.item;
					if (!b) {
						e.width = c.outerWidth();
						e.height = c.outerHeight()
					}
					var f = c.offset();
					e.left = f.left;
					e.top = f.top
				}
				if (this.options.custom && this.options.custom.refreshContainers) {
					this.options.custom.refreshContainers.call(this)
				} else {
					for (var d = this.containers.length - 1; d >= 0; d--) {
						var f = this.containers[d].element.offset();
						this.containers[d].containerCache.left = f.left;
						this.containers[d].containerCache.top = f.top;
						this.containers[d].containerCache.width = this.containers[d].element.outerWidth();
						this.containers[d].containerCache.height = this.containers[d].element.outerHeight()
					}
				}
			},
			_createPlaceholder : function (d) {
				var b = d || this,
				e = b.options;
				if (!e.placeholder || e.placeholder.constructor == String) {
					var c = e.placeholder;
					e.placeholder = {
						element : function () {
							var f = a(document.createElement(b.currentItem[0].nodeName)).addClass(c || b.currentItem[0].className + " ui-sortable-placeholder").removeClass("ui-sortable-helper")[0];
							if (!c) {
								f.style.visibility = "hidden"
							}
							return f
						},
						update : function (f, g) {
							if (c && !e.forcePlaceholderSize) {
								return
							}
							if (!g.height()) {
								g.height(b.currentItem.innerHeight() - parseInt(b.currentItem.css("paddingTop") || 0, 10) - parseInt(b.currentItem.css("paddingBottom") || 0, 10))
							}
							if (!g.width()) {
								g.width(b.currentItem.innerWidth() - parseInt(b.currentItem.css("paddingLeft") || 0, 10) - parseInt(b.currentItem.css("paddingRight") || 0, 10))
							}
						}
					}
				}
				b.placeholder = a(e.placeholder.element.call(b.element, b.currentItem));
				b.currentItem.after(b.placeholder);
				e.placeholder.update(b, b.placeholder)
			},
			_contactContainers : function (d) {
				for (var c = this.containers.length - 1; c >= 0; c--) {
					if (this._intersectsWith(this.containers[c].containerCache)) {
						if (!this.containers[c].containerCache.over) {
							if (this.currentContainer != this.containers[c]) {
								var h = 10000;
								var g = null;
								var e = this.positionAbs[this.containers[c].floating ? "left" : "top"];
								for (var b = this.items.length - 1; b >= 0; b--) {
									if (!a.ui.contains(this.containers[c].element[0], this.items[b].item[0])) {
										continue
									}
									var f = this.items[b][this.containers[c].floating ? "left" : "top"];
									if (Math.abs(f - e) < h) {
										h = Math.abs(f - e);
										g = this.items[b]
									}
								}
								if (!g && !this.options.dropOnEmpty) {
									continue
								}
								this.currentContainer = this.containers[c];
								g ? this._rearrange(d, g, null, true) : this._rearrange(d, null, this.containers[c].element, true);
								this._trigger("change", d, this._uiHash());
								this.containers[c]._trigger("change", d, this._uiHash(this));
								this.options.placeholder.update(this.currentContainer, this.placeholder)
							}
							this.containers[c]._trigger("over", d, this._uiHash(this));
							this.containers[c].containerCache.over = 1
						}
					} else {
						if (this.containers[c].containerCache.over) {
							this.containers[c]._trigger("out", d, this._uiHash(this));
							this.containers[c].containerCache.over = 0
						}
					}
				}
			},
			_createHelper : function (c) {
				var d = this.options;
				var b = a.isFunction(d.helper) ? a(d.helper.apply(this.element[0], [c, this.currentItem])) : (d.helper == "clone" ? this.currentItem.clone() : this.currentItem);
				if (!b.parents("body").length) {
					a(d.appendTo != "parent" ? d.appendTo : this.currentItem[0].parentNode)[0].appendChild(b[0])
				}
				if (b[0] == this.currentItem[0]) {
					this._storedCSS = {
						width : this.currentItem[0].style.width,
						height : this.currentItem[0].style.height,
						position : this.currentItem.css("position"),
						top : this.currentItem.css("top"),
						left : this.currentItem.css("left")
					}
				}
				if (b[0].style.width == "" || d.forceHelperSize) {
					b.width(this.currentItem.width())
				}
				if (b[0].style.height == "" || d.forceHelperSize) {
					b.height(this.currentItem.height())
				}
				return b
			},
			_adjustOffsetFromHelper : function (b) {
				if (b.left != undefined) {
					this.offset.click.left = b.left + this.margins.left
				}
				if (b.right != undefined) {
					this.offset.click.left = this.helperProportions.width - b.right + this.margins.left
				}
				if (b.top != undefined) {
					this.offset.click.top = b.top + this.margins.top
				}
				if (b.bottom != undefined) {
					this.offset.click.top = this.helperProportions.height - b.bottom + this.margins.top
				}
			},
			_getParentOffset : function () {
				this.offsetParent = this.helper.offsetParent();
				var b = this.offsetParent.offset();
				if (this.cssPosition == "absolute" && this.scrollParent[0] != document && a.ui.contains(this.scrollParent[0], this.offsetParent[0])) {
					b.left += this.scrollParent.scrollLeft();
					b.top += this.scrollParent.scrollTop()
				}
				if ((this.offsetParent[0] == document.body) || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == "html" && a.browser.msie)) {
					b = {
						top : 0,
						left : 0
					}
				}
				return {
					top : b.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
					left : b.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
				}
			},
			_getRelativeOffset : function () {
				if (this.cssPosition == "relative") {
					var b = this.currentItem.position();
					return {
						top : b.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
						left : b.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
					}
				} else {
					return {
						top : 0,
						left : 0
					}
				}
			},
			_cacheMargins : function () {
				this.margins = {
					left : (parseInt(this.currentItem.css("marginLeft"), 10) || 0),
					top : (parseInt(this.currentItem.css("marginTop"), 10) || 0)
				}
			},
			_cacheHelperProportions : function () {
				this.helperProportions = {
					width : this.helper.outerWidth(),
					height : this.helper.outerHeight()
				}
			},
			_setContainment : function () {
				var e = this.options;
				if (e.containment == "parent") {
					e.containment = this.helper[0].parentNode
				}
				if (e.containment == "document" || e.containment == "window") {
					this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, a(e.containment == "document" ? document : window).width() - this.helperProportions.width - this.margins.left, (a(e.containment == "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]
				}
				if (!(/^(document|window|parent)$/).test(e.containment)) {
					var c = a(e.containment)[0];
					var d = a(e.containment).offset();
					var b = (a(c).css("overflow") != "hidden");
					this.containment = [d.left + (parseInt(a(c).css("borderLeftWidth"), 10) || 0) + (parseInt(a(c).css("paddingLeft"), 10) || 0) - this.margins.left, d.top + (parseInt(a(c).css("borderTopWidth"), 10) || 0) + (parseInt(a(c).css("paddingTop"), 10) || 0) - this.margins.top, d.left + (b ? Math.max(c.scrollWidth, c.offsetWidth) : c.offsetWidth) - (parseInt(a(c).css("borderLeftWidth"), 10) || 0) - (parseInt(a(c).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, d.top + (b ? Math.max(c.scrollHeight, c.offsetHeight) : c.offsetHeight) - (parseInt(a(c).css("borderTopWidth"), 10) || 0) - (parseInt(a(c).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top]
				}
			},
			_convertPositionTo : function (f, h) {
				if (!h) {
					h = this.position
				}
				var c = f == "absolute" ? 1 : -1;
				var e = this.options,
				b = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && a.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
				g = (/(html|body)/i).test(b[0].tagName);
				return {
					top : (h.top + this.offset.relative.top * c + this.offset.parent.top * c - (a.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : (g ? 0 : b.scrollTop())) * c)),
					left : (h.left + this.offset.relative.left * c + this.offset.parent.left * c - (a.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : g ? 0 : b.scrollLeft()) * c))
				}
			},
			_generatePosition : function (e) {
				var h = this.options,
				b = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && a.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
				i = (/(html|body)/i).test(b[0].tagName);
				if (this.cssPosition == "relative" && !(this.scrollParent[0] != document && this.scrollParent[0] != this.offsetParent[0])) {
					this.offset.relative = this._getRelativeOffset()
				}
				var d = e.pageX;
				var c = e.pageY;
				if (this.originalPosition) {
					if (this.containment) {
						if (e.pageX - this.offset.click.left < this.containment[0]) {
							d = this.containment[0] + this.offset.click.left
						}
						if (e.pageY - this.offset.click.top < this.containment[1]) {
							c = this.containment[1] + this.offset.click.top
						}
						if (e.pageX - this.offset.click.left > this.containment[2]) {
							d = this.containment[2] + this.offset.click.left
						}
						if (e.pageY - this.offset.click.top > this.containment[3]) {
							c = this.containment[3] + this.offset.click.top
						}
					}
					if (h.grid) {
						var g = this.originalPageY + Math.round((c - this.originalPageY) / h.grid[1]) * h.grid[1];
						c = this.containment ? (!(g - this.offset.click.top < this.containment[1] || g - this.offset.click.top > this.containment[3]) ? g : (!(g - this.offset.click.top < this.containment[1]) ? g - h.grid[1] : g + h.grid[1])) : g;
						var f = this.originalPageX + Math.round((d - this.originalPageX) / h.grid[0]) * h.grid[0];
						d = this.containment ? (!(f - this.offset.click.left < this.containment[0] || f - this.offset.click.left > this.containment[2]) ? f : (!(f - this.offset.click.left < this.containment[0]) ? f - h.grid[0] : f + h.grid[0])) : f
					}
				}
				return {
					top : (c - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + (a.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : (i ? 0 : b.scrollTop())))),
					left : (d - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + (a.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : i ? 0 : b.scrollLeft())))
				}
			},
			_rearrange : function (g, f, c, e) {
				c ? c[0].appendChild(this.placeholder[0]) : f.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction == "down" ? f.item[0] : f.item[0].nextSibling));
				this.counter = this.counter ? ++this.counter : 1;
				var d = this,
				b = this.counter;
				window.setTimeout(function () {
					if (b == d.counter) {
						d.refreshPositions(!e)
					}
				}, 0)
			},
			_clear : function (d, e) {
				this.reverting = false;
				var f = [],
				b = this;
				if (!this._noFinalSort && this.currentItem[0].parentNode) {
					this.placeholder.before(this.currentItem)
				}
				this._noFinalSort = null;
				if (this.helper[0] == this.currentItem[0]) {
					for (var c in this._storedCSS) {
						if (this._storedCSS[c] == "auto" || this._storedCSS[c] == "static") {
							this._storedCSS[c] = ""
						}
					}
					this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")
				} else {
					this.currentItem.show()
				}
				if (this.fromOutside && !e) {
					f.push(function (g) {
						this._trigger("receive", g, this._uiHash(this.fromOutside))
					})
				}
				if ((this.fromOutside || this.domPosition.prev != this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent != this.currentItem.parent()[0]) && !e) {
					f.push(function (g) {
						this._trigger("update", g, this._uiHash())
					})
				}
				if (!a.ui.contains(this.element[0], this.currentItem[0])) {
					if (!e) {
						f.push(function (g) {
							this._trigger("remove", g, this._uiHash())
						})
					}
					for (var c = this.containers.length - 1; c >= 0; c--) {
						if (a.ui.contains(this.containers[c].element[0], this.currentItem[0]) && !e) {
							f.push((function (g) {
									return function (h) {
										g._trigger("receive", h, this._uiHash(this))
									}
								}).call(this, this.containers[c]));
							f.push((function (g) {
									return function (h) {
										g._trigger("update", h, this._uiHash(this))
									}
								}).call(this, this.containers[c]))
						}
					}
				}
				for (var c = this.containers.length - 1; c >= 0; c--) {
					if (!e) {
						f.push((function (g) {
								return function (h) {
									g._trigger("deactivate", h, this._uiHash(this))
								}
							}).call(this, this.containers[c]))
					}
					if (this.containers[c].containerCache.over) {
						f.push((function (g) {
								return function (h) {
									g._trigger("out", h, this._uiHash(this))
								}
							}).call(this, this.containers[c]));
						this.containers[c].containerCache.over = 0
					}
				}
				if (this._storedCursor) {
					a("body").css("cursor", this._storedCursor)
				}
				if (this._storedOpacity) {
					this.helper.css("opacity", this._storedOpacity)
				}
				if (this._storedZIndex) {
					this.helper.css("zIndex", this._storedZIndex == "auto" ? "" : this._storedZIndex)
				}
				this.dragging = false;
				if (this.cancelHelperRemoval) {
					if (!e) {
						this._trigger("beforeStop", d, this._uiHash());
						for (var c = 0; c < f.length; c++) {
							f[c].call(this, d)
						}
						this._trigger("stop", d, this._uiHash())
					}
					return false
				}
				if (!e) {
					this._trigger("beforeStop", d, this._uiHash())
				}
				this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
				if (this.helper[0] != this.currentItem[0]) {
					this.helper.remove()
				}
				this.helper = null;
				if (!e) {
					for (var c = 0; c < f.length; c++) {
						f[c].call(this, d)
					}
					this._trigger("stop", d, this._uiHash())
				}
				this.fromOutside = false;
				return true
			},
			_trigger : function () {
				if (a.widget.prototype._trigger.apply(this, arguments) === false) {
					this.cancel()
				}
			},
			_uiHash : function (c) {
				var b = c || this;
				return {
					helper : b.helper,
					placeholder : b.placeholder || a([]),
					position : b.position,
					absolutePosition : b.positionAbs,
					offset : b.positionAbs,
					item : b.currentItem,
					sender : c ? c.element : null
				}
			}
		}));
	a.extend(a.ui.sortable, {
		getter : "serialize toArray",
		version : "1.7",
		eventPrefix : "sort",
		defaults : {
			appendTo : "parent",
			axis : false,
			cancel : ":input,option",
			connectWith : false,
			containment : false,
			cursor : "auto",
			cursorAt : false,
			delay : 0,
			distance : 1,
			dropOnEmpty : true,
			forcePlaceholderSize : false,
			forceHelperSize : false,
			grid : false,
			handle : false,
			helper : "original",
			items : "> *",
			opacity : false,
			placeholder : false,
			revert : false,
			scroll : true,
			scrollSensitivity : 20,
			scrollSpeed : 20,
			scope : "default",
			tolerance : "intersect",
			zIndex : 1000
		}
	})
})(jQuery);
jQuery.effects || (function (d) {
	d.effects = {
		version : "1.7",
		save : function (g, h) {
			for (var f = 0; f < h.length; f++) {
				if (h[f] !== null) {
					g.data("ec.storage." + h[f], g[0].style[h[f]])
				}
			}
		},
		restore : function (g, h) {
			for (var f = 0; f < h.length; f++) {
				if (h[f] !== null) {
					g.css(h[f], g.data("ec.storage." + h[f]))
				}
			}
		},
		setMode : function (f, g) {
			if (g == "toggle") {
				g = f.is(":hidden") ? "show" : "hide"
			}
			return g
		},
		getBaseline : function (g, h) {
			var i,
			f;
			switch (g[0]) {
			case "top":
				i = 0;
				break;
			case "middle":
				i = 0.5;
				break;
			case "bottom":
				i = 1;
				break;
			default:
				i = g[0] / h.height
			}
			switch (g[1]) {
			case "left":
				f = 0;
				break;
			case "center":
				f = 0.5;
				break;
			case "right":
				f = 1;
				break;
			default:
				f = g[1] / h.width
			}
			return {
				x : f,
				y : i
			}
		},
		createWrapper : function (f) {
			if (f.parent().is(".ui-effects-wrapper")) {
				return f.parent()
			}
			var g = {
				width : f.outerWidth(true),
				height : f.outerHeight(true),
				"float" : f.css("float")
			};
			f.wrap('<div class="ui-effects-wrapper" style="font-size:100%;background:transparent;border:none;margin:0;padding:0"></div>');
			var j = f.parent();
			if (f.css("position") == "static") {
				j.css({
					position : "relative"
				});
				f.css({
					position : "relative"
				})
			} else {
				var i = f.css("top");
				if (isNaN(parseInt(i, 10))) {
					i = "auto"
				}
				var h = f.css("left");
				if (isNaN(parseInt(h, 10))) {
					h = "auto"
				}
				j.css({
					position : f.css("position"),
					top : i,
					left : h,
					zIndex : f.css("z-index")
				}).show();
				f.css({
					position : "relative",
					top : 0,
					left : 0
				})
			}
			j.css(g);
			return j
		},
		removeWrapper : function (f) {
			if (f.parent().is(".ui-effects-wrapper")) {
				return f.parent().replaceWith(f)
			}
			return f
		},
		setTransition : function (g, i, f, h) {
			h = h || {};
			d.each(i, function (k, j) {
				unit = g.cssUnit(j);
				if (unit[0] > 0) {
					h[j] = unit[0] * f + unit[1]
				}
			});
			return h
		},
		animateClass : function (h, i, k, j) {
			var f = (typeof k == "function" ? k : (j ? j : null));
			var g = (typeof k == "string" ? k : null);
			return this.each(function () {
				var q = {};
				var o = d(this);
				var p = o.attr("style") || "";
				if (typeof p == "object") {
					p = p.cssText
				}
				if (h.toggle) {
					o.hasClass(h.toggle) ? h.remove = h.toggle : h.add = h.toggle
				}
				var l = d.extend({}, (document.defaultView ? document.defaultView.getComputedStyle(this, null) : this.currentStyle));
				if (h.add) {
					o.addClass(h.add)
				}
				if (h.remove) {
					o.removeClass(h.remove)
				}
				var m = d.extend({}, (document.defaultView ? document.defaultView.getComputedStyle(this, null) : this.currentStyle));
				if (h.add) {
					o.removeClass(h.add)
				}
				if (h.remove) {
					o.addClass(h.remove)
				}
				for (var r in m) {
					if (typeof m[r] != "function" && m[r] && r.indexOf("Moz") == -1 && r.indexOf("length") == -1 && m[r] != l[r] && (r.match(/color/i) || (!r.match(/color/i) && !isNaN(parseInt(m[r], 10)))) && (l.position != "static" || (l.position == "static" && !r.match(/left|top|bottom|right/)))) {
						q[r] = m[r]
					}
				}
				o.animate(q, i, g, function () {
					if (typeof d(this).attr("style") == "object") {
						d(this).attr("style")["cssText"] = "";
						d(this).attr("style")["cssText"] = p
					} else {
						d(this).attr("style", p)
					}
					if (h.add) {
						d(this).addClass(h.add)
					}
					if (h.remove) {
						d(this).removeClass(h.remove)
					}
					if (f) {
						f.apply(this, arguments)
					}
				})
			})
		}
	};
	function c(g, f) {
		var i = g[1] && g[1].constructor == Object ? g[1] : {};
		if (f) {
			i.mode = f
		}
		var h = g[1] && g[1].constructor != Object ? g[1] : (i.duration ? i.duration : g[2]);
		h = d.fx.off ? 0 : typeof h === "number" ? h : d.fx.speeds[h] || d.fx.speeds._default;
		var j = i.callback || (d.isFunction(g[1]) && g[1]) || (d.isFunction(g[2]) && g[2]) || (d.isFunction(g[3]) && g[3]);
		return [g[0], i, h, j]
	}
	d.fn.extend({
		_show : d.fn.show,
		_hide : d.fn.hide,
		__toggle : d.fn.toggle,
		_addClass : d.fn.addClass,
		_removeClass : d.fn.removeClass,
		_toggleClass : d.fn.toggleClass,
		effect : function (g, f, h, i) {
			return d.effects[g] ? d.effects[g].call(this, {
				method : g,
				options : f || {},
				duration : h,
				callback : i
			}) : null
		},
		show : function () {
			if (!arguments[0] || (arguments[0].constructor == Number || (/(slow|normal|fast)/).test(arguments[0]))) {
				return this._show.apply(this, arguments)
			} else {
				return this.effect.apply(this, c(arguments, "show"))
			}
		},
		hide : function () {
			if (!arguments[0] || (arguments[0].constructor == Number || (/(slow|normal|fast)/).test(arguments[0]))) {
				return this._hide.apply(this, arguments)
			} else {
				return this.effect.apply(this, c(arguments, "hide"))
			}
		},
		toggle : function () {
			if (!arguments[0] || (arguments[0].constructor == Number || (/(slow|normal|fast)/).test(arguments[0])) || (arguments[0].constructor == Function)) {
				return this.__toggle.apply(this, arguments)
			} else {
				return this.effect.apply(this, c(arguments, "toggle"))
			}
		},
		addClass : function (g, f, i, h) {
			return f ? d.effects.animateClass.apply(this, [{
						add : g
					}, f, i, h]) : this._addClass(g)
		},
		removeClass : function (g, f, i, h) {
			return f ? d.effects.animateClass.apply(this, [{
						remove : g
					}, f, i, h]) : this._removeClass(g)
		},
		toggleClass : function (g, f, i, h) {
			return ((typeof f !== "boolean") && f) ? d.effects.animateClass.apply(this, [{
						toggle : g
					}, f, i, h]) : this._toggleClass(g, f)
		},
		morph : function (f, h, g, j, i) {
			return d.effects.animateClass.apply(this, [{
						add : h,
						remove : f
					}, g, j, i])
		},
		switchClass : function () {
			return this.morph.apply(this, arguments)
		},
		cssUnit : function (f) {
			var g = this.css(f),
			h = [];
			d.each(["em", "px", "%", "pt"], function (j, k) {
				if (g.indexOf(k) > 0) {
					h = [parseFloat(g), k]
				}
			});
			return h
		}
	});
	d.each(["backgroundColor", "borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor", "color", "outlineColor"], function (g, f) {
		d.fx.step[f] = function (h) {
			if (h.state == 0) {
				h.start = e(h.elem, f);
				h.end = b(h.end)
			}
			h.elem.style[f] = "rgb(" + [Math.max(Math.min(parseInt((h.pos * (h.end[0] - h.start[0])) + h.start[0], 10), 255), 0), Math.max(Math.min(parseInt((h.pos * (h.end[1] - h.start[1])) + h.start[1], 10), 255), 0), Math.max(Math.min(parseInt((h.pos * (h.end[2] - h.start[2])) + h.start[2], 10), 255), 0)].join(",") + ")"
		}
	});
	function b(g) {
		var f;
		if (g && g.constructor == Array && g.length == 3) {
			return g
		}
		if (f = /rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(g)) {
			return [parseInt(f[1], 10), parseInt(f[2], 10), parseInt(f[3], 10)]
		}
		if (f = /rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec(g)) {
			return [parseFloat(f[1]) * 2.55, parseFloat(f[2]) * 2.55, parseFloat(f[3]) * 2.55]
		}
		if (f = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(g)) {
			return [parseInt(f[1], 16), parseInt(f[2], 16), parseInt(f[3], 16)]
		}
		if (f = /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(g)) {
			return [parseInt(f[1] + f[1], 16), parseInt(f[2] + f[2], 16), parseInt(f[3] + f[3], 16)]
		}
		if (f = /rgba\(0, 0, 0, 0\)/.exec(g)) {
			return a.transparent
		}
		return a[d.trim(g).toLowerCase()]
	}
	function e(h, f) {
		var g;
		do {
			g = d.curCSS(h, f);
			if (g != "" && g != "transparent" || d.nodeName(h, "body")) {
				break
			}
			f = "backgroundColor"
		} while (h = h.parentNode);
		return b(g)
	}
	var a = {
		aqua : [0, 255, 255],
		azure : [240, 255, 255],
		beige : [245, 245, 220],
		black : [0, 0, 0],
		blue : [0, 0, 255],
		brown : [165, 42, 42],
		cyan : [0, 255, 255],
		darkblue : [0, 0, 139],
		darkcyan : [0, 139, 139],
		darkgrey : [169, 169, 169],
		darkgreen : [0, 100, 0],
		darkkhaki : [189, 183, 107],
		darkmagenta : [139, 0, 139],
		darkolivegreen : [85, 107, 47],
		darkorange : [255, 140, 0],
		darkorchid : [153, 50, 204],
		darkred : [139, 0, 0],
		darksalmon : [233, 150, 122],
		darkviolet : [148, 0, 211],
		fuchsia : [255, 0, 255],
		gold : [255, 215, 0],
		green : [0, 128, 0],
		indigo : [75, 0, 130],
		khaki : [240, 230, 140],
		lightblue : [173, 216, 230],
		lightcyan : [224, 255, 255],
		lightgreen : [144, 238, 144],
		lightgrey : [211, 211, 211],
		lightpink : [255, 182, 193],
		lightyellow : [255, 255, 224],
		lime : [0, 255, 0],
		magenta : [255, 0, 255],
		maroon : [128, 0, 0],
		navy : [0, 0, 128],
		olive : [128, 128, 0],
		orange : [255, 165, 0],
		pink : [255, 192, 203],
		purple : [128, 0, 128],
		violet : [128, 0, 128],
		red : [255, 0, 0],
		silver : [192, 192, 192],
		white : [255, 255, 255],
		yellow : [255, 255, 0],
		transparent : [255, 255, 255]
	};
	d.easing.jswing = d.easing.swing;
	d.extend(d.easing, {
		def : "easeOutQuad",
		swing : function (g, h, f, j, i) {
			return d.easing[d.easing.def](g, h, f, j, i)
		},
		easeInQuad : function (g, h, f, j, i) {
			return j * (h /= i) * h + f
		},
		easeOutQuad : function (g, h, f, j, i) {
			return -j * (h /= i) * (h - 2) + f
		},
		easeInOutQuad : function (g, h, f, j, i) {
			if ((h /= i / 2) < 1) {
				return j / 2 * h * h + f
			}
			return -j / 2 * ((--h) * (h - 2) - 1) + f
		},
		easeInCubic : function (g, h, f, j, i) {
			return j * (h /= i) * h * h + f
		},
		easeOutCubic : function (g, h, f, j, i) {
			return j * ((h = h / i - 1) * h * h + 1) + f
		},
		easeInOutCubic : function (g, h, f, j, i) {
			if ((h /= i / 2) < 1) {
				return j / 2 * h * h * h + f
			}
			return j / 2 * ((h -= 2) * h * h + 2) + f
		},
		easeInQuart : function (g, h, f, j, i) {
			return j * (h /= i) * h * h * h + f
		},
		easeOutQuart : function (g, h, f, j, i) {
			return -j * ((h = h / i - 1) * h * h * h - 1) + f
		},
		easeInOutQuart : function (g, h, f, j, i) {
			if ((h /= i / 2) < 1) {
				return j / 2 * h * h * h * h + f
			}
			return -j / 2 * ((h -= 2) * h * h * h - 2) + f
		},
		easeInQuint : function (g, h, f, j, i) {
			return j * (h /= i) * h * h * h * h + f
		},
		easeOutQuint : function (g, h, f, j, i) {
			return j * ((h = h / i - 1) * h * h * h * h + 1) + f
		},
		easeInOutQuint : function (g, h, f, j, i) {
			if ((h /= i / 2) < 1) {
				return j / 2 * h * h * h * h * h + f
			}
			return j / 2 * ((h -= 2) * h * h * h * h + 2) + f
		},
		easeInSine : function (g, h, f, j, i) {
			return -j * Math.cos(h / i * (Math.PI / 2)) + j + f
		},
		easeOutSine : function (g, h, f, j, i) {
			return j * Math.sin(h / i * (Math.PI / 2)) + f
		},
		easeInOutSine : function (g, h, f, j, i) {
			return -j / 2 * (Math.cos(Math.PI * h / i) - 1) + f
		},
		easeInExpo : function (g, h, f, j, i) {
			return (h == 0) ? f : j * Math.pow(2, 10 * (h / i - 1)) + f
		},
		easeOutExpo : function (g, h, f, j, i) {
			return (h == i) ? f + j : j * (-Math.pow(2, -10 * h / i) + 1) + f
		},
		easeInOutExpo : function (g, h, f, j, i) {
			if (h == 0) {
				return f
			}
			if (h == i) {
				return f + j
			}
			if ((h /= i / 2) < 1) {
				return j / 2 * Math.pow(2, 10 * (h - 1)) + f
			}
			return j / 2 * (-Math.pow(2, -10 * --h) + 2) + f
		},
		easeInCirc : function (g, h, f, j, i) {
			return -j * (Math.sqrt(1 - (h /= i) * h) - 1) + f
		},
		easeOutCirc : function (g, h, f, j, i) {
			return j * Math.sqrt(1 - (h = h / i - 1) * h) + f
		},
		easeInOutCirc : function (g, h, f, j, i) {
			if ((h /= i / 2) < 1) {
				return -j / 2 * (Math.sqrt(1 - h * h) - 1) + f
			}
			return j / 2 * (Math.sqrt(1 - (h -= 2) * h) + 1) + f
		},
		easeInElastic : function (g, i, f, m, l) {
			var j = 1.70158;
			var k = 0;
			var h = m;
			if (i == 0) {
				return f
			}
			if ((i /= l) == 1) {
				return f + m
			}
			if (!k) {
				k = l * 0.3
			}
			if (h < Math.abs(m)) {
				h = m;
				var j = k / 4
			} else {
				var j = k / (2 * Math.PI) * Math.asin(m / h)
			}
			return  - (h * Math.pow(2, 10 * (i -= 1)) * Math.sin((i * l - j) * (2 * Math.PI) / k)) + f
		},
		easeOutElastic : function (g, i, f, m, l) {
			var j = 1.70158;
			var k = 0;
			var h = m;
			if (i == 0) {
				return f
			}
			if ((i /= l) == 1) {
				return f + m
			}
			if (!k) {
				k = l * 0.3
			}
			if (h < Math.abs(m)) {
				h = m;
				var j = k / 4
			} else {
				var j = k / (2 * Math.PI) * Math.asin(m / h)
			}
			return h * Math.pow(2, -10 * i) * Math.sin((i * l - j) * (2 * Math.PI) / k) + m + f
		},
		easeInOutElastic : function (g, i, f, m, l) {
			var j = 1.70158;
			var k = 0;
			var h = m;
			if (i == 0) {
				return f
			}
			if ((i /= l / 2) == 2) {
				return f + m
			}
			if (!k) {
				k = l * (0.3 * 1.5)
			}
			if (h < Math.abs(m)) {
				h = m;
				var j = k / 4
			} else {
				var j = k / (2 * Math.PI) * Math.asin(m / h)
			}
			if (i < 1) {
				return -0.5 * (h * Math.pow(2, 10 * (i -= 1)) * Math.sin((i * l - j) * (2 * Math.PI) / k)) + f
			}
			return h * Math.pow(2, -10 * (i -= 1)) * Math.sin((i * l - j) * (2 * Math.PI) / k) * 0.5 + m + f
		},
		easeInBack : function (g, h, f, k, j, i) {
			if (i == undefined) {
				i = 1.70158
			}
			return k * (h /= j) * h * ((i + 1) * h - i) + f
		},
		easeOutBack : function (g, h, f, k, j, i) {
			if (i == undefined) {
				i = 1.70158
			}
			return k * ((h = h / j - 1) * h * ((i + 1) * h + i) + 1) + f
		},
		easeInOutBack : function (g, h, f, k, j, i) {
			if (i == undefined) {
				i = 1.70158
			}
			if ((h /= j / 2) < 1) {
				return k / 2 * (h * h * (((i *= (1.525)) + 1) * h - i)) + f
			}
			return k / 2 * ((h -= 2) * h * (((i *= (1.525)) + 1) * h + i) + 2) + f
		},
		easeInBounce : function (g, h, f, j, i) {
			return j - d.easing.easeOutBounce(g, i - h, 0, j, i) + f
		},
		easeOutBounce : function (g, h, f, j, i) {
			if ((h /= i) < (1 / 2.75)) {
				return j * (7.5625 * h * h) + f
			} else {
				if (h < (2 / 2.75)) {
					return j * (7.5625 * (h -= (1.5 / 2.75)) * h + 0.75) + f
				} else {
					if (h < (2.5 / 2.75)) {
						return j * (7.5625 * (h -= (2.25 / 2.75)) * h + 0.9375) + f
					} else {
						return j * (7.5625 * (h -= (2.625 / 2.75)) * h + 0.984375) + f
					}
				}
			}
		},
		easeInOutBounce : function (g, h, f, j, i) {
			if (h < i / 2) {
				return d.easing.easeInBounce(g, h * 2, 0, j, i) * 0.5 + f
			}
			return d.easing.easeOutBounce(g, h * 2 - i, 0, j, i) * 0.5 + j * 0.5 + f
		}
	})
})(jQuery);
(function (a) {
	a.effects.blind = function (b) {
		return this.queue(function () {
			var d = a(this),
			c = ["position", "top", "left"];
			var h = a.effects.setMode(d, b.options.mode || "hide");
			var g = b.options.direction || "vertical";
			a.effects.save(d, c);
			d.show();
			var j = a.effects.createWrapper(d).css({
					overflow : "hidden"
				});
			var e = (g == "vertical") ? "height" : "width";
			var i = (g == "vertical") ? j.height() : j.width();
			if (h == "show") {
				j.css(e, 0)
			}
			var f = {};
			f[e] = h == "show" ? i : 0;
			j.animate(f, b.duration, b.options.easing, function () {
				if (h == "hide") {
					d.hide()
				}
				a.effects.restore(d, c);
				a.effects.removeWrapper(d);
				if (b.callback) {
					b.callback.apply(d[0], arguments)
				}
				d.dequeue()
			})
		})
	}
})(jQuery);
(function (a) {
	a.effects.bounce = function (b) {
		return this.queue(function () {
			var e = a(this),
			l = ["position", "top", "left"];
			var k = a.effects.setMode(e, b.options.mode || "effect");
			var n = b.options.direction || "up";
			var c = b.options.distance || 20;
			var d = b.options.times || 5;
			var g = b.duration || 250;
			if (/show|hide/.test(k)) {
				l.push("opacity")
			}
			a.effects.save(e, l);
			e.show();
			a.effects.createWrapper(e);
			var f = (n == "up" || n == "down") ? "top" : "left";
			var p = (n == "up" || n == "left") ? "pos" : "neg";
			var c = b.options.distance || (f == "top" ? e.outerHeight({
						margin : true
					}) / 3 : e.outerWidth({
						margin : true
					}) / 3);
			if (k == "show") {
				e.css("opacity", 0).css(f, p == "pos" ? -c : c)
			}
			if (k == "hide") {
				c = c / (d * 2)
			}
			if (k != "hide") {
				d--
			}
			if (k == "show") {
				var h = {
					opacity : 1
				};
				h[f] = (p == "pos" ? "+=" : "-=") + c;
				e.animate(h, g / 2, b.options.easing);
				c = c / 2;
				d--
			}
			for (var j = 0; j < d; j++) {
				var o = {},
				m = {};
				o[f] = (p == "pos" ? "-=" : "+=") + c;
				m[f] = (p == "pos" ? "+=" : "-=") + c;
				e.animate(o, g / 2, b.options.easing).animate(m, g / 2, b.options.easing);
				c = (k == "hide") ? c * 2 : c / 2
			}
			if (k == "hide") {
				var h = {
					opacity : 0
				};
				h[f] = (p == "pos" ? "-=" : "+=") + c;
				e.animate(h, g / 2, b.options.easing, function () {
					e.hide();
					a.effects.restore(e, l);
					a.effects.removeWrapper(e);
					if (b.callback) {
						b.callback.apply(this, arguments)
					}
				})
			} else {
				var o = {},
				m = {};
				o[f] = (p == "pos" ? "-=" : "+=") + c;
				m[f] = (p == "pos" ? "+=" : "-=") + c;
				e.animate(o, g / 2, b.options.easing).animate(m, g / 2, b.options.easing, function () {
					a.effects.restore(e, l);
					a.effects.removeWrapper(e);
					if (b.callback) {
						b.callback.apply(this, arguments)
					}
				})
			}
			e.queue("fx", function () {
				e.dequeue()
			});
			e.dequeue()
		})
	}
})(jQuery);
(function (a) {
	a.effects.clip = function (b) {
		return this.queue(function () {
			var f = a(this),
			j = ["position", "top", "left", "height", "width"];
			var i = a.effects.setMode(f, b.options.mode || "hide");
			var k = b.options.direction || "vertical";
			a.effects.save(f, j);
			f.show();
			var c = a.effects.createWrapper(f).css({
					overflow : "hidden"
				});
			var e = f[0].tagName == "IMG" ? c : f;
			var g = {
				size : (k == "vertical") ? "height" : "width",
				position : (k == "vertical") ? "top" : "left"
			};
			var d = (k == "vertical") ? e.height() : e.width();
			if (i == "show") {
				e.css(g.size, 0);
				e.css(g.position, d / 2)
			}
			var h = {};
			h[g.size] = i == "show" ? d : 0;
			h[g.position] = i == "show" ? 0 : d / 2;
			e.animate(h, {
				queue : false,
				duration : b.duration,
				easing : b.options.easing,
				complete : function () {
					if (i == "hide") {
						f.hide()
					}
					a.effects.restore(f, j);
					a.effects.removeWrapper(f);
					if (b.callback) {
						b.callback.apply(f[0], arguments)
					}
					f.dequeue()
				}
			})
		})
	}
})(jQuery);
(function (a) {
	a.effects.drop = function (b) {
		return this.queue(function () {
			var e = a(this),
			d = ["position", "top", "left", "opacity"];
			var i = a.effects.setMode(e, b.options.mode || "hide");
			var h = b.options.direction || "left";
			a.effects.save(e, d);
			e.show();
			a.effects.createWrapper(e);
			var f = (h == "up" || h == "down") ? "top" : "left";
			var c = (h == "up" || h == "left") ? "pos" : "neg";
			var j = b.options.distance || (f == "top" ? e.outerHeight({
						margin : true
					}) / 2 : e.outerWidth({
						margin : true
					}) / 2);
			if (i == "show") {
				e.css("opacity", 0).css(f, c == "pos" ? -j : j)
			}
			var g = {
				opacity : i == "show" ? 1 : 0
			};
			g[f] = (i == "show" ? (c == "pos" ? "+=" : "-=") : (c == "pos" ? "-=" : "+=")) + j;
			e.animate(g, {
				queue : false,
				duration : b.duration,
				easing : b.options.easing,
				complete : function () {
					if (i == "hide") {
						e.hide()
					}
					a.effects.restore(e, d);
					a.effects.removeWrapper(e);
					if (b.callback) {
						b.callback.apply(this, arguments)
					}
					e.dequeue()
				}
			})
		})
	}
})(jQuery);
(function (a) {
	a.effects.explode = function (b) {
		return this.queue(function () {
			var k = b.options.pieces ? Math.round(Math.sqrt(b.options.pieces)) : 3;
			var e = b.options.pieces ? Math.round(Math.sqrt(b.options.pieces)) : 3;
			b.options.mode = b.options.mode == "toggle" ? (a(this).is(":visible") ? "hide" : "show") : b.options.mode;
			var h = a(this).show().css("visibility", "hidden");
			var l = h.offset();
			l.top -= parseInt(h.css("marginTop"), 10) || 0;
			l.left -= parseInt(h.css("marginLeft"), 10) || 0;
			var g = h.outerWidth(true);
			var c = h.outerHeight(true);
			for (var f = 0; f < k; f++) {
				for (var d = 0; d < e; d++) {
					h.clone().appendTo("body").wrap("<div></div>").css({
						position : "absolute",
						visibility : "visible",
						left : -d * (g / e),
						top : -f * (c / k)
					}).parent().addClass("ui-effects-explode").css({
						position : "absolute",
						overflow : "hidden",
						width : g / e,
						height : c / k,
						left : l.left + d * (g / e) + (b.options.mode == "show" ? (d - Math.floor(e / 2)) * (g / e) : 0),
						top : l.top + f * (c / k) + (b.options.mode == "show" ? (f - Math.floor(k / 2)) * (c / k) : 0),
						opacity : b.options.mode == "show" ? 0 : 1
					}).animate({
						left : l.left + d * (g / e) + (b.options.mode == "show" ? 0 : (d - Math.floor(e / 2)) * (g / e)),
						top : l.top + f * (c / k) + (b.options.mode == "show" ? 0 : (f - Math.floor(k / 2)) * (c / k)),
						opacity : b.options.mode == "show" ? 1 : 0
					}, b.duration || 500)
				}
			}
			setTimeout(function () {
				b.options.mode == "show" ? h.css({
					visibility : "visible"
				}) : h.css({
					visibility : "visible"
				}).hide();
				if (b.callback) {
					b.callback.apply(h[0])
				}
				h.dequeue();
				a("div.ui-effects-explode").remove()
			}, b.duration || 500)
		})
	}
})(jQuery);
(function (a) {
	a.effects.fold = function (b) {
		return this.queue(function () {
			var e = a(this),
			k = ["position", "top", "left"];
			var h = a.effects.setMode(e, b.options.mode || "hide");
			var o = b.options.size || 15;
			var n = !(!b.options.horizFirst);
			var g = b.duration ? b.duration / 2 : a.fx.speeds._default / 2;
			a.effects.save(e, k);
			e.show();
			var d = a.effects.createWrapper(e).css({
					overflow : "hidden"
				});
			var i = ((h == "show") != n);
			var f = i ? ["width", "height"] : ["height", "width"];
			var c = i ? [d.width(), d.height()] : [d.height(), d.width()];
			var j = /([0-9]+)%/.exec(o);
			if (j) {
				o = parseInt(j[1], 10) / 100 * c[h == "hide" ? 0 : 1]
			}
			if (h == "show") {
				d.css(n ? {
					height : 0,
					width : o
				}
					 : {
					height : o,
					width : 0
				})
			}
			var m = {},
			l = {};
			m[f[0]] = h == "show" ? c[0] : o;
			l[f[1]] = h == "show" ? c[1] : 0;
			d.animate(m, g, b.options.easing).animate(l, g, b.options.easing, function () {
				if (h == "hide") {
					e.hide()
				}
				a.effects.restore(e, k);
				a.effects.removeWrapper(e);
				if (b.callback) {
					b.callback.apply(e[0], arguments)
				}
				e.dequeue()
			})
		})
	}
})(jQuery);
(function (a) {
	a.effects.highlight = function (b) {
		return this.queue(function () {
			var e = a(this),
			d = ["backgroundImage", "backgroundColor", "opacity"];
			var h = a.effects.setMode(e, b.options.mode || "show");
			var c = b.options.color || "#ffff99";
			var g = e.css("backgroundColor");
			a.effects.save(e, d);
			e.show();
			e.css({
				backgroundImage : "none",
				backgroundColor : c
			});
			var f = {
				backgroundColor : g
			};
			if (h == "hide") {
				f.opacity = 0
			}
			e.animate(f, {
				queue : false,
				duration : b.duration,
				easing : b.options.easing,
				complete : function () {
					if (h == "hide") {
						e.hide()
					}
					a.effects.restore(e, d);
					if (h == "show" && a.browser.msie) {
						this.style.removeAttribute("filter")
					}
					if (b.callback) {
						b.callback.apply(this, arguments)
					}
					e.dequeue()
				}
			})
		})
	}
})(jQuery);
(function (a) {
	a.effects.pulsate = function (b) {
		return this.queue(function () {
			var d = a(this);
			var g = a.effects.setMode(d, b.options.mode || "show");
			var f = b.options.times || 5;
			var e = b.duration ? b.duration / 2 : a.fx.speeds._default / 2;
			if (g == "hide") {
				f--
			}
			if (d.is(":hidden")) {
				d.css("opacity", 0);
				d.show();
				d.animate({
					opacity : 1
				}, e, b.options.easing);
				f = f - 2
			}
			for (var c = 0; c < f; c++) {
				d.animate({
					opacity : 0
				}, e, b.options.easing).animate({
					opacity : 1
				}, e, b.options.easing)
			}
			if (g == "hide") {
				d.animate({
					opacity : 0
				}, e, b.options.easing, function () {
					d.hide();
					if (b.callback) {
						b.callback.apply(this, arguments)
					}
				})
			} else {
				d.animate({
					opacity : 0
				}, e, b.options.easing).animate({
					opacity : 1
				}, e, b.options.easing, function () {
					if (b.callback) {
						b.callback.apply(this, arguments)
					}
				})
			}
			d.queue("fx", function () {
				d.dequeue()
			});
			d.dequeue()
		})
	}
})(jQuery);
(function (a) {
	a.effects.puff = function (b) {
		return this.queue(function () {
			var f = a(this);
			var c = a.extend(true, {}, b.options);
			var h = a.effects.setMode(f, b.options.mode || "hide");
			var g = parseInt(b.options.percent, 10) || 150;
			c.fade = true;
			var e = {
				height : f.height(),
				width : f.width()
			};
			var d = g / 100;
			f.from = (h == "hide") ? e : {
				height : e.height * d,
				width : e.width * d
			};
			c.from = f.from;
			c.percent = (h == "hide") ? g : 100;
			c.mode = h;
			f.effect("scale", c, b.duration, b.callback);
			f.dequeue()
		})
	};
	a.effects.scale = function (b) {
		return this.queue(function () {
			var g = a(this);
			var d = a.extend(true, {}, b.options);
			var j = a.effects.setMode(g, b.options.mode || "effect");
			var h = parseInt(b.options.percent, 10) || (parseInt(b.options.percent, 10) == 0 ? 0 : (j == "hide" ? 0 : 100));
			var i = b.options.direction || "both";
			var c = b.options.origin;
			if (j != "effect") {
				d.origin = c || ["middle", "center"];
				d.restore = true
			}
			var f = {
				height : g.height(),
				width : g.width()
			};
			g.from = b.options.from || (j == "show" ? {
					height : 0,
					width : 0
				}
					 : f);
			var e = {
				y : i != "horizontal" ? (h / 100) : 1,
				x : i != "vertical" ? (h / 100) : 1
			};
			g.to = {
				height : f.height * e.y,
				width : f.width * e.x
			};
			if (b.options.fade) {
				if (j == "show") {
					g.from.opacity = 0;
					g.to.opacity = 1
				}
				if (j == "hide") {
					g.from.opacity = 1;
					g.to.opacity = 0
				}
			}
			d.from = g.from;
			d.to = g.to;
			d.mode = j;
			g.effect("size", d, b.duration, b.callback);
			g.dequeue()
		})
	};
	a.effects.size = function (b) {
		return this.queue(function () {
			var c = a(this),
			n = ["position", "top", "left", "width", "height", "overflow", "opacity"];
			var m = ["position", "top", "left", "overflow", "opacity"];
			var j = ["width", "height", "overflow"];
			var p = ["fontSize"];
			var k = ["borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom"];
			var f = ["borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight"];
			var g = a.effects.setMode(c, b.options.mode || "effect");
			var i = b.options.restore || false;
			var e = b.options.scale || "both";
			var o = b.options.origin;
			var d = {
				height : c.height(),
				width : c.width()
			};
			c.from = b.options.from || d;
			c.to = b.options.to || d;
			if (o) {
				var h = a.effects.getBaseline(o, d);
				c.from.top = (d.height - c.from.height) * h.y;
				c.from.left = (d.width - c.from.width) * h.x;
				c.to.top = (d.height - c.to.height) * h.y;
				c.to.left = (d.width - c.to.width) * h.x
			}
			var l = {
				from : {
					y : c.from.height / d.height,
					x : c.from.width / d.width
				},
				to : {
					y : c.to.height / d.height,
					x : c.to.width / d.width
				}
			};
			if (e == "box" || e == "both") {
				if (l.from.y != l.to.y) {
					n = n.concat(k);
					c.from = a.effects.setTransition(c, k, l.from.y, c.from);
					c.to = a.effects.setTransition(c, k, l.to.y, c.to)
				}
				if (l.from.x != l.to.x) {
					n = n.concat(f);
					c.from = a.effects.setTransition(c, f, l.from.x, c.from);
					c.to = a.effects.setTransition(c, f, l.to.x, c.to)
				}
			}
			if (e == "content" || e == "both") {
				if (l.from.y != l.to.y) {
					n = n.concat(p);
					c.from = a.effects.setTransition(c, p, l.from.y, c.from);
					c.to = a.effects.setTransition(c, p, l.to.y, c.to)
				}
			}
			a.effects.save(c, i ? n : m);
			c.show();
			a.effects.createWrapper(c);
			c.css("overflow", "hidden").css(c.from);
			if (e == "content" || e == "both") {
				k = k.concat(["marginTop", "marginBottom"]).concat(p);
				f = f.concat(["marginLeft", "marginRight"]);
				j = n.concat(k).concat(f);
				c.find("*[width]").each(function () {
					child = a(this);
					if (i) {
						a.effects.save(child, j)
					}
					var q = {
						height : child.height(),
						width : child.width()
					};
					child.from = {
						height : q.height * l.from.y,
						width : q.width * l.from.x
					};
					child.to = {
						height : q.height * l.to.y,
						width : q.width * l.to.x
					};
					if (l.from.y != l.to.y) {
						child.from = a.effects.setTransition(child, k, l.from.y, child.from);
						child.to = a.effects.setTransition(child, k, l.to.y, child.to)
					}
					if (l.from.x != l.to.x) {
						child.from = a.effects.setTransition(child, f, l.from.x, child.from);
						child.to = a.effects.setTransition(child, f, l.to.x, child.to)
					}
					child.css(child.from);
					child.animate(child.to, b.duration, b.options.easing, function () {
						if (i) {
							a.effects.restore(child, j)
						}
					})
				})
			}
			c.animate(c.to, {
				queue : false,
				duration : b.duration,
				easing : b.options.easing,
				complete : function () {
					if (g == "hide") {
						c.hide()
					}
					a.effects.restore(c, i ? n : m);
					a.effects.removeWrapper(c);
					if (b.callback) {
						b.callback.apply(this, arguments)
					}
					c.dequeue()
				}
			})
		})
	}
})(jQuery);
(function (a) {
	a.effects.shake = function (b) {
		return this.queue(function () {
			var e = a(this),
			l = ["position", "top", "left"];
			var k = a.effects.setMode(e, b.options.mode || "effect");
			var n = b.options.direction || "left";
			var c = b.options.distance || 20;
			var d = b.options.times || 3;
			var g = b.duration || b.options.duration || 140;
			a.effects.save(e, l);
			e.show();
			a.effects.createWrapper(e);
			var f = (n == "up" || n == "down") ? "top" : "left";
			var p = (n == "up" || n == "left") ? "pos" : "neg";
			var h = {},
			o = {},
			m = {};
			h[f] = (p == "pos" ? "-=" : "+=") + c;
			o[f] = (p == "pos" ? "+=" : "-=") + c * 2;
			m[f] = (p == "pos" ? "-=" : "+=") + c * 2;
			e.animate(h, g, b.options.easing);
			for (var j = 1; j < d; j++) {
				e.animate(o, g, b.options.easing).animate(m, g, b.options.easing)
			}
			e.animate(o, g, b.options.easing).animate(h, g / 2, b.options.easing, function () {
				a.effects.restore(e, l);
				a.effects.removeWrapper(e);
				if (b.callback) {
					b.callback.apply(this, arguments)
				}
			});
			e.queue("fx", function () {
				e.dequeue()
			});
			e.dequeue()
		})
	}
})(jQuery);
(function (a) {
	a.effects.slide = function (b) {
		return this.queue(function () {
			var e = a(this),
			d = ["position", "top", "left"];
			var i = a.effects.setMode(e, b.options.mode || "show");
			var h = b.options.direction || "left";
			a.effects.save(e, d);
			e.show();
			a.effects.createWrapper(e).css({
				overflow : "hidden"
			});
			var f = (h == "up" || h == "down") ? "top" : "left";
			var c = (h == "up" || h == "left") ? "pos" : "neg";
			var j = b.options.distance || (f == "top" ? e.outerHeight({
						margin : true
					}) : e.outerWidth({
						margin : true
					}));
			if (i == "show") {
				e.css(f, c == "pos" ? -j : j)
			}
			var g = {};
			g[f] = (i == "show" ? (c == "pos" ? "+=" : "-=") : (c == "pos" ? "-=" : "+=")) + j;
			e.animate(g, {
				queue : false,
				duration : b.duration,
				easing : b.options.easing,
				complete : function () {
					if (i == "hide") {
						e.hide()
					}
					a.effects.restore(e, d);
					a.effects.removeWrapper(e);
					if (b.callback) {
						b.callback.apply(this, arguments)
					}
					e.dequeue()
				}
			})
		})
	}
})(jQuery);
(function (a) {
	a.effects.transfer = function (b) {
		return this.queue(function () {
			var f = a(this),
			h = a(b.options.to),
			e = h.offset(),
			g = {
				top : e.top,
				left : e.left,
				height : h.innerHeight(),
				width : h.innerWidth()
			},
			d = f.offset(),
			c = a('<div class="ui-effects-transfer"></div>').appendTo(document.body).addClass(b.options.className).css({
					top : d.top,
					left : d.left,
					height : f.innerHeight(),
					width : f.innerWidth(),
					position : "absolute"
				}).animate(g, b.duration, b.options.easing, function () {
					c.remove();
					(b.callback && b.callback.apply(f[0], arguments));
					f.dequeue()
				})
		})
	}
})(jQuery);
(function (a) {
	a.widget("ui.accordion", {
		_init : function () {
			var d = this.options,
			b = this;
			this.running = 0;
			if (d.collapsible == a.ui.accordion.defaults.collapsible && d.alwaysOpen != a.ui.accordion.defaults.alwaysOpen) {
				d.collapsible = !d.alwaysOpen
			}
			if (d.navigation) {
				var c = this.element.find("a").filter(d.navigationFilter);
				if (c.length) {
					if (c.filter(d.header).length) {
						this.active = c
					} else {
						this.active = c.parent().parent().prev();
						c.addClass("ui-accordion-content-active")
					}
				}
			}
			this.element.addClass("ui-accordion ui-widget ui-helper-reset");
			if (this.element[0].nodeName == "UL") {
				this.element.children("li").addClass("ui-accordion-li-fix")
			}
			this.headers = this.element.find(d.header).addClass("ui-accordion-header ui-helper-reset ui-state-default ui-corner-all").bind("mouseenter.accordion", function () {
					a(this).addClass("ui-state-hover")
				}).bind("mouseleave.accordion", function () {
					a(this).removeClass("ui-state-hover")
				}).bind("focus.accordion", function () {
					a(this).addClass("ui-state-focus")
				}).bind("blur.accordion", function () {
					a(this).removeClass("ui-state-focus")
				});
			this.headers.next().addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom");
			this.active = this._findActive(this.active || d.active).toggleClass("ui-state-default").toggleClass("ui-state-active").toggleClass("ui-corner-all").toggleClass("ui-corner-top");
			this.active.next().addClass("ui-accordion-content-active");
			a("<span/>").addClass("ui-icon " + d.icons.header).prependTo(this.headers);
			this.active.find(".ui-icon").toggleClass(d.icons.header).toggleClass(d.icons.headerSelected);
			if (a.browser.msie) {
				this.element.find("a").css("zoom", "1")
			}
			this.resize();
			this.element.attr("role", "tablist");
			this.headers.attr("role", "tab").bind("keydown", function (e) {
				return b._keydown(e)
			}).next().attr("role", "tabpanel");
			this.headers.not(this.active || "").attr("aria-expanded", "false").attr("tabIndex", "-1").next().hide();
			if (!this.active.length) {
				this.headers.eq(0).attr("tabIndex", "0")
			} else {
				this.active.attr("aria-expanded", "true").attr("tabIndex", "0")
			}
			if (!a.browser.safari) {
				this.headers.find("a").attr("tabIndex", "-1")
			}
			if (d.event) {
				this.headers.bind((d.event) + ".accordion", function (e) {
					return b._clickHandler.call(b, e, this)
				})
			}
		},
		destroy : function () {
			var c = this.options;
			this.element.removeClass("ui-accordion ui-widget ui-helper-reset").removeAttr("role").unbind(".accordion").removeData("accordion");
			this.headers.unbind(".accordion").removeClass("ui-accordion-header ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-corner-top").removeAttr("role").removeAttr("aria-expanded").removeAttr("tabindex");
			this.headers.find("a").removeAttr("tabindex");
			this.headers.children(".ui-icon").remove();
			var b = this.headers.next().css("display", "").removeAttr("role").removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active");
			if (c.autoHeight || c.fillHeight) {
				b.css("height", "")
			}
		},
		_setData : function (b, c) {
			if (b == "alwaysOpen") {
				b = "collapsible";
				c = !c
			}
			a.widget.prototype._setData.apply(this, arguments)
		},
		_keydown : function (e) {
			var g = this.options,
			f = a.ui.keyCode;
			if (g.disabled || e.altKey || e.ctrlKey) {
				return
			}
			var d = this.headers.length;
			var b = this.headers.index(e.target);
			var c = false;
			switch (e.keyCode) {
			case f.RIGHT:
			case f.DOWN:
				c = this.headers[(b + 1) % d];
				break;
			case f.LEFT:
			case f.UP:
				c = this.headers[(b - 1 + d) % d];
				break;
			case f.SPACE:
			case f.ENTER:
				return this._clickHandler({
					target : e.target
				}, e.target)
			}
			if (c) {
				a(e.target).attr("tabIndex", "-1");
				a(c).attr("tabIndex", "0");
				c.focus();
				return false
			}
			return true
		},
		resize : function () {
			var e = this.options,
			d;
			if (e.fillSpace) {
				if (a.browser.msie) {
					var b = this.element.parent().css("overflow");
					this.element.parent().css("overflow", "hidden")
				}
				d = this.element.parent().height();
				if (a.browser.msie) {
					this.element.parent().css("overflow", b)
				}
				this.headers.each(function () {
					d -= a(this).outerHeight()
				});
				var c = 0;
				this.headers.next().each(function () {
					c = Math.max(c, a(this).innerHeight() - a(this).height())
				}).height(Math.max(0, d - c)).css("overflow", "auto")
			} else {
				if (e.autoHeight) {
					d = 0;
					this.headers.next().each(function () {
						d = Math.max(d, a(this).outerHeight())
					}).height(d)
				}
			}
		},
		activate : function (b) {
			var c = this._findActive(b)[0];
			this._clickHandler({
				target : c
			}, c)
		},
		_findActive : function (b) {
			return b ? typeof b == "number" ? this.headers.filter(":eq(" + b + ")") : this.headers.not(this.headers.not(b)) : b === false ? a([]) : this.headers.filter(":eq(0)")
		},
		_clickHandler : function (b, f) {
			var d = this.options;
			if (d.disabled) {
				return false
			}
			if (!b.target && d.collapsible) {
				this.active.removeClass("ui-state-active ui-corner-top").addClass("ui-state-default ui-corner-all").find(".ui-icon").removeClass(d.icons.headerSelected).addClass(d.icons.header);
				this.active.next().addClass("ui-accordion-content-active");
				var h = this.active.next(),
				e = {
					options : d,
					newHeader : a([]),
					oldHeader : d.active,
					newContent : a([]),
					oldContent : h
				},
				c = (this.active = a([]));
				this._toggle(c, h, e);
				return false
			}
			var g = a(b.currentTarget || f);
			var i = g[0] == this.active[0];
			if (this.running || (!d.collapsible && i)) {
				return false
			}
			this.active.removeClass("ui-state-active ui-corner-top").addClass("ui-state-default ui-corner-all").find(".ui-icon").removeClass(d.icons.headerSelected).addClass(d.icons.header);
			this.active.next().addClass("ui-accordion-content-active");
			if (!i) {
				g.removeClass("ui-state-default ui-corner-all").addClass("ui-state-active ui-corner-top").find(".ui-icon").removeClass(d.icons.header).addClass(d.icons.headerSelected);
				g.next().addClass("ui-accordion-content-active")
			}
			var c = g.next(),
			h = this.active.next(),
			e = {
				options : d,
				newHeader : i && d.collapsible ? a([]) : g,
				oldHeader : this.active,
				newContent : i && d.collapsible ? a([]) : c.find("> *"),
				oldContent : h.find("> *")
			},
			j = this.headers.index(this.active[0]) > this.headers.index(g[0]);
			this.active = i ? a([]) : g;
			this._toggle(c, h, e, i, j);
			return false
		},
		_toggle : function (b, i, g, j, k) {
			var d = this.options,
			m = this;
			this.toShow = b;
			this.toHide = i;
			this.data = g;
			var c = function () {
				if (!m) {
					return
				}
				return m._completed.apply(m, arguments)
			};
			this._trigger("changestart", null, this.data);
			this.running = i.size() === 0 ? b.size() : i.size();
			if (d.animated) {
				var f = {};
				if (d.collapsible && j) {
					f = {
						toShow : a([]),
						toHide : i,
						complete : c,
						down : k,
						autoHeight : d.autoHeight || d.fillSpace
					}
				} else {
					f = {
						toShow : b,
						toHide : i,
						complete : c,
						down : k,
						autoHeight : d.autoHeight || d.fillSpace
					}
				}
				if (!d.proxied) {
					d.proxied = d.animated
				}
				if (!d.proxiedDuration) {
					d.proxiedDuration = d.duration
				}
				d.animated = a.isFunction(d.proxied) ? d.proxied(f) : d.proxied;
				d.duration = a.isFunction(d.proxiedDuration) ? d.proxiedDuration(f) : d.proxiedDuration;
				var l = a.ui.accordion.animations,
				e = d.duration,
				h = d.animated;
				if (!l[h]) {
					l[h] = function (n) {
						this.slide(n, {
							easing : h,
							duration : e || 700
						})
					}
				}
				l[h](f)
			} else {
				if (d.collapsible && j) {
					b.toggle()
				} else {
					i.hide();
					b.show()
				}
				c(true)
			}
			i.prev().attr("aria-expanded", "false").attr("tabIndex", "-1").blur();
			b.prev().attr("aria-expanded", "true").attr("tabIndex", "0").focus()
		},
		_completed : function (b) {
			var c = this.options;
			this.running = b ? 0 : --this.running;
			if (this.running) {
				return
			}
			if (c.clearStyle) {
				this.toShow.add(this.toHide).css({
					height : "",
					overflow : ""
				})
			}
			this._trigger("change", null, this.data)
		}
	});
	a.extend(a.ui.accordion, {
		version : "1.7",
		defaults : {
			active : null,
			alwaysOpen : true,
			animated : "slide",
			autoHeight : true,
			clearStyle : false,
			collapsible : false,
			event : "click",
			fillSpace : false,
			header : "> li > :first-child,> :not(li):even",
			icons : {
				header : "ui-icon-triangle-1-e",
				headerSelected : "ui-icon-triangle-1-s"
			},
			navigation : false,
			navigationFilter : function () {
				return this.href.toLowerCase() == location.href.toLowerCase()
			}
		},
		animations : {
			slide : function (j, h) {
				j = a.extend({
						easing : "swing",
						duration : 300
					}, j, h);
				if (!j.toHide.size()) {
					j.toShow.animate({
						height : "show"
					}, j);
					return
				}
				if (!j.toShow.size()) {
					j.toHide.animate({
						height : "hide"
					}, j);
					return
				}
				var c = j.toShow.css("overflow"),
				g,
				d = {},
				f = {},
				e = ["height", "paddingTop", "paddingBottom"],
				b;
				var i = j.toShow;
				b = i[0].style.width;
				i.width(parseInt(i.parent().width(), 10) - parseInt(i.css("paddingLeft"), 10) - parseInt(i.css("paddingRight"), 10) - parseInt(i.css("borderLeftWidth"), 10) - parseInt(i.css("borderRightWidth"), 10));
				a.each(e, function (k, m) {
					f[m] = "hide";
					var l = ("" + a.css(j.toShow[0], m)).match(/^([\d+-.]+)(.*)$/);
					d[m] = {
						value : l[1],
						unit : l[2] || "px"
					}
				});
				j.toShow.css({
					height : 0,
					overflow : "hidden"
				}).show();
				j.toHide.filter(":hidden").each(j.complete).end().filter(":visible").animate(f, {
					step : function (k, l) {
						if (l.prop == "height") {
							g = (l.now - l.start) / (l.end - l.start)
						}
						j.toShow[0].style[l.prop] = (g * d[l.prop].value) + d[l.prop].unit
					},
					duration : j.duration,
					easing : j.easing,
					complete : function () {
						if (!j.autoHeight) {
							j.toShow.css("height", "")
						}
						j.toShow.css("width", b);
						j.toShow.css({
							overflow : c
						});
						j.complete()
					}
				})
			},
			bounceslide : function (b) {
				this.slide(b, {
					easing : b.down ? "easeOutBounce" : "swing",
					duration : b.down ? 1000 : 200
				})
			},
			easeslide : function (b) {
				this.slide(b, {
					easing : "easeinout",
					duration : 700
				})
			}
		}
	})
})(jQuery);
(function ($) {
	$.extend($.ui, {
		datepicker : {
			version : "1.7"
		}
	});
	var PROP_NAME = "datepicker";
	function Datepicker() {
		this.debug = false;
		this._curInst = null;
		this._keyEvent = false;
		this._disabledInputs = [];
		this._datepickerShowing = false;
		this._inDialog = false;
		this._mainDivId = "ui-datepicker-div";
		this._inlineClass = "ui-datepicker-inline";
		this._appendClass = "ui-datepicker-append";
		this._triggerClass = "ui-datepicker-trigger";
		this._dialogClass = "ui-datepicker-dialog";
		this._disableClass = "ui-datepicker-disabled";
		this._unselectableClass = "ui-datepicker-unselectable";
		this._currentClass = "ui-datepicker-current-day";
		this._dayOverClass = "ui-datepicker-days-cell-over";
		this.regional = [];
		this.regional[""] = {
			closeText : "Done",
			prevText : "Prev",
			nextText : "Next",
			currentText : "Today",
			monthNames : ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
			monthNamesShort : ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
			dayNames : ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
			dayNamesShort : ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
			dayNamesMin : ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
			dateFormat : "mm/dd/yy",
			firstDay : 0,
			isRTL : false
		};
		this._defaults = {
			showOn : "focus",
			showAnim : "show",
			showOptions : {},
			defaultDate : null,
			appendText : "",
			buttonText : "...",
			buttonImage : "",
			buttonImageOnly : false,
			hideIfNoPrevNext : false,
			navigationAsDateFormat : false,
			gotoCurrent : false,
			changeMonth : false,
			changeYear : false,
			showMonthAfterYear : false,
			yearRange : "-10:+10",
			showOtherMonths : false,
			calculateWeek : this.iso8601Week,
			shortYearCutoff : "+10",
			minDate : null,
			maxDate : null,
			duration : "normal",
			beforeShowDay : null,
			beforeShow : null,
			onSelect : null,
			onChangeMonthYear : null,
			onClose : null,
			numberOfMonths : 1,
			showCurrentAtPos : 0,
			stepMonths : 1,
			stepBigMonths : 12,
			altField : "",
			altFormat : "",
			constrainInput : true,
			showButtonPanel : false
		};
		$.extend(this._defaults, this.regional[""]);
		this.dpDiv = $('<div id="' + this._mainDivId + '" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all ui-helper-hidden-accessible" style="display: none;"></div>')
	}
	$.extend(Datepicker.prototype, {
		markerClassName : "hasDatepicker",
		log : function () {
			if (this.debug) {
				console.log.apply("", arguments)
			}
		},
		setDefaults : function (settings) {
			extendRemove(this._defaults, settings || {});
			return this
		},
		_attachDatepicker : function (target, settings) {
			var inlineSettings = null;
			for (var attrName in this._defaults) {
				var attrValue = target.getAttribute("date:" + attrName);
				if (attrValue) {
					inlineSettings = inlineSettings || {};
					try {
						inlineSettings[attrName] = eval(attrValue)
					} catch (err) {
						inlineSettings[attrName] = attrValue
					}
				}
			}
			var nodeName = target.nodeName.toLowerCase();
			var inline = (nodeName == "div" || nodeName == "span");
			if (!target.id) {
				target.id = "dp" + (++this.uuid)
			}
			var inst = this._newInst($(target), inline);
			inst.settings = $.extend({}, settings || {}, inlineSettings || {});
			if (nodeName == "input") {
				this._connectDatepicker(target, inst)
			} else {
				if (inline) {
					this._inlineDatepicker(target, inst)
				}
			}
		},
		_newInst : function (target, inline) {
			var id = target[0].id.replace(/([:\[\]\.])/g, "\\\\$1");
			return {
				id : id,
				input : target,
				selectedDay : 0,
				selectedMonth : 0,
				selectedYear : 0,
				drawMonth : 0,
				drawYear : 0,
				inline : inline,
				dpDiv : (!inline ? this.dpDiv : $('<div class="' + this._inlineClass + ' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>'))
			}
		},
		_connectDatepicker : function (target, inst) {
			var input = $(target);
			if (input.hasClass(this.markerClassName)) {
				return
			}
			var appendText = this._get(inst, "appendText");
			var isRTL = this._get(inst, "isRTL");
			if (appendText) {
				input[isRTL ? "before" : "after"]('<span class="' + this._appendClass + '">' + appendText + "</span>")
			}
			var showOn = this._get(inst, "showOn");
			if (showOn == "focus" || showOn == "both") {
				input.focus(this._showDatepicker)
			}
			if (showOn == "button" || showOn == "both") {
				var buttonText = this._get(inst, "buttonText");
				var buttonImage = this._get(inst, "buttonImage");
				var trigger = $(this._get(inst, "buttonImageOnly") ? $("<img/>").addClass(this._triggerClass).attr({
							src : buttonImage,
							alt : buttonText,
							title : buttonText
						}) : $('<button type="button"></button>').addClass(this._triggerClass).html(buttonImage == "" ? buttonText : $("<img/>").attr({
								src : buttonImage,
								alt : buttonText,
								title : buttonText
							})));
				input[isRTL ? "before" : "after"](trigger);
				trigger.click(function () {
					if ($.datepicker._datepickerShowing && $.datepicker._lastInput == target) {
						$.datepicker._hideDatepicker()
					} else {
						$.datepicker._showDatepicker(target)
					}
					return false
				})
			}
			input.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).bind("setData.datepicker", function (event, key, value) {
				inst.settings[key] = value
			}).bind("getData.datepicker", function (event, key) {
				return this._get(inst, key)
			});
			$.data(target, PROP_NAME, inst)
		},
		_inlineDatepicker : function (target, inst) {
			var divSpan = $(target);
			if (divSpan.hasClass(this.markerClassName)) {
				return
			}
			divSpan.addClass(this.markerClassName).append(inst.dpDiv).bind("setData.datepicker", function (event, key, value) {
				inst.settings[key] = value
			}).bind("getData.datepicker", function (event, key) {
				return this._get(inst, key)
			});
			$.data(target, PROP_NAME, inst);
			this._setDate(inst, this._getDefaultDate(inst));
			this._updateDatepicker(inst);
			this._updateAlternate(inst)
		},
		_dialogDatepicker : function (input, dateText, onSelect, settings, pos) {
			var inst = this._dialogInst;
			if (!inst) {
				var id = "dp" + (++this.uuid);
				this._dialogInput = $('<input type="text" id="' + id + '" size="1" style="position: absolute; top: -100px;"/>');
				this._dialogInput.keydown(this._doKeyDown);
				$("body").append(this._dialogInput);
				inst = this._dialogInst = this._newInst(this._dialogInput, false);
				inst.settings = {};
				$.data(this._dialogInput[0], PROP_NAME, inst)
			}
			extendRemove(inst.settings, settings || {});
			this._dialogInput.val(dateText);
			this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
			if (!this._pos) {
				var browserWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
				var browserHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
				var scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
				var scrollY = document.documentElement.scrollTop || document.body.scrollTop;
				this._pos = [(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY]
			}
			this._dialogInput.css("left", this._pos[0] + "px").css("top", this._pos[1] + "px");
			inst.settings.onSelect = onSelect;
			this._inDialog = true;
			this.dpDiv.addClass(this._dialogClass);
			this._showDatepicker(this._dialogInput[0]);
			if ($.blockUI) {
				$.blockUI(this.dpDiv)
			}
			$.data(this._dialogInput[0], PROP_NAME, inst);
			return this
		},
		_destroyDatepicker : function (target) {
			var $target = $(target);
			if (!$target.hasClass(this.markerClassName)) {
				return
			}
			var nodeName = target.nodeName.toLowerCase();
			$.removeData(target, PROP_NAME);
			if (nodeName == "input") {
				$target.siblings("." + this._appendClass).remove().end().siblings("." + this._triggerClass).remove().end().removeClass(this.markerClassName).unbind("focus", this._showDatepicker).unbind("keydown", this._doKeyDown).unbind("keypress", this._doKeyPress)
			} else {
				if (nodeName == "div" || nodeName == "span") {
					$target.removeClass(this.markerClassName).empty()
				}
			}
		},
		_enableDatepicker : function (target) {
			var $target = $(target);
			if (!$target.hasClass(this.markerClassName)) {
				return
			}
			var nodeName = target.nodeName.toLowerCase();
			if (nodeName == "input") {
				target.disabled = false;
				$target.siblings("button." + this._triggerClass).each(function () {
					this.disabled = false
				}).end().siblings("img." + this._triggerClass).css({
					opacity : "1.0",
					cursor : ""
				})
			} else {
				if (nodeName == "div" || nodeName == "span") {
					var inline = $target.children("." + this._inlineClass);
					inline.children().removeClass("ui-state-disabled")
				}
			}
			this._disabledInputs = $.map(this._disabledInputs, function (value) {
					return (value == target ? null : value)
				})
		},
		_disableDatepicker : function (target) {
			var $target = $(target);
			if (!$target.hasClass(this.markerClassName)) {
				return
			}
			var nodeName = target.nodeName.toLowerCase();
			if (nodeName == "input") {
				target.disabled = true;
				$target.siblings("button." + this._triggerClass).each(function () {
					this.disabled = true
				}).end().siblings("img." + this._triggerClass).css({
					opacity : "0.5",
					cursor : "default"
				})
			} else {
				if (nodeName == "div" || nodeName == "span") {
					var inline = $target.children("." + this._inlineClass);
					inline.children().addClass("ui-state-disabled")
				}
			}
			this._disabledInputs = $.map(this._disabledInputs, function (value) {
					return (value == target ? null : value)
				});
			this._disabledInputs[this._disabledInputs.length] = target
		},
		_isDisabledDatepicker : function (target) {
			if (!target) {
				return false
			}
			for (var i = 0; i < this._disabledInputs.length; i++) {
				if (this._disabledInputs[i] == target) {
					return true
				}
			}
			return false
		},
		_getInst : function (target) {
			try {
				return $.data(target, PROP_NAME)
			} catch (err) {
				throw "Missing instance data for this datepicker"
			}
		},
		_optionDatepicker : function (target, name, value) {
			var settings = name || {};
			if (typeof name == "string") {
				settings = {};
				settings[name] = value
			}
			var inst = this._getInst(target);
			if (inst) {
				if (this._curInst == inst) {
					this._hideDatepicker(null)
				}
				extendRemove(inst.settings, settings);
				var date = new Date();
				extendRemove(inst, {
					rangeStart : null,
					endDay : null,
					endMonth : null,
					endYear : null,
					selectedDay : date.getDate(),
					selectedMonth : date.getMonth(),
					selectedYear : date.getFullYear(),
					currentDay : date.getDate(),
					currentMonth : date.getMonth(),
					currentYear : date.getFullYear(),
					drawMonth : date.getMonth(),
					drawYear : date.getFullYear()
				});
				this._updateDatepicker(inst)
			}
		},
		_changeDatepicker : function (target, name, value) {
			this._optionDatepicker(target, name, value)
		},
		_refreshDatepicker : function (target) {
			var inst = this._getInst(target);
			if (inst) {
				this._updateDatepicker(inst)
			}
		},
		_setDateDatepicker : function (target, date, endDate) {
			var inst = this._getInst(target);
			if (inst) {
				this._setDate(inst, date, endDate);
				this._updateDatepicker(inst);
				this._updateAlternate(inst)
			}
		},
		_getDateDatepicker : function (target) {
			var inst = this._getInst(target);
			if (inst && !inst.inline) {
				this._setDateFromField(inst)
			}
			return (inst ? this._getDate(inst) : null)
		},
		_doKeyDown : function (event) {
			var inst = $.datepicker._getInst(event.target);
			var handled = true;
			var isRTL = inst.dpDiv.is(".ui-datepicker-rtl");
			inst._keyEvent = true;
			if ($.datepicker._datepickerShowing) {
				switch (event.keyCode) {
				case 9:
					$.datepicker._hideDatepicker(null, "");
					break;
				case 13:
					var sel = $("td." + $.datepicker._dayOverClass + ", td." + $.datepicker._currentClass, inst.dpDiv);
					if (sel[0]) {
						$.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0])
					} else {
						$.datepicker._hideDatepicker(null, $.datepicker._get(inst, "duration"))
					}
					return false;
					break;
				case 27:
					$.datepicker._hideDatepicker(null, $.datepicker._get(inst, "duration"));
					break;
				case 33:
					$.datepicker._adjustDate(event.target, (event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths")), "M");
					break;
				case 34:
					$.datepicker._adjustDate(event.target, (event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths")), "M");
					break;
				case 35:
					if (event.ctrlKey || event.metaKey) {
						$.datepicker._clearDate(event.target)
					}
					handled = event.ctrlKey || event.metaKey;
					break;
				case 36:
					if (event.ctrlKey || event.metaKey) {
						$.datepicker._gotoToday(event.target)
					}
					handled = event.ctrlKey || event.metaKey;
					break;
				case 37:
					if (event.ctrlKey || event.metaKey) {
						$.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), "D")
					}
					handled = event.ctrlKey || event.metaKey;
					if (event.originalEvent.altKey) {
						$.datepicker._adjustDate(event.target, (event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths")), "M")
					}
					break;
				case 38:
					if (event.ctrlKey || event.metaKey) {
						$.datepicker._adjustDate(event.target, -7, "D")
					}
					handled = event.ctrlKey || event.metaKey;
					break;
				case 39:
					if (event.ctrlKey || event.metaKey) {
						$.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), "D")
					}
					handled = event.ctrlKey || event.metaKey;
					if (event.originalEvent.altKey) {
						$.datepicker._adjustDate(event.target, (event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths")), "M")
					}
					break;
				case 40:
					if (event.ctrlKey || event.metaKey) {
						$.datepicker._adjustDate(event.target, +7, "D")
					}
					handled = event.ctrlKey || event.metaKey;
					break;
				default:
					handled = false
				}
			} else {
				if (event.keyCode == 36 && event.ctrlKey) {
					$.datepicker._showDatepicker(this)
				} else {
					handled = false
				}
			}
			if (handled) {
				event.preventDefault();
				event.stopPropagation()
			}
		},
		_doKeyPress : function (event) {
			var inst = $.datepicker._getInst(event.target);
			if ($.datepicker._get(inst, "constrainInput")) {
				var chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
				var chr = String.fromCharCode(event.charCode == undefined ? event.keyCode : event.charCode);
				return event.ctrlKey || (chr < " " || !chars || chars.indexOf(chr) > -1)
			}
		},
		_showDatepicker : function (input) {
			input = input.target || input;
			if (input.nodeName.toLowerCase() != "input") {
				input = $("input", input.parentNode)[0]
			}
			if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput == input) {
				return
			}
			var inst = $.datepicker._getInst(input);
			var beforeShow = $.datepicker._get(inst, "beforeShow");
			extendRemove(inst.settings, (beforeShow ? beforeShow.apply(input, [input, inst]) : {}));
			$.datepicker._hideDatepicker(null, "");
			$.datepicker._lastInput = input;
			$.datepicker._setDateFromField(inst);
			if ($.datepicker._inDialog) {
				input.value = ""
			}
			if (!$.datepicker._pos) {
				$.datepicker._pos = $.datepicker._findPos(input);
				$.datepicker._pos[1] += input.offsetHeight
			}
			var isFixed = false;
			$(input).parents().each(function () {
				isFixed |= $(this).css("position") == "fixed";
				return !isFixed
			});
			if (isFixed && $.browser.opera) {
				$.datepicker._pos[0] -= document.documentElement.scrollLeft;
				$.datepicker._pos[1] -= document.documentElement.scrollTop
			}
			var offset = {
				left : $.datepicker._pos[0],
				top : $.datepicker._pos[1]
			};
			$.datepicker._pos = null;
			inst.rangeStart = null;
			inst.dpDiv.css({
				position : "absolute",
				display : "block",
				top : "-1000px"
			});
			$.datepicker._updateDatepicker(inst);
			offset = $.datepicker._checkOffset(inst, offset, isFixed);
			inst.dpDiv.css({
				position : ($.datepicker._inDialog && $.blockUI ? "static" : (isFixed ? "fixed" : "absolute")),
				display : "none",
				left : offset.left + "px",
				top : offset.top + "px"
			});
			if (!inst.inline) {
				var showAnim = $.datepicker._get(inst, "showAnim") || "show";
				var duration = $.datepicker._get(inst, "duration");
				var postProcess = function () {
					$.datepicker._datepickerShowing = true;
					if ($.browser.msie && parseInt($.browser.version, 10) < 7) {
						$("iframe.ui-datepicker-cover").css({
							width : inst.dpDiv.width() + 4,
							height : inst.dpDiv.height() + 4
						})
					}
				};
				if ($.effects && $.effects[showAnim]) {
					inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess)
				} else {
					inst.dpDiv[showAnim](duration, postProcess)
				}
				if (duration == "") {
					postProcess()
				}
				if (inst.input[0].type != "hidden") {
					inst.input[0].focus()
				}
				$.datepicker._curInst = inst
			}
		},
		_updateDatepicker : function (inst) {
			var dims = {
				width : inst.dpDiv.width() + 4,
				height : inst.dpDiv.height() + 4
			};
			var self = this;
			inst.dpDiv.empty().append(this._generateHTML(inst)).find("iframe.ui-datepicker-cover").css({
				width : dims.width,
				height : dims.height
			}).end().find("button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a").bind("mouseout", function () {
				$(this).removeClass("ui-state-hover");
				if (this.className.indexOf("ui-datepicker-prev") != -1) {
					$(this).removeClass("ui-datepicker-prev-hover")
				}
				if (this.className.indexOf("ui-datepicker-next") != -1) {
					$(this).removeClass("ui-datepicker-next-hover")
				}
			}).bind("mouseover", function () {
				if (!self._isDisabledDatepicker(inst.inline ? inst.dpDiv.parent()[0] : inst.input[0])) {
					$(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
					$(this).addClass("ui-state-hover");
					if (this.className.indexOf("ui-datepicker-prev") != -1) {
						$(this).addClass("ui-datepicker-prev-hover")
					}
					if (this.className.indexOf("ui-datepicker-next") != -1) {
						$(this).addClass("ui-datepicker-next-hover")
					}
				}
			}).end().find("." + this._dayOverClass + " a").trigger("mouseover").end();
			var numMonths = this._getNumberOfMonths(inst);
			var cols = numMonths[1];
			var width = 17;
			if (cols > 1) {
				inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", (width * cols) + "em")
			} else {
				inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("")
			}
			inst.dpDiv[(numMonths[0] != 1 || numMonths[1] != 1 ? "add" : "remove") + "Class"]("ui-datepicker-multi");
			inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl");
			if (inst.input && inst.input[0].type != "hidden" && inst == $.datepicker._curInst) {
				$(inst.input[0]).focus()
			}
		},
		_checkOffset : function (inst, offset, isFixed) {
			var dpWidth = inst.dpDiv.outerWidth();
			var dpHeight = inst.dpDiv.outerHeight();
			var inputWidth = inst.input ? inst.input.outerWidth() : 0;
			var inputHeight = inst.input ? inst.input.outerHeight() : 0;
			var viewWidth = (window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth) + $(document).scrollLeft();
			var viewHeight = (window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight) + $(document).scrollTop();
			offset.left -= (this._get(inst, "isRTL") ? (dpWidth - inputWidth) : 0);
			offset.left -= (isFixed && offset.left == inst.input.offset().left) ? $(document).scrollLeft() : 0;
			offset.top -= (isFixed && offset.top == (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;
			offset.left -= (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ? Math.abs(offset.left + dpWidth - viewWidth) : 0;
			offset.top -= (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ? Math.abs(offset.top + dpHeight + inputHeight * 2 - viewHeight) : 0;
			return offset
		},
		_findPos : function (obj) {
			while (obj && (obj.type == "hidden" || obj.nodeType != 1)) {
				obj = obj.nextSibling
			}
			var position = $(obj).offset();
			return [position.left, position.top]
		},
		_hideDatepicker : function (input, duration) {
			var inst = this._curInst;
			if (!inst || (input && inst != $.data(input, PROP_NAME))) {
				return
			}
			if (inst.stayOpen) {
				this._selectDate("#" + inst.id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear))
			}
			inst.stayOpen = false;
			if (this._datepickerShowing) {
				duration = (duration != null ? duration : this._get(inst, "duration"));
				var showAnim = this._get(inst, "showAnim");
				var postProcess = function () {
					$.datepicker._tidyDialog(inst)
				};
				if (duration != "" && $.effects && $.effects[showAnim]) {
					inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess)
				} else {
					inst.dpDiv[(duration == "" ? "hide" : (showAnim == "slideDown" ? "slideUp" : (showAnim == "fadeIn" ? "fadeOut" : "hide")))](duration, postProcess)
				}
				if (duration == "") {
					this._tidyDialog(inst)
				}
				var onClose = this._get(inst, "onClose");
				if (onClose) {
					onClose.apply((inst.input ? inst.input[0] : null), [(inst.input ? inst.input.val() : ""), inst])
				}
				this._datepickerShowing = false;
				this._lastInput = null;
				if (this._inDialog) {
					this._dialogInput.css({
						position : "absolute",
						left : "0",
						top : "-100px"
					});
					if ($.blockUI) {
						$.unblockUI();
						$("body").append(this.dpDiv)
					}
				}
				this._inDialog = false
			}
			this._curInst = null
		},
		_tidyDialog : function (inst) {
			inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar")
		},
		_checkExternalClick : function (event) {
			if (!$.datepicker._curInst) {
				return
			}
			var $target = $(event.target);
			if (($target.parents("#" + $.datepicker._mainDivId).length == 0) && !$target.hasClass($.datepicker.markerClassName) && !$target.hasClass($.datepicker._triggerClass) && $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI)) {
				$.datepicker._hideDatepicker(null, "")
			}
		},
		_adjustDate : function (id, offset, period) {
			var target = $(id);
			var inst = this._getInst(target[0]);
			if (this._isDisabledDatepicker(target[0])) {
				return
			}
			this._adjustInstDate(inst, offset + (period == "M" ? this._get(inst, "showCurrentAtPos") : 0), period);
			this._updateDatepicker(inst)
		},
		_gotoToday : function (id) {
			var target = $(id);
			var inst = this._getInst(target[0]);
			if (this._get(inst, "gotoCurrent") && inst.currentDay) {
				inst.selectedDay = inst.currentDay;
				inst.drawMonth = inst.selectedMonth = inst.currentMonth;
				inst.drawYear = inst.selectedYear = inst.currentYear
			} else {
				var date = new Date();
				inst.selectedDay = date.getDate();
				inst.drawMonth = inst.selectedMonth = date.getMonth();
				inst.drawYear = inst.selectedYear = date.getFullYear()
			}
			this._notifyChange(inst);
			this._adjustDate(target)
		},
		_selectMonthYear : function (id, select, period) {
			var target = $(id);
			var inst = this._getInst(target[0]);
			inst._selectingMonthYear = false;
			inst["selected" + (period == "M" ? "Month" : "Year")] = inst["draw" + (period == "M" ? "Month" : "Year")] = parseInt(select.options[select.selectedIndex].value, 10);
			this._notifyChange(inst);
			this._adjustDate(target)
		},
		_clickMonthYear : function (id) {
			var target = $(id);
			var inst = this._getInst(target[0]);
			if (inst.input && inst._selectingMonthYear && !$.browser.msie) {
				inst.input[0].focus()
			}
			inst._selectingMonthYear = !inst._selectingMonthYear
		},
		_selectDay : function (id, month, year, td) {
			var target = $(id);
			if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
				return
			}
			var inst = this._getInst(target[0]);
			inst.selectedDay = inst.currentDay = $("a", td).html();
			inst.selectedMonth = inst.currentMonth = month;
			inst.selectedYear = inst.currentYear = year;
			if (inst.stayOpen) {
				inst.endDay = inst.endMonth = inst.endYear = null
			}
			this._selectDate(id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear));
			if (inst.stayOpen) {
				inst.rangeStart = this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));
				this._updateDatepicker(inst)
			}
		},
		_clearDate : function (id) {
			var target = $(id);
			var inst = this._getInst(target[0]);
			inst.stayOpen = false;
			inst.endDay = inst.endMonth = inst.endYear = inst.rangeStart = null;
			this._selectDate(target, "")
		},
		_selectDate : function (id, dateStr) {
			var target = $(id);
			var inst = this._getInst(target[0]);
			dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
			if (inst.input) {
				inst.input.val(dateStr)
			}
			this._updateAlternate(inst);
			var onSelect = this._get(inst, "onSelect");
			if (onSelect) {
				onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst])
			} else {
				if (inst.input) {
					inst.input.trigger("change")
				}
			}
			if (inst.inline) {
				this._updateDatepicker(inst)
			} else {
				if (!inst.stayOpen) {
					this._hideDatepicker(null, this._get(inst, "duration"));
					this._lastInput = inst.input[0];
					if (typeof(inst.input[0]) != "object") {
						inst.input[0].focus()
					}
					this._lastInput = null
				}
			}
		},
		_updateAlternate : function (inst) {
			var altField = this._get(inst, "altField");
			if (altField) {
				var altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
				var date = this._getDate(inst);
				dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
				$(altField).each(function () {
					$(this).val(dateStr)
				})
			}
		},
		noWeekends : function (date) {
			var day = date.getDay();
			return [(day > 0 && day < 6), ""]
		},
		iso8601Week : function (date) {
			var checkDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());
			var firstMon = new Date(checkDate.getFullYear(), 1 - 1, 4);
			var firstDay = firstMon.getDay() || 7;
			firstMon.setDate(firstMon.getDate() + 1 - firstDay);
			if (firstDay < 4 && checkDate < firstMon) {
				checkDate.setDate(checkDate.getDate() - 3);
				return $.datepicker.iso8601Week(checkDate)
			} else {
				if (checkDate > new Date(checkDate.getFullYear(), 12 - 1, 28)) {
					firstDay = new Date(checkDate.getFullYear() + 1, 1 - 1, 4).getDay() || 7;
					if (firstDay > 4 && (checkDate.getDay() || 7) < firstDay - 3) {
						return 1
					}
				}
			}
			return Math.floor(((checkDate - firstMon) / 86400000) / 7) + 1
		},
		parseDate : function (format, value, settings) {
			if (format == null || value == null) {
				throw "Invalid arguments"
			}
			value = (typeof value == "object" ? value.toString() : value + "");
			if (value == "") {
				return null
			}
			var shortYearCutoff = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff;
			var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
			var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
			var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
			var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
			var year = -1;
			var month = -1;
			var day = -1;
			var doy = -1;
			var literal = false;
			var lookAhead = function (match) {
				var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
				if (matches) {
					iFormat++
				}
				return matches
			};
			var getNumber = function (match) {
				lookAhead(match);
				var origSize = (match == "@" ? 14 : (match == "y" ? 4 : (match == "o" ? 3 : 2)));
				var size = origSize;
				var num = 0;
				while (size > 0 && iValue < value.length && value.charAt(iValue) >= "0" && value.charAt(iValue) <= "9") {
					num = num * 10 + parseInt(value.charAt(iValue++), 10);
					size--
				}
				if (size == origSize) {
					throw "Missing number at position " + iValue
				}
				return num
			};
			var getName = function (match, shortNames, longNames) {
				var names = (lookAhead(match) ? longNames : shortNames);
				var size = 0;
				for (var j = 0; j < names.length; j++) {
					size = Math.max(size, names[j].length)
				}
				var name = "";
				var iInit = iValue;
				while (size > 0 && iValue < value.length) {
					name += value.charAt(iValue++);
					for (var i = 0; i < names.length; i++) {
						if (name == names[i]) {
							return i + 1
						}
					}
					size--
				}
				throw "Unknown name at position " + iInit
			};
			var checkLiteral = function () {
				if (value.charAt(iValue) != format.charAt(iFormat)) {
					throw "Unexpected literal at position " + iValue
				}
				iValue++
			};
			var iValue = 0;
			for (var iFormat = 0; iFormat < format.length; iFormat++) {
				if (literal) {
					if (format.charAt(iFormat) == "'" && !lookAhead("'")) {
						literal = false
					} else {
						checkLiteral()
					}
				} else {
					switch (format.charAt(iFormat)) {
					case "d":
						day = getNumber("d");
						break;
					case "D":
						getName("D", dayNamesShort, dayNames);
						break;
					case "o":
						doy = getNumber("o");
						break;
					case "m":
						month = getNumber("m");
						break;
					case "M":
						month = getName("M", monthNamesShort, monthNames);
						break;
					case "y":
						year = getNumber("y");
						break;
					case "@":
						var date = new Date(getNumber("@"));
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case "'":
						if (lookAhead("'")) {
							checkLiteral()
						} else {
							literal = true
						}
						break;
					default:
						checkLiteral()
					}
				}
			}
			if (year == -1) {
				year = new Date().getFullYear()
			} else {
				if (year < 100) {
					year += new Date().getFullYear() - new Date().getFullYear() % 100 + (year <= shortYearCutoff ? 0 : -100)
				}
			}
			if (doy > -1) {
				month = 1;
				day = doy;
				do {
					var dim = this._getDaysInMonth(year, month - 1);
					if (day <= dim) {
						break
					}
					month++;
					day -= dim
				} while (true)
			}
			var date = this._daylightSavingAdjust(new Date(year, month - 1, day));
			if (date.getFullYear() != year || date.getMonth() + 1 != month || date.getDate() != day) {
				throw "Invalid date"
			}
			return date
		},
		ATOM : "yy-mm-dd",
		COOKIE : "D, dd M yy",
		ISO_8601 : "yy-mm-dd",
		RFC_822 : "D, d M y",
		RFC_850 : "DD, dd-M-y",
		RFC_1036 : "D, d M y",
		RFC_1123 : "D, d M yy",
		RFC_2822 : "D, d M yy",
		RSS : "D, d M y",
		TIMESTAMP : "@",
		W3C : "yy-mm-dd",
		formatDate : function (format, date, settings) {
			if (!date) {
				return ""
			}
			var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
			var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
			var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
			var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
			var lookAhead = function (match) {
				var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
				if (matches) {
					iFormat++
				}
				return matches
			};
			var formatNumber = function (match, value, len) {
				var num = "" + value;
				if (lookAhead(match)) {
					while (num.length < len) {
						num = "0" + num
					}
				}
				return num
			};
			var formatName = function (match, value, shortNames, longNames) {
				return (lookAhead(match) ? longNames[value] : shortNames[value])
			};
			var output = "";
			var literal = false;
			if (date) {
				for (var iFormat = 0; iFormat < format.length; iFormat++) {
					if (literal) {
						if (format.charAt(iFormat) == "'" && !lookAhead("'")) {
							literal = false
						} else {
							output += format.charAt(iFormat)
						}
					} else {
						switch (format.charAt(iFormat)) {
						case "d":
							output += formatNumber("d", date.getDate(), 2);
							break;
						case "D":
							output += formatName("D", date.getDay(), dayNamesShort, dayNames);
							break;
						case "o":
							var doy = date.getDate();
							for (var m = date.getMonth() - 1; m >= 0; m--) {
								doy += this._getDaysInMonth(date.getFullYear(), m)
							}
							output += formatNumber("o", doy, 3);
							break;
						case "m":
							output += formatNumber("m", date.getMonth() + 1, 2);
							break;
						case "M":
							output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
							break;
						case "y":
							output += (lookAhead("y") ? date.getFullYear() : (date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100);
							break;
						case "@":
							output += date.getTime();
							break;
						case "'":
							if (lookAhead("'")) {
								output += "'"
							} else {
								literal = true
							}
							break;
						default:
							output += format.charAt(iFormat)
						}
					}
				}
			}
			return output
		},
		_possibleChars : function (format) {
			var chars = "";
			var literal = false;
			for (var iFormat = 0; iFormat < format.length; iFormat++) {
				if (literal) {
					if (format.charAt(iFormat) == "'" && !lookAhead("'")) {
						literal = false
					} else {
						chars += format.charAt(iFormat)
					}
				} else {
					switch (format.charAt(iFormat)) {
					case "d":
					case "m":
					case "y":
					case "@":
						chars += "0123456789";
						break;
					case "D":
					case "M":
						return null;
					case "'":
						if (lookAhead("'")) {
							chars += "'"
						} else {
							literal = true
						}
						break;
					default:
						chars += format.charAt(iFormat)
					}
				}
			}
			return chars
		},
		_get : function (inst, name) {
			return inst.settings[name] !== undefined ? inst.settings[name] : this._defaults[name]
		},
		_setDateFromField : function (inst) {
			var dateFormat = this._get(inst, "dateFormat");
			var dates = inst.input ? inst.input.val() : null;
			inst.endDay = inst.endMonth = inst.endYear = null;
			var date = defaultDate = this._getDefaultDate(inst);
			var settings = this._getFormatConfig(inst);
			try {
				date = this.parseDate(dateFormat, dates, settings) || defaultDate
			} catch (event) {
				this.log(event);
				date = defaultDate
			}
			inst.selectedDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = date.getFullYear();
			inst.currentDay = (dates ? date.getDate() : 0);
			inst.currentMonth = (dates ? date.getMonth() : 0);
			inst.currentYear = (dates ? date.getFullYear() : 0);
			this._adjustInstDate(inst)
		},
		_getDefaultDate : function (inst) {
			var date = this._determineDate(this._get(inst, "defaultDate"), new Date());
			var minDate = this._getMinMaxDate(inst, "min", true);
			var maxDate = this._getMinMaxDate(inst, "max");
			date = (minDate && date < minDate ? minDate : date);
			date = (maxDate && date > maxDate ? maxDate : date);
			return date
		},
		_determineDate : function (date, defaultDate) {
			var offsetNumeric = function (offset) {
				var date = new Date();
				date.setDate(date.getDate() + offset);
				return date
			};
			var offsetString = function (offset, getDaysInMonth) {
				var date = new Date();
				var year = date.getFullYear();
				var month = date.getMonth();
				var day = date.getDate();
				var pattern = /([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g;
				var matches = pattern.exec(offset);
				while (matches) {
					switch (matches[2] || "d") {
					case "d":
					case "D":
						day += parseInt(matches[1], 10);
						break;
					case "w":
					case "W":
						day += parseInt(matches[1], 10) * 7;
						break;
					case "m":
					case "M":
						month += parseInt(matches[1], 10);
						day = Math.min(day, getDaysInMonth(year, month));
						break;
					case "y":
					case "Y":
						year += parseInt(matches[1], 10);
						day = Math.min(day, getDaysInMonth(year, month));
						break
					}
					matches = pattern.exec(offset)
				}
				return new Date(year, month, day)
			};
			date = (date == null ? defaultDate : (typeof date == "string" ? offsetString(date, this._getDaysInMonth) : (typeof date == "number" ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : date)));
			date = (date && date.toString() == "Invalid Date" ? defaultDate : date);
			if (date) {
				date.setHours(0);
				date.setMinutes(0);
				date.setSeconds(0);
				date.setMilliseconds(0)
			}
			return this._daylightSavingAdjust(date)
		},
		_daylightSavingAdjust : function (date) {
			if (!date) {
				return null
			}
			date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
			return date
		},
		_setDate : function (inst, date, endDate) {
			var clear = !(date);
			var origMonth = inst.selectedMonth;
			var origYear = inst.selectedYear;
			date = this._determineDate(date, new Date());
			inst.selectedDay = inst.currentDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = inst.currentMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = inst.currentYear = date.getFullYear();
			if (origMonth != inst.selectedMonth || origYear != inst.selectedYear) {
				this._notifyChange(inst)
			}
			this._adjustInstDate(inst);
			if (inst.input) {
				inst.input.val(clear ? "" : this._formatDate(inst))
			}
		},
		_getDate : function (inst) {
			var startDate = (!inst.currentYear || (inst.input && inst.input.val() == "") ? null : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
			return startDate
		},
		_generateHTML : function (inst) {
			var today = new Date();
			today = this._daylightSavingAdjust(new Date(today.getFullYear(), today.getMonth(), today.getDate()));
			var isRTL = this._get(inst, "isRTL");
			var showButtonPanel = this._get(inst, "showButtonPanel");
			var hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext");
			var navigationAsDateFormat = this._get(inst, "navigationAsDateFormat");
			var numMonths = this._getNumberOfMonths(inst);
			var showCurrentAtPos = this._get(inst, "showCurrentAtPos");
			var stepMonths = this._get(inst, "stepMonths");
			var stepBigMonths = this._get(inst, "stepBigMonths");
			var isMultiMonth = (numMonths[0] != 1 || numMonths[1] != 1);
			var currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) : new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
			var minDate = this._getMinMaxDate(inst, "min", true);
			var maxDate = this._getMinMaxDate(inst, "max");
			var drawMonth = inst.drawMonth - showCurrentAtPos;
			var drawYear = inst.drawYear;
			if (drawMonth < 0) {
				drawMonth += 12;
				drawYear--
			}
			if (maxDate) {
				var maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(), maxDate.getMonth() - numMonths[1] + 1, maxDate.getDate()));
				maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
				while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
					drawMonth--;
					if (drawMonth < 0) {
						drawMonth = 11;
						drawYear--
					}
				}
			}
			inst.drawMonth = drawMonth;
			inst.drawYear = drawYear;
			var prevText = this._get(inst, "prevText");
			prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText, this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)), this._getFormatConfig(inst)));
			var prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ? '<a class="ui-datepicker-prev ui-corner-all" onclick="DP_jQuery.datepicker._adjustDate(\'#' + inst.id + "', -" + stepMonths + ", 'M');\" title=\"" + prevText + '"><span class="ui-icon ui-icon-circle-triangle-' + (isRTL ? "e" : "w") + '">' + prevText + "</span></a>" : (hideIfNoPrevNext ? "" : '<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="' + prevText + '"><span class="ui-icon ui-icon-circle-triangle-' + (isRTL ? "e" : "w") + '">' + prevText + "</span></a>"));
			var nextText = this._get(inst, "nextText");
			nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText, this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)), this._getFormatConfig(inst)));
			var next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ? '<a class="ui-datepicker-next ui-corner-all" onclick="DP_jQuery.datepicker._adjustDate(\'#' + inst.id + "', +" + stepMonths + ", 'M');\" title=\"" + nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + (isRTL ? "w" : "e") + '">' + nextText + "</span></a>" : (hideIfNoPrevNext ? "" : '<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="' + nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + (isRTL ? "w" : "e") + '">' + nextText + "</span></a>"));
			var currentText = this._get(inst, "currentText");
			var gotoDate = (this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today);
			currentText = (!navigationAsDateFormat ? currentText : this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));
			var controls = (!inst.inline ? '<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" onclick="DP_jQuery.datepicker._hideDatepicker();">' + this._get(inst, "closeText") + "</button>" : "");
			var buttonPanel = (showButtonPanel) ? '<div class="ui-datepicker-buttonpane ui-widget-content">' + (isRTL ? controls : "") + (this._isInRange(inst, gotoDate) ? '<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" onclick="DP_jQuery.datepicker._gotoToday(\'#' + inst.id + "');\">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";
			var firstDay = parseInt(this._get(inst, "firstDay"), 10);
			firstDay = (isNaN(firstDay) ? 0 : firstDay);
			var dayNames = this._get(inst, "dayNames");
			var dayNamesShort = this._get(inst, "dayNamesShort");
			var dayNamesMin = this._get(inst, "dayNamesMin");
			var monthNames = this._get(inst, "monthNames");
			var monthNamesShort = this._get(inst, "monthNamesShort");
			var beforeShowDay = this._get(inst, "beforeShowDay");
			var showOtherMonths = this._get(inst, "showOtherMonths");
			var calculateWeek = this._get(inst, "calculateWeek") || this.iso8601Week;
			var endDate = inst.endDay ? this._daylightSavingAdjust(new Date(inst.endYear, inst.endMonth, inst.endDay)) : currentDate;
			var defaultDate = this._getDefaultDate(inst);
			var html = "";
			for (var row = 0; row < numMonths[0]; row++) {
				var group = "";
				for (var col = 0; col < numMonths[1]; col++) {
					var selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
					var cornerClass = " ui-corner-all";
					var calender = "";
					if (isMultiMonth) {
						calender += '<div class="ui-datepicker-group ui-datepicker-group-';
						switch (col) {
						case 0:
							calender += "first";
							cornerClass = " ui-corner-" + (isRTL ? "right" : "left");
							break;
						case numMonths[1] - 1:
							calender += "last";
							cornerClass = " ui-corner-" + (isRTL ? "left" : "right");
							break;
						default:
							calender += "middle";
							cornerClass = "";
							break
						}
						calender += '">'
					}
					calender += '<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix' + cornerClass + '">' + (/all|left/.test(cornerClass) && row == 0 ? (isRTL ? next : prev) : "") + (/all|right/.test(cornerClass) && row == 0 ? (isRTL ? prev : next) : "") + this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, selectedDate, row > 0 || col > 0, monthNames, monthNamesShort) + '</div><table class="ui-datepicker-calendar"><thead><tr>';
					var thead = "";
					for (var dow = 0; dow < 7; dow++) {
						var day = (dow + firstDay) % 7;
						thead += "<th" + ((dow + firstDay + 6) % 7 >= 5 ? ' class="ui-datepicker-week-end"' : "") + '><span title="' + dayNames[day] + '">' + dayNamesMin[day] + "</span></th>"
					}
					calender += thead + "</tr></thead><tbody>";
					var daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
					if (drawYear == inst.selectedYear && drawMonth == inst.selectedMonth) {
						inst.selectedDay = Math.min(inst.selectedDay, daysInMonth)
					}
					var leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
					var numRows = (isMultiMonth ? 6 : Math.ceil((leadDays + daysInMonth) / 7));
					var printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
					for (var dRow = 0; dRow < numRows; dRow++) {
						calender += "<tr>";
						var tbody = "";
						for (var dow = 0; dow < 7; dow++) {
							var daySettings = (beforeShowDay ? beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, ""]);
							var otherMonth = (printDate.getMonth() != drawMonth);
							var unselectable = otherMonth || !daySettings[0] || (minDate && printDate < minDate) || (maxDate && printDate > maxDate);
							tbody += '<td class="' + ((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + (otherMonth ? " ui-datepicker-other-month" : "") + ((printDate.getTime() == selectedDate.getTime() && drawMonth == inst.selectedMonth && inst._keyEvent) || (defaultDate.getTime() == printDate.getTime() && defaultDate.getTime() == selectedDate.getTime()) ? " " + this._dayOverClass : "") + (unselectable ? " " + this._unselectableClass + " ui-state-disabled" : "") + (otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + (printDate.getTime() >= currentDate.getTime() && printDate.getTime() <= endDate.getTime() ? " " + this._currentClass : "") + (printDate.getTime() == today.getTime() ? " ui-datepicker-today" : "")) + '"' + ((!otherMonth || showOtherMonths) && daySettings[2] ? ' title="' + daySettings[2] + '"' : "") + (unselectable ? "" : " onclick=\"DP_jQuery.datepicker._selectDay('#" + inst.id + "'," + drawMonth + "," + drawYear + ', this);return false;"') + ">" + (otherMonth ? (showOtherMonths ? printDate.getDate() : "&#xa0;") : (unselectable ? '<span class="ui-state-default">' + printDate.getDate() + "</span>" : '<a class="ui-state-default' + (printDate.getTime() == today.getTime() ? " ui-state-highlight" : "") + (printDate.getTime() >= currentDate.getTime() && printDate.getTime() <= endDate.getTime() ? " ui-state-active" : "") + '" href="#">' + printDate.getDate() + "</a>")) + "</td>";
							printDate.setDate(printDate.getDate() + 1);
							printDate = this._daylightSavingAdjust(printDate)
						}
						calender += tbody + "</tr>"
					}
					drawMonth++;
					if (drawMonth > 11) {
						drawMonth = 0;
						drawYear++
					}
					calender += "</tbody></table>" + (isMultiMonth ? "</div>" + ((numMonths[0] > 0 && col == numMonths[1] - 1) ? '<div class="ui-datepicker-row-break"></div>' : "") : "");
					group += calender
				}
				html += group
			}
			html += buttonPanel + ($.browser.msie && parseInt($.browser.version, 10) < 7 && !inst.inline ? '<iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"></iframe>' : "");
			inst._keyEvent = false;
			return html
		},
		_generateMonthYearHeader : function (inst, drawMonth, drawYear, minDate, maxDate, selectedDate, secondary, monthNames, monthNamesShort) {
			minDate = (inst.rangeStart && minDate && selectedDate < minDate ? selectedDate : minDate);
			var changeMonth = this._get(inst, "changeMonth");
			var changeYear = this._get(inst, "changeYear");
			var showMonthAfterYear = this._get(inst, "showMonthAfterYear");
			var html = '<div class="ui-datepicker-title">';
			var monthHtml = "";
			if (secondary || !changeMonth) {
				monthHtml += '<span class="ui-datepicker-month">' + monthNames[drawMonth] + "</span> "
			} else {
				var inMinYear = (minDate && minDate.getFullYear() == drawYear);
				var inMaxYear = (maxDate && maxDate.getFullYear() == drawYear);
				monthHtml += '<select class="ui-datepicker-month" onchange="DP_jQuery.datepicker._selectMonthYear(\'#' + inst.id + "', this, 'M');\" onclick=\"DP_jQuery.datepicker._clickMonthYear('#" + inst.id + "');\">";
				for (var month = 0; month < 12; month++) {
					if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
						monthHtml += '<option value="' + month + '"' + (month == drawMonth ? ' selected="selected"' : "") + ">" + monthNamesShort[month] + "</option>"
					}
				}
				monthHtml += "</select>"
			}
			if (!showMonthAfterYear) {
				html += monthHtml + ((secondary || changeMonth || changeYear) && (!(changeMonth && changeYear)) ? "&#xa0;" : "")
			}
			if (secondary || !changeYear) {
				html += '<span class="ui-datepicker-year">' + drawYear + "</span>"
			} else {
				var years = this._get(inst, "yearRange").split(":");
				var year = 0;
				var endYear = 0;
				if (years.length != 2) {
					year = drawYear - 10;
					endYear = drawYear + 10
				} else {
					if (years[0].charAt(0) == "+" || years[0].charAt(0) == "-") {
						year = drawYear + parseInt(years[0], 10);
						endYear = drawYear + parseInt(years[1], 10)
					} else {
						year = parseInt(years[0], 10);
						endYear = parseInt(years[1], 10)
					}
				}
				year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
				endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
				html += '<select class="ui-datepicker-year" onchange="DP_jQuery.datepicker._selectMonthYear(\'#' + inst.id + "', this, 'Y');\" onclick=\"DP_jQuery.datepicker._clickMonthYear('#" + inst.id + "');\">";
				for (; year <= endYear; year++) {
					html += '<option value="' + year + '"' + (year == drawYear ? ' selected="selected"' : "") + ">" + year + "</option>"
				}
				html += "</select>"
			}
			if (showMonthAfterYear) {
				html += (secondary || changeMonth || changeYear ? "&#xa0;" : "") + monthHtml
			}
			html += "</div>";
			return html
		},
		_adjustInstDate : function (inst, offset, period) {
			var year = inst.drawYear + (period == "Y" ? offset : 0);
			var month = inst.drawMonth + (period == "M" ? offset : 0);
			var day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period == "D" ? offset : 0);
			var date = this._daylightSavingAdjust(new Date(year, month, day));
			var minDate = this._getMinMaxDate(inst, "min", true);
			var maxDate = this._getMinMaxDate(inst, "max");
			date = (minDate && date < minDate ? minDate : date);
			date = (maxDate && date > maxDate ? maxDate : date);
			inst.selectedDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = date.getFullYear();
			if (period == "M" || period == "Y") {
				this._notifyChange(inst)
			}
		},
		_notifyChange : function (inst) {
			var onChange = this._get(inst, "onChangeMonthYear");
			if (onChange) {
				onChange.apply((inst.input ? inst.input[0] : null), [inst.selectedYear, inst.selectedMonth + 1, inst])
			}
		},
		_getNumberOfMonths : function (inst) {
			var numMonths = this._get(inst, "numberOfMonths");
			return (numMonths == null ? [1, 1] : (typeof numMonths == "number" ? [1, numMonths] : numMonths))
		},
		_getMinMaxDate : function (inst, minMax, checkRange) {
			var date = this._determineDate(this._get(inst, minMax + "Date"), null);
			return (!checkRange || !inst.rangeStart ? date : (!date || inst.rangeStart > date ? inst.rangeStart : date))
		},
		_getDaysInMonth : function (year, month) {
			return 32 - new Date(year, month, 32).getDate()
		},
		_getFirstDayOfMonth : function (year, month) {
			return new Date(year, month, 1).getDay()
		},
		_canAdjustMonth : function (inst, offset, curYear, curMonth) {
			var numMonths = this._getNumberOfMonths(inst);
			var date = this._daylightSavingAdjust(new Date(curYear, curMonth + (offset < 0 ? offset : numMonths[1]), 1));
			if (offset < 0) {
				date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()))
			}
			return this._isInRange(inst, date)
		},
		_isInRange : function (inst, date) {
			var newMinDate = (!inst.rangeStart ? null : this._daylightSavingAdjust(new Date(inst.selectedYear, inst.selectedMonth, inst.selectedDay)));
			newMinDate = (newMinDate && inst.rangeStart < newMinDate ? inst.rangeStart : newMinDate);
			var minDate = newMinDate || this._getMinMaxDate(inst, "min");
			var maxDate = this._getMinMaxDate(inst, "max");
			return ((!minDate || date >= minDate) && (!maxDate || date <= maxDate))
		},
		_getFormatConfig : function (inst) {
			var shortYearCutoff = this._get(inst, "shortYearCutoff");
			shortYearCutoff = (typeof shortYearCutoff != "string" ? shortYearCutoff : new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
			return {
				shortYearCutoff : shortYearCutoff,
				dayNamesShort : this._get(inst, "dayNamesShort"),
				dayNames : this._get(inst, "dayNames"),
				monthNamesShort : this._get(inst, "monthNamesShort"),
				monthNames : this._get(inst, "monthNames")
			}
		},
		_formatDate : function (inst, day, month, year) {
			if (!day) {
				inst.currentDay = inst.selectedDay;
				inst.currentMonth = inst.selectedMonth;
				inst.currentYear = inst.selectedYear
			}
			var date = (day ? (typeof day == "object" ? day : this._daylightSavingAdjust(new Date(year, month, day))) : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
			return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst))
		}
	});
	function extendRemove(target, props) {
		$.extend(target, props);
		for (var name in props) {
			if (props[name] == null || props[name] == undefined) {
				target[name] = props[name]
			}
		}
		return target
	}
	function isArray(a) {
		return (a && (($.browser.safari && typeof a == "object" && a.length) || (a.constructor && a.constructor.toString().match(/\Array\(\)/))))
	}
	$.fn.datepicker = function (options) {
		if (!$.datepicker.initialized) {
			$(document).mousedown($.datepicker._checkExternalClick).find("body").append($.datepicker.dpDiv);
			$.datepicker.initialized = true
		}
		var otherArgs = Array.prototype.slice.call(arguments, 1);
		if (typeof options == "string" && (options == "isDisabled" || options == "getDate")) {
			return $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this[0]].concat(otherArgs))
		}
		return this.each(function () {
			typeof options == "string" ? $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this].concat(otherArgs)) : $.datepicker._attachDatepicker(this, options)
		})
	};
	$.datepicker = new Datepicker();
	$.datepicker.initialized = false;
	$.datepicker.uuid = new Date().getTime();
	$.datepicker.version = "1.7";
	window.DP_jQuery = $
})(jQuery);

(function (c) {
	var b = {
		dragStart : "start.draggable",
		drag : "drag.draggable",
		dragStop : "stop.draggable",
		maxHeight : "maxHeight.resizable",
		minHeight : "minHeight.resizable",
		maxWidth : "maxWidth.resizable",
		minWidth : "minWidth.resizable",
		resizeStart : "start.resizable",
		resize : "drag.resizable",
		resizeStop : "stop.resizable"
	},
	a = "ui-dialog ui-widget ui-widget-content ui-corner-all ";
	c.widget("ui.dialog", {
		_init : function () {
			this.originalTitle = this.element.attr("title");
			var l = this,
			m = this.options,
			j = m.title || this.originalTitle || "&nbsp;",
			e = c.ui.dialog.getTitleId(this.element),
			k = (this.uiDialog = c("<div/>")).appendTo(document.body).hide().addClass(a + m.dialogClass).css({
				position : "absolute",
				overflow : "hidden",
				zIndex : m.zIndex
			}).attr("tabIndex", -1).css("outline", 0).keydown(function (n) {
				(m.closeOnEscape && n.keyCode && n.keyCode == c.ui.keyCode.ESCAPE && l.close(n))
			}).attr({
				role : "dialog",
				"aria-labelledby" : e
			}).mousedown(function (n) {
				l.moveToTop(false, n)
			}),
			g = this.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(k),
			f = (this.uiDialogTitlebar = c("<div></div>")).addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").prependTo(k),
			i = c('<a href="#"/>').addClass("ui-dialog-titlebar-close ui-corner-all").attr("role", "button").hover(function () {
					i.addClass("ui-state-hover")
				}, function () {
					i.removeClass("ui-state-hover")
				}).focus(function () {
					i.addClass("ui-state-focus")
				}).blur(function () {
					i.removeClass("ui-state-focus")
				}).mousedown(function (n) {
					n.stopPropagation()
				}).click(function (n) {
					l.close(n);
					return false
				}).appendTo(f),
			h = (this.uiDialogTitlebarCloseText = c("<span/>")).addClass("ui-icon ui-icon-closethick").text(m.closeText).appendTo(i),
			d = c("<span/>").addClass("ui-dialog-title").attr("id", e).html(j).prependTo(f);
			f.find("*").add(f).disableSelection();
			(m.draggable && c.fn.draggable && this._makeDraggable());
			(m.resizable && c.fn.resizable && this._makeResizable());
			this._createButtons(m.buttons);
			this._isOpen = false;
			(m.bgiframe && c.fn.bgiframe && k.bgiframe());
			(m.autoOpen && this.open())
		},
		destroy : function () {
			(this.overlay && this.overlay.destroy());
			this.uiDialog.hide();
			this.element.unbind(".dialog").removeData("dialog").removeClass("ui-dialog-content ui-widget-content").hide().appendTo("body");
			this.uiDialog.remove();
			(this.originalTitle && this.element.attr("title", this.originalTitle))
		},
		close : function (e) {
			var d = this;
			if (false === d._trigger("beforeclose", e)) {
				return
			}
			(d.overlay && d.overlay.destroy());
			d.uiDialog.unbind("keypress.ui-dialog");
			(d.options.hide ? d.uiDialog.hide(d.options.hide, function () {
					d._trigger("close", e)
				}) : d.uiDialog.hide() && d._trigger("close", e));
			c.ui.dialog.overlay.resize();
			d._isOpen = false
		},
		isOpen : function () {
			return this._isOpen
		},
		moveToTop : function (f, e) {
			if ((this.options.modal && !f) || (!this.options.stack && !this.options.modal)) {
				return this._trigger("focus", e)
			}
			if (this.options.zIndex > c.ui.dialog.maxZ) {
				c.ui.dialog.maxZ = this.options.zIndex
			}
			(this.overlay && this.overlay.$el.css("z-index", c.ui.dialog.overlay.maxZ = ++c.ui.dialog.maxZ));
			var d = {
				scrollTop : this.element.attr("scrollTop"),
				scrollLeft : this.element.attr("scrollLeft")
			};
			this.uiDialog.css("z-index", ++c.ui.dialog.maxZ);
			this.element.attr(d);
			this._trigger("focus", e)
		},
		open : function () {
			if (this._isOpen) {
				return
			}
			var e = this.options,
			d = this.uiDialog;
			this.overlay = e.modal ? new c.ui.dialog.overlay(this) : null;
			(d.next().length && d.appendTo("body"));
			this._size();
			this._position(e.position);
			d.show(e.show);
			this.moveToTop(true);
			(e.modal && d.bind("keypress.ui-dialog", function (h) {
					if (h.keyCode != c.ui.keyCode.TAB) {
						return
					}
					var g = c(":tabbable", this),
					i = g.filter(":first")[0],
					f = g.filter(":last")[0];
					if (h.target == f && !h.shiftKey) {
						setTimeout(function () {
							i.focus()
						}, 1)
					} else {
						if (h.target == i && h.shiftKey) {
							setTimeout(function () {
								f.focus()
							}, 1)
						}
					}
				}));
			c([]).add(d.find(".ui-dialog-content :tabbable:first")).add(d.find(".ui-dialog-buttonpane :tabbable:first")).add(d).filter(":first").focus();
			this._trigger("open");
			this._isOpen = true
		},
		_createButtons : function (g) {
			var f = this,
			d = false,
			e = c("<div></div>").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix");
			this.uiDialog.find(".ui-dialog-buttonpane").remove();
			(typeof g == "object" && g !== null && c.each(g, function () {
					return !(d = true)
				}));
			if (d) {
				c.each(g, function (h, i) {
					c('<button type="button"></button>').addClass("ui-state-default ui-corner-all").text(h).click(function () {
						i.apply(f.element[0], arguments)
					}).hover(function () {
						c(this).addClass("ui-state-hover")
					}, function () {
						c(this).removeClass("ui-state-hover")
					}).focus(function () {
						c(this).addClass("ui-state-focus")
					}).blur(function () {
						c(this).removeClass("ui-state-focus")
					}).appendTo(e)
				});
				e.appendTo(this.uiDialog)
			}
		},
		_makeDraggable : function () {
			var d = this,
			f = this.options,
			e;
			this.uiDialog.draggable({
				cancel : ".ui-dialog-content",
				handle : ".ui-dialog-titlebar",
				containment : "document",
				start : function () {
					e = f.height;
					c(this).height(c(this).height()).addClass("ui-dialog-dragging");
					(f.dragStart && f.dragStart.apply(d.element[0], arguments))
				},
				drag : function () {
					(f.drag && f.drag.apply(d.element[0], arguments))
				},
				stop : function () {
					c(this).removeClass("ui-dialog-dragging").height(e);
					(f.dragStop && f.dragStop.apply(d.element[0], arguments));
					c.ui.dialog.overlay.resize()
				}
			})
		},
		_makeResizable : function (g) {
			g = (g === undefined ? this.options.resizable : g);
			var d = this,
			f = this.options,
			e = typeof g == "string" ? g : "n,e,s,w,se,sw,ne,nw";
			this.uiDialog.resizable({
				cancel : ".ui-dialog-content",
				alsoResize : this.element,
				maxWidth : f.maxWidth,
				maxHeight : f.maxHeight,
				minWidth : f.minWidth,
				minHeight : f.minHeight,
				start : function () {
					c(this).addClass("ui-dialog-resizing");
					(f.resizeStart && f.resizeStart.apply(d.element[0], arguments))
				},
				resize : function () {
					(f.resize && f.resize.apply(d.element[0], arguments))
				},
				handles : e,
				stop : function () {
					c(this).removeClass("ui-dialog-resizing");
					f.height = c(this).height();
					f.width = c(this).width();
					(f.resizeStop && f.resizeStop.apply(d.element[0], arguments));
					c.ui.dialog.overlay.resize()
				}
			}).find(".ui-resizable-se").addClass("ui-icon ui-icon-grip-diagonal-se")
		},
		_position : function (i) {
			var e = c(window),
			f = c(document),
			g = f.scrollTop(),
			d = f.scrollLeft(),
			h = g;
			if (c.inArray(i, ["center", "top", "right", "bottom", "left"]) >= 0) {
				i = [i == "right" || i == "left" ? i : "center", i == "top" || i == "bottom" ? i : "middle"]
			}
			if (i.constructor != Array) {
				i = ["center", "middle"]
			}
			if (i[0].constructor == Number) {
				d += i[0]
			} else {
				switch (i[0]) {
				case "left":
					d += 0;
					break;
				case "right":
					d += e.width() - this.uiDialog.outerWidth();
					break;
				default:
				case "center":
					d += (e.width() - this.uiDialog.outerWidth()) / 2
				}
			}
			if (i[1].constructor == Number) {
				g += i[1]
			} else {
				switch (i[1]) {
				case "top":
					g += 0;
					break;
				case "bottom":
					g += e.height() - this.uiDialog.outerHeight();
					break;
				default:
				case "middle":
					g += (e.height() - this.uiDialog.outerHeight()) / 2
				}
			}
			g = Math.max(g, h);
			this.uiDialog.css({
				top : g,
				left : d
			})
		},
		_setData : function (e, f) {
			(b[e] && this.uiDialog.data(b[e], f));
			switch (e) {
			case "buttons":
				this._createButtons(f);
				break;
			case "closeText":
				this.uiDialogTitlebarCloseText.text(f);
				break;
			case "dialogClass":
				this.uiDialog.removeClass(this.options.dialogClass).addClass(a + f);
				break;
			case "draggable":
				(f ? this._makeDraggable() : this.uiDialog.draggable("destroy"));
				break;
			case "height":
				this.uiDialog.height(f);
				break;
			case "position":
				this._position(f);
				break;
			case "resizable":
				var d = this.uiDialog,
				g = this.uiDialog.is(":data(resizable)");
				(g && !f && d.resizable("destroy"));
				(g && typeof f == "string" && d.resizable("option", "handles", f));
				(g || this._makeResizable(f));
				break;
			case "title":
				c(".ui-dialog-title", this.uiDialogTitlebar).html(f || "&nbsp;");
				break;
			case "width":
				this.uiDialog.width(f);
				break
			}
			c.widget.prototype._setData.apply(this, arguments)
		},
		_size : function () {
			var e = this.options;
			this.element.css({
				height : 0,
				minHeight : 0,
				width : "auto"
			});
			var d = this.uiDialog.css({
					height : "auto",
					width : e.width
				}).height();
			this.element.css({
				minHeight : Math.max(e.minHeight - d, 0),
				height : e.height == "auto" ? "auto" : Math.max(e.height - d, 0)
			})
		}
	});
	c.extend(c.ui.dialog, {
		version : "1.7",
		defaults : {
			autoOpen : true,
			bgiframe : false,
			buttons : {},
			closeOnEscape : true,
			closeText : "close",
			dialogClass : "",
			draggable : true,
			hide : null,
			height : "auto",
			maxHeight : false,
			maxWidth : false,
			minHeight : 150,
			minWidth : 150,
			modal : false,
			position : "center",
			resizable : true,
			show : null,
			stack : true,
			title : "",
			width : 300,
			zIndex : 1000
		},
		getter : "isOpen",
		uuid : 0,
		maxZ : 0,
		getTitleId : function (d) {
			return "ui-dialog-title-" + (d.attr("id") || ++this.uuid)
		},
		overlay : function (d) {
			this.$el = c.ui.dialog.overlay.create(d)
		}
	});
	c.extend(c.ui.dialog.overlay, {
		instances : [],
		maxZ : 0,
		events : c.map("focus,mousedown,mouseup,keydown,keypress,click".split(","), function (d) {
			return d + ".dialog-overlay"
		}).join(" "),
		create : function (e) {
			if (this.instances.length === 0) {
				setTimeout(function () {
					c(document).bind(c.ui.dialog.overlay.events, function (f) {
						var g = c(f.target).parents(".ui-dialog").css("zIndex") || 0;
						return (g > c.ui.dialog.overlay.maxZ)
					})
				}, 1);
				c(document).bind("keydown.dialog-overlay", function (f) {
					(e.options.closeOnEscape && f.keyCode && f.keyCode == c.ui.keyCode.ESCAPE && e.close(f))
				});
				c(window).bind("resize.dialog-overlay", c.ui.dialog.overlay.resize)
			}
			var d = c("<div></div>").appendTo(document.body).addClass("ui-widget-overlay").css({
					width : this.width(),
					height : this.height()
				});
			(e.options.bgiframe && c.fn.bgiframe && d.bgiframe());
			this.instances.push(d);
			return d
		},
		destroy : function (d) {
			this.instances.splice(c.inArray(this.instances, d), 1);
			if (this.instances.length === 0) {
				c([document, window]).unbind(".dialog-overlay")
			}
			d.remove()
		},
		height : function () {
			if (c.browser.msie && c.browser.version < 7) {
				var e = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);
				var d = Math.max(document.documentElement.offsetHeight, document.body.offsetHeight);
				if (e < d) {
					return c(window).height() + "px"
				} else {
					return e + "px"
				}
			} else {
				return c(document).height() + "px"
			}
		},
		width : function () {
			if (c.browser.msie && c.browser.version < 7) {
				var d = Math.max(document.documentElement.scrollWidth, document.body.scrollWidth);
				var e = Math.max(document.documentElement.offsetWidth, document.body.offsetWidth);
				if (d < e) {
					return c(window).width() + "px"
				} else {
					return d + "px"
				}
			} else {
				return c(document).width() + "px"
			}
		},
		resize : function () {
			var d = c([]);
			c.each(c.ui.dialog.overlay.instances, function () {
				d = d.add(this)
			});
			d.css({
				width : 0,
				height : 0
			}).css({
				width : c.ui.dialog.overlay.width(),
				height : c.ui.dialog.overlay.height()
			})
		}
	});
	c.extend(c.ui.dialog.overlay.prototype, {
		destroy : function () {
			c.ui.dialog.overlay.destroy(this.$el)
		}
	})
})(jQuery);
(function (a) {
	a.widget("ui.progressbar", {
		_init : function () {
			this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({
				role : "progressbar",
				"aria-valuemin" : this._valueMin(),
				"aria-valuemax" : this._valueMax(),
				"aria-valuenow" : this._value()
			});
			this.valueDiv = a('<div class="ui-progressbar-value ui-widget-header ui-corner-left"></div>').appendTo(this.element);
			this._refreshValue()
		},
		destroy : function () {
			this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow").removeData("progressbar").unbind(".progressbar");
			this.valueDiv.remove();
			a.widget.prototype.destroy.apply(this, arguments)
		},
		value : function (b) {
			arguments.length && this._setData("value", b);
			return this._value()
		},
		_setData : function (b, c) {
			switch (b) {
			case "value":
				this.options.value = c;
				this._refreshValue();
				this._trigger("change", null, {});
				break
			}
			a.widget.prototype._setData.apply(this, arguments)
		},
		_value : function () {
			var b = this.options.value;
			if (b < this._valueMin()) {
				b = this._valueMin()
			}
			if (b > this._valueMax()) {
				b = this._valueMax()
			}
			return b
		},
		_valueMin : function () {
			var b = 0;
			return b
		},
		_valueMax : function () {
			var b = 100;
			return b
		},
		_refreshValue : function () {
			var b = this.value();
			this.valueDiv[b == this._valueMax() ? "addClass" : "removeClass"]("ui-corner-right");
			this.valueDiv.width(b + "%");
			this.element.attr("aria-valuenow", b)
		}
	});
	a.extend(a.ui.progressbar, {
		version : "1.7",
		defaults : {
			value : 0
		}
	})
})(jQuery);
(function (a) {
	a.widget("ui.slider", a.extend({}, a.ui.mouse, {
			_init : function () {
				var b = this,
				c = this.options;
				this._keySliding = false;
				this._handleIndex = null;
				this._detectOrientation();
				this._mouseInit();
				this.element.addClass("ui-slider ui-slider-" + this.orientation + " ui-widget ui-widget-content ui-corner-all");
				this.range = a([]);
				if (c.range) {
					if (c.range === true) {
						this.range = a("<div></div>");
						if (!c.values) {
							c.values = [this._valueMin(), this._valueMin()]
						}
						if (c.values.length && c.values.length != 2) {
							c.values = [c.values[0], c.values[0]]
						}
					} else {
						this.range = a("<div></div>")
					}
					this.range.appendTo(this.element).addClass("ui-slider-range");
					if (c.range == "min" || c.range == "max") {
						this.range.addClass("ui-slider-range-" + c.range)
					}
					this.range.addClass("ui-widget-header")
				}
				if (a(".ui-slider-handle", this.element).length == 0) {
					a('<a href="#"></a>').appendTo(this.element).addClass("ui-slider-handle")
				}
				if (c.values && c.values.length) {
					while (a(".ui-slider-handle", this.element).length < c.values.length) {
						a('<a href="#"></a>').appendTo(this.element).addClass("ui-slider-handle")
					}
				}
				this.handles = a(".ui-slider-handle", this.element).addClass("ui-state-default ui-corner-all");
				this.handle = this.handles.eq(0);
				this.handles.add(this.range).filter("a").click(function (d) {
					d.preventDefault()
				}).hover(function () {
					a(this).addClass("ui-state-hover")
				}, function () {
					a(this).removeClass("ui-state-hover")
				}).focus(function () {
					a(".ui-slider .ui-state-focus").removeClass("ui-state-focus");
					a(this).addClass("ui-state-focus")
				}).blur(function () {
					a(this).removeClass("ui-state-focus")
				});
				this.handles.each(function (d) {
					a(this).data("index.ui-slider-handle", d)
				});
				this.handles.keydown(function (i) {
					var f = true;
					var e = a(this).data("index.ui-slider-handle");
					if (b.options.disabled) {
						return
					}
					switch (i.keyCode) {
					case a.ui.keyCode.HOME:
					case a.ui.keyCode.END:
					case a.ui.keyCode.UP:
					case a.ui.keyCode.RIGHT:
					case a.ui.keyCode.DOWN:
					case a.ui.keyCode.LEFT:
						f = false;
						if (!b._keySliding) {
							b._keySliding = true;
							a(this).addClass("ui-state-active");
							b._start(i, e)
						}
						break
					}
					var g,
					d,
					h = b._step();
					if (b.options.values && b.options.values.length) {
						g = d = b.values(e)
					} else {
						g = d = b.value()
					}
					switch (i.keyCode) {
					case a.ui.keyCode.HOME:
						d = b._valueMin();
						break;
					case a.ui.keyCode.END:
						d = b._valueMax();
						break;
					case a.ui.keyCode.UP:
					case a.ui.keyCode.RIGHT:
						if (g == b._valueMax()) {
							return
						}
						d = g + h;
						break;
					case a.ui.keyCode.DOWN:
					case a.ui.keyCode.LEFT:
						if (g == b._valueMin()) {
							return
						}
						d = g - h;
						break
					}
					b._slide(i, e, d);
					return f
				}).keyup(function (e) {
					var d = a(this).data("index.ui-slider-handle");
					if (b._keySliding) {
						b._stop(e, d);
						b._change(e, d);
						b._keySliding = false;
						a(this).removeClass("ui-state-active")
					}
				});
				this._refreshValue()
			},
			destroy : function () {
				this.handles.remove();
				this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical ui-slider-disabled ui-widget ui-widget-content ui-corner-all").removeData("slider").unbind(".slider");
				this._mouseDestroy()
			},
			_mouseCapture : function (d) {
				var e = this.options;
				if (e.disabled) {
					return false
				}
				this.elementSize = {
					width : this.element.outerWidth(),
					height : this.element.outerHeight()
				};
				this.elementOffset = this.element.offset();
				var h = {
					x : d.pageX,
					y : d.pageY
				};
				var j = this._normValueFromMouse(h);
				var c = this._valueMax() + 1,
				f;
				var k = this,
				i;
				this.handles.each(function (l) {
					var m = Math.abs(j - k.values(l));
					if (c > m) {
						c = m;
						f = a(this);
						i = l
					}
				});
				if (e.range == true && this.values(1) == e.min) {
					f = a(this.handles[++i])
				}
				this._start(d, i);
				k._handleIndex = i;
				f.addClass("ui-state-active").focus();
				var g = f.offset();
				var b = !a(d.target).parents().andSelf().is(".ui-slider-handle");
				this._clickOffset = b ? {
					left : 0,
					top : 0
				}
				 : {
					left : d.pageX - g.left - (f.width() / 2),
					top : d.pageY - g.top - (f.height() / 2) - (parseInt(f.css("borderTopWidth"), 10) || 0) - (parseInt(f.css("borderBottomWidth"), 10) || 0) + (parseInt(f.css("marginTop"), 10) || 0)
				};
				j = this._normValueFromMouse(h);
				this._slide(d, i, j);
				return true
			},
			_mouseStart : function (b) {
				return true
			},
			_mouseDrag : function (d) {
				var b = {
					x : d.pageX,
					y : d.pageY
				};
				var c = this._normValueFromMouse(b);
				this._slide(d, this._handleIndex, c);
				return false
			},
			_mouseStop : function (b) {
				this.handles.removeClass("ui-state-active");
				this._stop(b, this._handleIndex);
				this._change(b, this._handleIndex);
				this._handleIndex = null;
				this._clickOffset = null;
				return false
			},
			_detectOrientation : function () {
				this.orientation = this.options.orientation == "vertical" ? "vertical" : "horizontal"
			},
			_normValueFromMouse : function (d) {
				var c,
				h;
				if ("horizontal" == this.orientation) {
					c = this.elementSize.width;
					h = d.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0)
				} else {
					c = this.elementSize.height;
					h = d.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0)
				}
				var f = (h / c);
				if (f > 1) {
					f = 1
				}
				if (f < 0) {
					f = 0
				}
				if ("vertical" == this.orientation) {
					f = 1 - f
				}
				var e = this._valueMax() - this._valueMin(),
				i = f * e,
				b = i % this.options.step,
				g = this._valueMin() + i - b;
				if (b > (this.options.step / 2)) {
					g += this.options.step
				}
				return parseFloat(g.toFixed(5))
			},
			_start : function (c, b) {
				this._trigger("start", c, this._uiHash(b))
			},
			_slide : function (f, e, d) {
				var g = this.handles[e];
				if (this.options.values && this.options.values.length) {
					var b = this.values(e ? 0 : 1);
					if ((e == 0 && d >= b) || (e == 1 && d <= b)) {
						d = b
					}
					if (d != this.values(e)) {
						var c = this.values();
						c[e] = d;
						var h = this._trigger("slide", f, this._uiHash(e, d, c));
						var b = this.values(e ? 0 : 1);
						if (h !== false) {
							this.values(e, d, (f.type == "mousedown" && this.options.animate), true)
						}
					}
				} else {
					if (d != this.value()) {
						var h = this._trigger("slide", f, this._uiHash(e, d));
						if (h !== false) {
							this._setData("value", d, (f.type == "mousedown" && this.options.animate))
						}
					}
				}
			},
			_stop : function (c, b) {
				this._trigger("stop", c, this._uiHash(b))
			},
			_change : function (c, b) {
				this._trigger("change", c, this._uiHash(b))
			},
			value : function (b) {
				if (arguments.length) {
					this._setData("value", b);
					this._change(null, 0)
				}
				return this._value()
			},
			values : function (b, e, c, d) {
				if (arguments.length > 1) {
					this.options.values[b] = e;
					this._refreshValue(c);
					if (!d) {
						this._change(null, b)
					}
				}
				if (arguments.length) {
					if (this.options.values && this.options.values.length) {
						return this._values(b)
					} else {
						return this.value()
					}
				} else {
					return this._values()
				}
			},
			_setData : function (b, d, c) {
				a.widget.prototype._setData.apply(this, arguments);
				switch (b) {
				case "orientation":
					this._detectOrientation();
					this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-" + this.orientation);
					this._refreshValue(c);
					break;
				case "value":
					this._refreshValue(c);
					break
				}
			},
			_step : function () {
				var b = this.options.step;
				return b
			},
			_value : function () {
				var b = this.options.value;
				if (b < this._valueMin()) {
					b = this._valueMin()
				}
				if (b > this._valueMax()) {
					b = this._valueMax()
				}
				return b
			},
			_values : function (b) {
				if (arguments.length) {
					var c = this.options.values[b];
					if (c < this._valueMin()) {
						c = this._valueMin()
					}
					if (c > this._valueMax()) {
						c = this._valueMax()
					}
					return c
				} else {
					return this.options.values
				}
			},
			_valueMin : function () {
				var b = this.options.min;
				return b
			},
			_valueMax : function () {
				var b = this.options.max;
				return b
			},
			_refreshValue : function (c) {
				var f = this.options.range,
				d = this.options,
				l = this;
				if (this.options.values && this.options.values.length) {
					var i,
					h;
					this.handles.each(function (p, n) {
						var o = (l.values(p) - l._valueMin()) / (l._valueMax() - l._valueMin()) * 100;
						var m = {};
						m[l.orientation == "horizontal" ? "left" : "bottom"] = o + "%";
						a(this).stop(1, 1)[c ? "animate" : "css"](m, d.animate);
						if (l.options.range === true) {
							if (l.orientation == "horizontal") {
								(p == 0) && l.range.stop(1, 1)[c ? "animate" : "css"]({
									left : o + "%"
								}, d.animate);
								(p == 1) && l.range[c ? "animate" : "css"]({
									width : (o - lastValPercent) + "%"
								}, {
									queue : false,
									duration : d.animate
								})
							} else {
								(p == 0) && l.range.stop(1, 1)[c ? "animate" : "css"]({
									bottom : (o) + "%"
								}, d.animate);
								(p == 1) && l.range[c ? "animate" : "css"]({
									height : (o - lastValPercent) + "%"
								}, {
									queue : false,
									duration : d.animate
								})
							}
						}
						lastValPercent = o
					})
				} else {
					var j = this.value(),
					g = this._valueMin(),
					k = this._valueMax(),
					e = k != g ? (j - g) / (k - g) * 100 : 0;
					var b = {};
					b[l.orientation == "horizontal" ? "left" : "bottom"] = e + "%";
					this.handle.stop(1, 1)[c ? "animate" : "css"](b, d.animate);
					(f == "min") && (this.orientation == "horizontal") && this.range.stop(1, 1)[c ? "animate" : "css"]({
						width : e + "%"
					}, d.animate);
					(f == "max") && (this.orientation == "horizontal") && this.range[c ? "animate" : "css"]({
						width : (100 - e) + "%"
					}, {
						queue : false,
						duration : d.animate
					});
					(f == "min") && (this.orientation == "vertical") && this.range.stop(1, 1)[c ? "animate" : "css"]({
						height : e + "%"
					}, d.animate);
					(f == "max") && (this.orientation == "vertical") && this.range[c ? "animate" : "css"]({
						height : (100 - e) + "%"
					}, {
						queue : false,
						duration : d.animate
					})
				}
			},
			_uiHash : function (d, e, c) {
				var b = this.options.values && this.options.values.length;
				return {
					handle : this.handles[d],
					value : e || (b ? this.values(d) : this.value()),
					values : c || (b && this.values())
				}
			}
		}));
	a.extend(a.ui.slider, {
		getter : "value values",
		version : "1.7",
		eventPrefix : "slide",
		defaults : {
			animate : false,
			delay : 0,
			distance : 0,
			max : 100,
			min : 0,
			orientation : "horizontal",
			range : false,
			step : 1,
			value : 0,
			values : null
		}
	})
})(jQuery);
(function (a) {
	a.widget("ui.tabs", {
		_init : function () {
			if (this.options.deselectable !== undefined) {
				this.options.collapsible = this.options.deselectable
			}
			this._tabify(true)
		},
		_setData : function (b, c) {
			if (b == "selected") {
				if (this.options.collapsible && c == this.options.selected) {
					return
				}
				this.select(c)
			} else {
				this.options[b] = c;
				if (b == "deselectable") {
					this.options.collapsible = c
				}
				this._tabify()
			}
		},
		_tabId : function (b) {
			return b.title && b.title.replace(/\s/g, "_").replace(/[^A-Za-z0-9\-_:\.]/g, "") || this.options.idPrefix + a.data(b)
		},
		_sanitizeSelector : function (b) {
			return b.replace(/:/g, "\\:")
		},
		_cookie : function () {
			var b = this.cookie || (this.cookie = this.options.cookie.name || "ui-tabs-" + a.data(this.list[0]));
			return a.cookie.apply(null, [b].concat(a.makeArray(arguments)))
		},
		_ui : function (c, b) {
			return {
				tab : c,
				panel : b,
				index : this.anchors.index(c)
			}
		},
		_cleanup : function () {
			this.lis.filter(".ui-state-processing").removeClass("ui-state-processing").find("span:data(label.tabs)").each(function () {
				var b = a(this);
				b.html(b.data("label.tabs")).removeData("label.tabs")
			})
		},
		_tabify : function (n) {
			this.list = this.element.children("ul:first");
			this.lis = a("li:has(a[href])", this.list);
			this.anchors = this.lis.map(function () {
					return a("a", this)[0]
				});
			this.panels = a([]);
			var p = this,
			d = this.options;
			var c = /^#.+/;
			this.anchors.each(function (r, o) {
				var q = a(o).attr("href");
				var s = q.split("#")[0],
				u;
				if (s && (s === location.toString().split("#")[0] || (u = a("base")[0]) && s === u.href)) {
					q = o.hash;
					o.href = q
				}
				if (c.test(q)) {
					p.panels = p.panels.add(p._sanitizeSelector(q))
				} else {
					if (q != "#") {
						a.data(o, "href.tabs", q);
						a.data(o, "load.tabs", q.replace(/#.*$/, ""));
						var w = p._tabId(o);
						o.href = "#" + w;
						var v = a("#" + w);
						if (!v.length) {
							v = a(d.panelTemplate).attr("id", w).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").insertAfter(p.panels[r - 1] || p.list);
							v.data("destroy.tabs", true)
						}
						p.panels = p.panels.add(v)
					} else {
						d.disabled.push(r)
					}
				}
			});
			if (n) {
				this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all");
				this.list.addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all");
				this.lis.addClass("ui-state-default ui-corner-top");
				this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom");
				if (d.selected === undefined) {
					if (location.hash) {
						this.anchors.each(function (q, o) {
							if (o.hash == location.hash) {
								d.selected = q;
								return false
							}
						})
					}
					if (typeof d.selected != "number" && d.cookie) {
						d.selected = parseInt(p._cookie(), 10)
					}
					if (typeof d.selected != "number" && this.lis.filter(".ui-tabs-selected").length) {
						d.selected = this.lis.index(this.lis.filter(".ui-tabs-selected"))
					}
					d.selected = d.selected || 0
				} else {
					if (d.selected === null) {
						d.selected = -1
					}
				}
				d.selected = ((d.selected >= 0 && this.anchors[d.selected]) || d.selected < 0) ? d.selected : 0;
				d.disabled = a.unique(d.disabled.concat(a.map(this.lis.filter(".ui-state-disabled"), function (q, o) {
								return p.lis.index(q)
							}))).sort();
				if (a.inArray(d.selected, d.disabled) != -1) {
					d.disabled.splice(a.inArray(d.selected, d.disabled), 1)
				}
				this.panels.addClass("ui-tabs-hide");
				this.lis.removeClass("ui-tabs-selected ui-state-active");
				if (d.selected >= 0 && this.anchors.length) {
					this.panels.eq(d.selected).removeClass("ui-tabs-hide");
					this.lis.eq(d.selected).addClass("ui-tabs-selected ui-state-active");
					p.element.queue("tabs", function () {
						p._trigger("show", null, p._ui(p.anchors[d.selected], p.panels[d.selected]))
					});
					this.load(d.selected)
				}
				a(window).bind("unload", function () {
					p.lis.add(p.anchors).unbind(".tabs");
					p.lis = p.anchors = p.panels = null
				})
			} else {
				d.selected = this.lis.index(this.lis.filter(".ui-tabs-selected"))
			}
			this.element[d.collapsible ? "addClass" : "removeClass"]("ui-tabs-collapsible");
			if (d.cookie) {
				this._cookie(d.selected, d.cookie)
			}
			for (var g = 0, m; (m = this.lis[g]); g++) {
				a(m)[a.inArray(g, d.disabled) != -1 && !a(m).hasClass("ui-tabs-selected") ? "addClass" : "removeClass"]("ui-state-disabled")
			}
			if (d.cache === false) {
				this.anchors.removeData("cache.tabs")
			}
			this.lis.add(this.anchors).unbind(".tabs");
			if (d.event != "mouseover") {
				var f = function (o, i) {
					if (i.is(":not(.ui-state-disabled)")) {
						i.addClass("ui-state-" + o)
					}
				};
				var j = function (o, i) {
					i.removeClass("ui-state-" + o)
				};
				this.lis.bind("mouseover.tabs", function () {
					f("hover", a(this))
				});
				this.lis.bind("mouseout.tabs", function () {
					j("hover", a(this))
				});
				this.anchors.bind("focus.tabs", function () {
					f("focus", a(this).closest("li"))
				});
				this.anchors.bind("blur.tabs", function () {
					j("focus", a(this).closest("li"))
				})
			}
			var b,
			h;
			if (d.fx) {
				if (a.isArray(d.fx)) {
					b = d.fx[0];
					h = d.fx[1]
				} else {
					b = h = d.fx
				}
			}
			function e(i, o) {
				i.css({
					display : ""
				});
				if (a.browser.msie && o.opacity) {
					i[0].style.removeAttribute("filter")
				}
			}
			var k = h ? function (i, o) {
				a(i).closest("li").removeClass("ui-state-default").addClass("ui-tabs-selected ui-state-active");
				o.hide().removeClass("ui-tabs-hide").animate(h, h.duration || "normal", function () {
					e(o, h);
					p._trigger("show", null, p._ui(i, o[0]))
				})
			}
			 : function (i, o) {
				a(i).closest("li").removeClass("ui-state-default").addClass("ui-tabs-selected ui-state-active");
				o.removeClass("ui-tabs-hide");
				p._trigger("show", null, p._ui(i, o[0]))
			};
			var l = b ? function (o, i) {
				i.animate(b, b.duration || "normal", function () {
					p.lis.removeClass("ui-tabs-selected ui-state-active").addClass("ui-state-default");
					i.addClass("ui-tabs-hide");
					e(i, b);
					p.element.dequeue("tabs")
				})
			}
			 : function (o, i, q) {
				p.lis.removeClass("ui-tabs-selected ui-state-active").addClass("ui-state-default");
				i.addClass("ui-tabs-hide");
				p.element.dequeue("tabs")
			};
			this.anchors.bind(d.event + ".tabs", function () {
				var o = this,
				r = a(this).closest("li"),
				i = p.panels.filter(":not(.ui-tabs-hide)"),
				q = a(p._sanitizeSelector(this.hash));
				if ((r.hasClass("ui-tabs-selected") && !d.collapsible) || r.hasClass("ui-state-disabled") || r.hasClass("ui-state-processing") || p._trigger("select", null, p._ui(this, q[0])) === false) {
					this.blur();
					return false
				}
				d.selected = p.anchors.index(this);
				p.abort();
				if (d.collapsible) {
					if (r.hasClass("ui-tabs-selected")) {
						d.selected = -1;
						if (d.cookie) {
							p._cookie(d.selected, d.cookie)
						}
						p.element.queue("tabs", function () {
							l(o, i)
						}).dequeue("tabs");
						this.blur();
						return false
					} else {
						if (!i.length) {
							if (d.cookie) {
								p._cookie(d.selected, d.cookie)
							}
							p.element.queue("tabs", function () {
								k(o, q)
							});
							p.load(p.anchors.index(this));
							this.blur();
							return false
						}
					}
				}
				if (d.cookie) {
					p._cookie(d.selected, d.cookie)
				}
				if (q.length) {
					if (i.length) {
						p.element.queue("tabs", function () {
							l(o, i)
						})
					}
					p.element.queue("tabs", function () {
						k(o, q)
					});
					p.load(p.anchors.index(this))
				} else {
					throw "jQuery UI Tabs: Mismatching fragment identifier."
				}
				if (a.browser.msie) {
					this.blur()
				}
			});
			this.anchors.bind("click.tabs", function () {
				return false
			})
		},
		destroy : function () {
			var b = this.options;
			this.abort();
			this.element.unbind(".tabs").removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible").removeData("tabs");
			this.list.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all");
			this.anchors.each(function () {
				var c = a.data(this, "href.tabs");
				if (c) {
					this.href = c
				}
				var d = a(this).unbind(".tabs");
				a.each(["href", "load", "cache"], function (e, f) {
					d.removeData(f + ".tabs")
				})
			});
			this.lis.unbind(".tabs").add(this.panels).each(function () {
				if (a.data(this, "destroy.tabs")) {
					a(this).remove()
				} else {
					a(this).removeClass(["ui-state-default", "ui-corner-top", "ui-tabs-selected", "ui-state-active", "ui-state-hover", "ui-state-focus", "ui-state-disabled", "ui-tabs-panel", "ui-widget-content", "ui-corner-bottom", "ui-tabs-hide"].join(" "))
				}
			});
			if (b.cookie) {
				this._cookie(null, b.cookie)
			}
		},
		add : function (e, d, c) {
			if (c === undefined) {
				c = this.anchors.length
			}
			var b = this,
			g = this.options,
			i = a(g.tabTemplate.replace(/#\{href\}/g, e).replace(/#\{label\}/g, d)),
			h = !e.indexOf("#") ? e.replace("#", "") : this._tabId(a("a", i)[0]);
			i.addClass("ui-state-default ui-corner-top").data("destroy.tabs", true);
			var f = a("#" + h);
			if (!f.length) {
				f = a(g.panelTemplate).attr("id", h).data("destroy.tabs", true)
			}
			f.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom ui-tabs-hide");
			if (c >= this.lis.length) {
				i.appendTo(this.list);
				f.appendTo(this.list[0].parentNode)
			} else {
				i.insertBefore(this.lis[c]);
				f.insertBefore(this.panels[c])
			}
			g.disabled = a.map(g.disabled, function (k, j) {
					return k >= c ? ++k : k
				});
			this._tabify();
			if (this.anchors.length == 1) {
				i.addClass("ui-tabs-selected ui-state-active");
				f.removeClass("ui-tabs-hide");
				this.element.queue("tabs", function () {
					b._trigger("show", null, b._ui(b.anchors[0], b.panels[0]))
				});
				this.load(0)
			}
			this._trigger("add", null, this._ui(this.anchors[c], this.panels[c]))
		},
		remove : function (b) {
			var d = this.options,
			e = this.lis.eq(b).remove(),
			c = this.panels.eq(b).remove();
			if (e.hasClass("ui-tabs-selected") && this.anchors.length > 1) {
				this.select(b + (b + 1 < this.anchors.length ? 1 : -1))
			}
			d.disabled = a.map(a.grep(d.disabled, function (g, f) {
						return g != b
					}), function (g, f) {
					return g >= b ? --g : g
				});
			this._tabify();
			this._trigger("remove", null, this._ui(e.find("a")[0], c[0]))
		},
		enable : function (b) {
			var c = this.options;
			if (a.inArray(b, c.disabled) == -1) {
				return
			}
			this.lis.eq(b).removeClass("ui-state-disabled");
			c.disabled = a.grep(c.disabled, function (e, d) {
					return e != b
				});
			this._trigger("enable", null, this._ui(this.anchors[b], this.panels[b]))
		},
		disable : function (c) {
			var b = this,
			d = this.options;
			if (c != d.selected) {
				this.lis.eq(c).addClass("ui-state-disabled");
				d.disabled.push(c);
				d.disabled.sort();
				this._trigger("disable", null, this._ui(this.anchors[c], this.panels[c]))
			}
		},
		select : function (b) {
			if (typeof b == "string") {
				b = this.anchors.index(this.anchors.filter("[href$=" + b + "]"))
			} else {
				if (b === null) {
					b = -1
				}
			}
			if (b == -1 && this.options.collapsible) {
				b = this.options.selected
			}
			this.anchors.eq(b).trigger(this.options.event + ".tabs")
		},
		load : function (e) {
			var c = this,
			g = this.options,
			b = this.anchors.eq(e)[0],
			d = a.data(b, "load.tabs");
			this.abort();
			if (!d || this.element.queue("tabs").length !== 0 && a.data(b, "cache.tabs")) {
				this.element.dequeue("tabs");
				return
			}
			this.lis.eq(e).addClass("ui-state-processing");
			if (g.spinner) {
				var f = a("span", b);
				f.data("label.tabs", f.html()).html(g.spinner)
			}
			this.xhr = a.ajax(a.extend({}, g.ajaxOptions, {
						url : d,
						success : function (i, h) {
							a(c._sanitizeSelector(b.hash)).html(i);
							c._cleanup();
							if (g.cache) {
								a.data(b, "cache.tabs", true)
							}
							c._trigger("load", null, c._ui(c.anchors[e], c.panels[e]));
							try {
								g.ajaxOptions.success(i, h)
							} catch (j) {}
							
							c.element.dequeue("tabs")
						}
					}))
		},
		abort : function () {
			this.element.queue([]);
			this.panels.stop(false, true);
			if (this.xhr) {
				this.xhr.abort();
				delete this.xhr
			}
			this._cleanup()
		},
		url : function (c, b) {
			this.anchors.eq(c).removeData("cache.tabs").data("load.tabs", b)
		},
		length : function () {
			return this.anchors.length
		}
	});
	a.extend(a.ui.tabs, {
		version : "1.7",
		getter : "length",
		defaults : {
			ajaxOptions : null,
			cache : false,
			cookie : null,
			collapsible : false,
			disabled : [],
			event : "click",
			fx : null,
			idPrefix : "ui-tabs-",
			panelTemplate : "<div></div>",
			spinner : "<em>Loading&#8230;</em>",
			tabTemplate : '<li><a href="#{href}"><span>#{label}</span></a></li>'
		}
	});
	a.extend(a.ui.tabs.prototype, {
		rotation : null,
		rotate : function (d, f) {
			var b = this,
			g = this.options;
			var c = b._rotate || (b._rotate = function (h) {
					clearTimeout(b.rotation);
					b.rotation = setTimeout(function () {
							var i = g.selected;
							b.select(++i < b.anchors.length ? i : 0)
						}, d);
					if (h) {
						h.stopPropagation()
					}
				});
			var e = b._unrotate || (b._unrotate = !f ? function (h) {
					if (h.clientX) {
						b.rotate(null)
					}
				}
					 : function (h) {
					t = g.selected;
					c()
				});
			if (d) {
				this.element.bind("tabsshow", c);
				this.anchors.bind(g.event + ".tabs", e);
				c()
			} else {
				clearTimeout(b.rotation);
				this.element.unbind("tabsshow", c);
				this.anchors.unbind(g.event + ".tabs", e);
				delete this._rotate;
				delete this._unrotate
			}
		}
	})
})(jQuery);
define("jQuery/jquery-ui.min", function () {});

/** @license
 * Copyright (c) 2007 Paul Bakaus (paul.bakaus@googlemail.com) and Brandon Aaron (brandon.aaron@gmail.com || http://brandonaaron.net)
 * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
 * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.
 *
 * $LastChangedDate: 2007-12-20 08:46:55 -0600 (Thu, 20 Dec 2007) $
 * $Rev: 4259 $
 *
 * Version: 1.2
 *
 * Requires: jQuery 1.2+
 */
(function ($) {
	
	$.dimensions = {
		version : '1.2'
	};
	
	// Create innerHeight, innerWidth, outerHeight and outerWidth methods
	$.each(['Height', 'Width'], function (i, name) {
		
		// innerHeight and innerWidth
		$.fn['inner' + name] = function () {
			if (!this[0])
				return;
			
			var torl = name == 'Height' ? 'Top' : 'Left', // top or left
			borr = name == 'Height' ? 'Bottom' : 'Right'; // bottom or right
			
			return this.is(':visible') ? this[0]['client' + name] : num(this, name.toLowerCase()) + num(this, 'padding' + torl) + num(this, 'padding' + borr);
		};
		
		// outerHeight and outerWidth
		$.fn['outer' + name] = function (options) {
			if (!this[0])
				return;
			
			var torl = name == 'Height' ? 'Top' : 'Left', // top or left
			borr = name == 'Height' ? 'Bottom' : 'Right'; // bottom or right
			
			options = $.extend({
					margin : false
				}, options || {});
			
			var val = this.is(':visible') ?
				this[0]['offset' + name] :
				num(this, name.toLowerCase())
				 + num(this, 'border' + torl + 'Width') + num(this, 'border' + borr + 'Width')
				 + num(this, 'padding' + torl) + num(this, 'padding' + borr);
			
			return val + (options.margin ? (num(this, 'margin' + torl) + num(this, 'margin' + borr)) : 0);
		};
	});
	
	// Create scrollLeft and scrollTop methods
	$.each(['Left', 'Top'], function (i, name) {
		$.fn['scroll' + name] = function (val) {
			if (!this[0])
				return;
			
			return val != undefined ?
			
			// Set the scroll offset
			this.each(function () {
				this == window || this == document ?
				window.scrollTo(
					name == 'Left' ? val : $(window)['scrollLeft'](),
					name == 'Top' ? val : $(window)['scrollTop']()) :
				this['scroll' + name] = val;
			}) :
			
			// Return the scroll offset
			this[0] == window || this[0] == document ?
			self[(name == 'Left' ? 'pageXOffset' : 'pageYOffset')] ||
			$.boxModel && document.documentElement['scroll' + name] ||
			document.body['scroll' + name] :
			this[0]['scroll' + name];
		};
	});
	
	$.fn.extend({
		position : function () {
			var left = 0,
			top = 0,
			elem = this[0],
			offset,
			parentOffset,
			offsetParent,
			results;
			
			if (elem) {
				// Get *real* offsetParent
				offsetParent = this.offsetParent();
				
				// Get correct offsets
				offset = this.offset();
				parentOffset = offsetParent.offset();
				
				// Subtract element margins
				offset.top -= num(elem, 'marginTop');
				offset.left -= num(elem, 'marginLeft');
				
				// Add offsetParent borders
				parentOffset.top += num(offsetParent, 'borderTopWidth');
				parentOffset.left += num(offsetParent, 'borderLeftWidth');
				
				// Subtract the two offsets
				results = {
					top : offset.top - parentOffset.top,
					left : offset.left - parentOffset.left
				};
			}
			
			return results;
		},
		
		offsetParent : function () {
			var offsetParent = this[0].offsetParent;
			while (offsetParent && (!/^body|html$/i.test(offsetParent.tagName) && $.css(offsetParent, 'position') == 'static'))
				offsetParent = offsetParent.offsetParent;
			return $(offsetParent);
		}
	});
	
	function num(el, prop) {
		return parseInt($.curCSS(el.jquery ? el[0] : el, prop, true)) || 0;
	};
	
})(jQuery);
define("jQuery/jquery.dimensions", function () {});

/** @license
 * Treeview 1.4 - jQuery plugin to hide and show branches of a tree
 *
 * http://bassistance.de/jquery-plugins/jquery-plugin-treeview/
 * http://docs.jquery.com/Plugins/Treeview
 *
 * Copyright (c) 2007 Jörn Zaefferer
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 *
 * Revision: $Id: jquery.treeview.js 4684 2008-02-07 19:08:06Z joern.zaefferer $
 *
 */
(function ($) {
	
	$.extend($.fn, {
		swapClass : function (c1, c2) {
			var c1Elements = this.filter('.' + c1);
			this.filter('.' + c2).removeClass(c2).addClass(c1);
			c1Elements.removeClass(c1).addClass(c2);
			return this;
		},
		replaceClass : function (c1, c2) {
			return this.filter('.' + c1).removeClass(c1).addClass(c2).end();
		},
		hoverClass : function (className) {
			className = className || "hover";
			return this.hover(function () {
				$(this).addClass(className);
			}, function () {
				$(this).removeClass(className);
			});
		},
		heightToggle : function (animated, callback) {
			animated ?
			this.animate({
				height : "toggle"
			}, animated, callback) :
			this.each(function () {
				jQuery(this)[jQuery(this).is(":hidden") ? "show" : "hide"]();
				if (callback)
					callback.apply(this, arguments);
			});
		},
		heightHide : function (animated, callback) {
			if (animated) {
				this.animate({
					height : "hide"
				}, animated, callback);
			} else {
				this.hide();
				if (callback)
					this.each(callback);
			}
		},
		prepareBranches : function (settings) {
			if (!settings.prerendered) {
				// mark last tree items
				this.filter(":last-child:not(ul)").addClass(CLASSES.last);
				// collapse whole tree, or only those marked as closed, anyway except those marked as open
				this.filter((settings.collapsed ? "" : "." + CLASSES.closed) + ":not(." + CLASSES.open + ")").find(">ul").hide();
			}
			// return all items with sublists
			return this.filter(":has(>ul)");
		},
		applyClasses : function (settings, toggler) {
			this.filter(":has(>ul):not(:has(>a))").find(">span").click(function (event) {
				toggler.apply($(this).next());
			}).add($("a", this)).hoverClass();
			
			if (!settings.prerendered) {
				// handle closed ones first
				this.filter(":has(>ul:hidden)")
				.addClass(CLASSES.expandable)
				.replaceClass(CLASSES.last, CLASSES.lastExpandable);
				
				// handle open ones
				this.not(":has(>ul:hidden)")
				.addClass(CLASSES.collapsable)
				.replaceClass(CLASSES.last, CLASSES.lastCollapsable);
				
				// create hitarea
				this.prepend("<div class=\"" + CLASSES.hitarea + "\"/>").find("div." + CLASSES.hitarea).each(function () {
					var classes = "";
					$.each($(this).parent().attr("class").split(" "), function () {
						classes += this + "-hitarea ";
					});
					$(this).addClass(classes);
				});
			}
			
			// apply event to hitarea
			this.find("div." + CLASSES.hitarea).click(toggler);
		},
		treeview : function (settings) {
			
			settings = $.extend({
					cookieId : "treeview"
				}, settings);
			
			if (settings.add) {
				return this.trigger("add", [settings.add]);
			}
			
			if (settings.toggle) {
				var callback = settings.toggle;
				settings.toggle = function () {
					return callback.apply($(this).parent()[0], arguments);
				};
			}
			
			// factory for treecontroller
			function treeController(tree, control) {
				// factory for click handlers
				function handler(filter) {
					return function () {
						// reuse toggle event handler, applying the elements to toggle
						// start searching for all hitareas
						toggler.apply($("div." + CLASSES.hitarea, tree).filter(function () {
								// for plain toggle, no filter is provided, otherwise we need to check the parent element
								return filter ? $(this).parent("." + filter).length : true;
							}));
						return false;
					};
				}
				// click on first element to collapse tree
				$("a:eq(0)", control).click(handler(CLASSES.collapsable));
				// click on second to expand tree
				$("a:eq(1)", control).click(handler(CLASSES.expandable));
				// click on third to toggle tree
				$("a:eq(2)", control).click(handler());
			}
			
			// handle toggle event
			function toggler() {
				$(this)
				.parent()
				// swap classes for hitarea
				.find(">.hitarea")
				.swapClass(CLASSES.collapsableHitarea, CLASSES.expandableHitarea)
				.swapClass(CLASSES.lastCollapsableHitarea, CLASSES.lastExpandableHitarea)
				.end()
				// swap classes for parent li
				.swapClass(CLASSES.collapsable, CLASSES.expandable)
				.swapClass(CLASSES.lastCollapsable, CLASSES.lastExpandable)
				// find child lists
				.find(">ul")
				// toggle them
				.heightToggle(settings.animated, settings.toggle);
				if (settings.unique) {
					$(this).parent()
					.siblings()
					// swap classes for hitarea
					.find(">.hitarea")
					.replaceClass(CLASSES.collapsableHitarea, CLASSES.expandableHitarea)
					.replaceClass(CLASSES.lastCollapsableHitarea, CLASSES.lastExpandableHitarea)
					.end()
					.replaceClass(CLASSES.collapsable, CLASSES.expandable)
					.replaceClass(CLASSES.lastCollapsable, CLASSES.lastExpandable)
					.find(">ul")
					.heightHide(settings.animated, settings.toggle);
				}
			}
			
			function serialize() {
				function binary(arg) {
					return arg ? 1 : 0;
				}
				var data = [];
				branches.each(function (i, e) {
					data[i] = $(e).is(":has(>ul:visible)") ? 1 : 0;
				});
				$.cookie(settings.cookieId, data.join(""));
			}
			
			function deserialize() {
				var stored = $.cookie(settings.cookieId);
				if (stored) {
					var data = stored.split("");
					branches.each(function (i, e) {
						$(e).find(">ul")[parseInt(data[i]) ? "show" : "hide"]();
					});
				}
			}
			
			// add treeview class to activate styles
			this.addClass("treeview");
			
			// prepare branches and find all tree items with child lists
			var branches = this.find("li").prepareBranches(settings);
			
			switch (settings.persist) {
			case "cookie":
				var toggleCallback = settings.toggle;
				settings.toggle = function () {
					serialize();
					if (toggleCallback) {
						toggleCallback.apply(this, arguments);
					}
				};
				deserialize();
				break;
			case "location":
				var current = this.find("a").filter(function () {
						return this.href.toLowerCase() == location.href.toLowerCase();
					});
				if (current.length) {
					current.addClass("selected").parents("ul, li").add(current.next()).show();
				}
				break;
			}
			
			branches.applyClasses(settings, toggler);
			
			// if control option is set, create the treecontroller and show it
			if (settings.control) {
				treeController(this, settings.control);
				$(settings.control).show();
			}
			
			return this.bind("add", function (event, branches) {
				$(branches).prev()
				.removeClass(CLASSES.last)
				.removeClass(CLASSES.lastCollapsable)
				.removeClass(CLASSES.lastExpandable)
				.find(">.hitarea")
				.removeClass(CLASSES.lastCollapsableHitarea)
				.removeClass(CLASSES.lastExpandableHitarea);
				$(branches).find("li").andSelf().prepareBranches(settings).applyClasses(settings, toggler);
			});
		}
	});
	
	// classes used by the plugin
	// need to be styled via external stylesheet, see first example
	var CLASSES = $.fn.treeview.classes = {
		open : "open",
		closed : "closed",
		expandable : "expandable",
		expandableHitarea : "expandable-hitarea",
		lastExpandableHitarea : "lastExpandable-hitarea",
		collapsable : "collapsable",
		collapsableHitarea : "collapsable-hitarea",
		lastCollapsableHitarea : "lastCollapsable-hitarea",
		lastCollapsable : "lastCollapsable",
		lastExpandable : "lastExpandable",
		last : "last",
		hitarea : "hitarea"
	};
	
	// provide backwards compability
	$.fn.Treeview = $.fn.treeview;
	
})(jQuery);
define("jQuery/jquery.treeview", function () {});

/** @license
 * jQuery TinySort - A plugin to sort child nodes by (sub) contents or attributes.
 *
 * Version: 1.0.4
 *
 * Copyright (c) 2008 Ron Valstar
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 *
 * description
 *   - A plugin to sort child nodes by (sub) contents or attributes.
 *
 * Usage:
 *   $("ul#people>li").tsort();
 *   $("ul#people>li").tsort("span.surname");
 *   $("ul#people>li").tsort("span.surname",{order:"desc"});
 *   $("ul#people>li").tsort({place:"end"});
 *
 * Change default like so:
 *   $.tinysort.defaults.order = "desc";
 *
 * in this update:
 *	- changed setArray to pushStack
 *
 * in last update:
 *	- tested with jQuery 1.4.1
 *	- correct isNum return
 *
 * Todos
 *   - fix mixed literal/numeral values
 *   - determine if I have to use pushStack or pushStack
 *
 */
(function ($) {
	// default settings
	$.tinysort = {
		id : "TinySort",
		version : "1.0.4",
		defaults : {
			order : "asc" // order: asc, desc or rand
		,
			attr : "" // order by attribute value
		,
			place : "start" // place ordered elements at position: start, end, org (original position), first
		,
			returns : false // return all elements or only the sorted ones (true/false)
		}
	};
	$.fn.extend({
		tinysort : function (_find, _settings) {
			if (_find && typeof(_find) != "string") {
				_settings = _find;
				_find = null;
			}
			
			var oSettings = $.extend({}, $.tinysort.defaults, _settings);
			
			var oElements = {}; // contains sortable- and non-sortable list per parent
			this.each(function (i) {
				// element or sub selection
				var mElm = (!_find || _find == "") ? $(this) : $(this).find(_find);
				// text or attribute value
				var sSort = oSettings.order == "rand" ? "" + Math.random() : (oSettings.attr == "" ? mElm.text() : mElm.attr(oSettings.attr));
				// to sort or not to sort
				var mParent = $(this).parent();
				if (!oElements[mParent])
					oElements[mParent] = {
						s : [],
						n : []
					}; // s: sort, n: not sort
				if (mElm.length > 0)
					oElements[mParent].s.push({
						s : sSort,
						e : $(this),
						n : i
					}); // s:string, e:element, n:number
				else
					oElements[mParent].n.push({
						e : $(this),
						n : i
					});
			});
			//
			// sort
			for (var sParent in oElements) {
				var oParent = oElements[sParent];
				oParent.s.sort(
					function zeSort(a, b) {
					var x = a.s.toLowerCase ? a.s.toLowerCase() : a.s;
					var y = b.s.toLowerCase ? b.s.toLowerCase() : b.s;
					if (isNum(a.s) && isNum(b.s)) {
						x = parseFloat(a.s);
						y = parseFloat(b.s);
					}
					return (oSettings.order == "asc" ? 1 : -1) * (x < y ? -1 : (x > y ? 1 : 0));
				});
			}
			//
			// order elements and fill new order
			var aNewOrder = [];
			for (var sParent in oElements) {
				var oParent = oElements[sParent];
				var aOrg = []; // list for original position
				var iLow = $(this).length;
				switch (oSettings.place) {
				case "first":
					$.each(oParent.s, function (i, obj) {
						iLow = Math.min(iLow, obj.n)
					});
					break;
				case "org":
					$.each(oParent.s, function (i, obj) {
						aOrg.push(obj.n)
					});
					break;
				case "end":
					iLow = oParent.n.length;
					break;
				default:
					iLow = 0;
				}
				var aCnt = [0, 0]; // count how much we've sorted for retreival from either the sort list or the non-sort list (oParent.s/oParent.n)
				for (var i = 0; i < $(this).length; i++) {
					var bSList = i >= iLow && i < iLow + oParent.s.length;
					if (contains(aOrg, i))
						bSList = true;
					var mEl = (bSList ? oParent.s : oParent.n)[aCnt[bSList ? 0 : 1]].e;
					mEl.parent().append(mEl);
					if (bSList || !oSettings.returns)
						aNewOrder.push(mEl.get(0));
					aCnt[bSList ? 0 : 1]++;
				}
			}
			//
			return this.pushStack(aNewOrder); // pushStack or pushStack?
		}
	});
	// is numeric
	function isNum(n) {
		var x = /^\s*?[\+-]?(\d*\.?\d*?)\s*?$/.exec(n);
		return x && x.length > 0 ? x[1] : false;
	};
	// array contains
	function contains(a, n) {
		var bInside = false;
		$.each(a, function (i, m) {
			if (!bInside)
				bInside = m == n;
		});
		return bInside;
	};
	// set functions
	$.fn.TinySort = $.fn.Tinysort = $.fn.tsort = $.fn.tinysort;
})(jQuery);
define("jQuery/jquery.tinysort", function () {});

/** @license
 * jQuery Autocomplete bgIframe plugin 2.1.1
 *
 * Copyright (c) 2006 Brandon Aaron (http://brandonaaron.net)
 * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
 * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.
 *
 * $LastChangedDate: 2007-07-22 01:45:56 +0200 (Son, 22 Jul 2007) $
 * $Rev: 2447 $
 */
 //LK: This 3rd party should be applied only to IE6! It doesn't work in other browsers!
(function ($) {
	$.fn.bgIframe = $.fn.bgiframe = function (s) {
		if ($.browser.msie && /MSIE 6.0/.test(navigator.userAgent)) {
			s = $.extend({
					top : 'auto',
					left : 'auto',
					width : 'auto',
					height : 'auto',
					opacity : true,
					src : 'javascript:false;'
				}, s || {});
			var prop = function (n) {
				return n && n.constructor == Number ? n + 'px' : n;
			},
			html = '<iframe class="bgiframe"frameborder="0"tabindex="-1"src="' + s.src + '"' + 'style="display:block;position:absolute;z-index:-1;' + (s.opacity !== false ? 'filter:Alpha(Opacity=\'0\');' : '') + 'top:' + (s.top == 'auto' ? 'expression(((parseInt(this.parentNode.currentStyle.borderTopWidth)||0)*-1)+\'px\')' : prop(s.top)) + ';' + 'left:' + (s.left == 'auto' ? 'expression(((parseInt(this.parentNode.currentStyle.borderLeftWidth)||0)*-1)+\'px\')' : prop(s.left)) + ';' + 'width:' + (s.width == 'auto' ? 'expression(this.parentNode.offsetWidth+\'px\')' : prop(s.width)) + ';' + 'height:' + (s.height == 'auto' ? 'expression(this.parentNode.offsetHeight+\'px\')' : prop(s.height)) + ';' + '"/>';
			return this.each(function () {
				if ($('> iframe.bgiframe', this).length == 0)
					this.insertBefore(document.createElement(html), this.firstChild);
			});
		}
		return this;
	};
})(jQuery);
define("jquery-autocomplete/lib/jquery.bgiframe.min", function () {});

/** @license
 * jQuery Autocomplete plugin 1.1
 *
 * Copyright (c) 2009 Jörn Zaefferer
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 *
 * Revision: $Id: jquery.autocomplete.js 15 2009-08-22 10:30:27Z joern.zaefferer $
 */
;
(function ($) {
	$.fn.extend({
		autocomplete : function (urlOrData, options) {
			var isUrl = typeof urlOrData == "string";
			options = $.extend({}, $.Autocompleter.defaults, {
					url : isUrl ? urlOrData : null,
					data : isUrl ? null : urlOrData,
					delay : isUrl ? $.Autocompleter.defaults.delay : 10,
					max : options && !options.scroll ? 10 : 150
				}, options);
			options.highlight = options.highlight || function (value) {
				return value;
			};
			options.formatMatch = options.formatMatch || options.formatItem;
			return this.each(function () {
				new $.Autocompleter(this, options);
			});
		},
		result : function (handler) {
			return this.bind("result", handler);
		},
		search : function (handler) {
			return this.trigger("search", [handler]);
		},
		flushCache : function () {
			return this.trigger("flushCache");
		},
		setOptions : function (options) {
			return this.trigger("setOptions", [options]);
		},
		unautocomplete : function () {
			return this.trigger("unautocomplete");
		}
	});
	$.Autocompleter = function (input, options) {
		var KEY = {
			UP : 38,
			DOWN : 40,
			DEL : 46,
			TAB : 9,
			RETURN : 13,
			ESC : 27,
			COMMA : 188,
			PAGEUP : 33,
			PAGEDOWN : 34,
			BACKSPACE : 8
		};
		var $input = $(input).attr("autocomplete", "off").addClass(options.inputClass);
		var timeout;
		var previousValue = "";
		var cache = $.Autocompleter.Cache(options);
		var hasFocus = 0;
		var lastKeyPressCode;
		var config = {
			mouseDownOnSelect : false
		};
		var select = $.Autocompleter.Select(options, input, selectCurrent, config);
		var blockSubmit;
		$.browser.opera && $(input.form).bind("submit.autocomplete", function () {
			if (blockSubmit) {
				blockSubmit = false;
				return false;
			}
		});
		$input.bind(($.browser.opera ? "keypress" : "keydown") + ".autocomplete", function (event) {
			hasFocus = 1;
			lastKeyPressCode = event.keyCode;
			switch (event.keyCode) {
			case KEY.UP:
				event.preventDefault();
				if (select.visible()) {
					select.prev();
				} else {
					onChange(0, true);
				}
				break;
			case KEY.DOWN:
				event.preventDefault();
				if (select.visible()) {
					select.next();
				} else {
					onChange(0, true);
				}
				break;
			case KEY.PAGEUP:
				event.preventDefault();
				if (select.visible()) {
					select.pageUp();
				} else {
					onChange(0, true);
				}
				break;
			case KEY.PAGEDOWN:
				event.preventDefault();
				if (select.visible()) {
					select.pageDown();
				} else {
					onChange(0, true);
				}
				break;
			case options.multiple && $.trim(options.multipleSeparator) == "," && KEY.COMMA:
			case KEY.TAB:
			case KEY.RETURN:
				if (selectCurrent()) {
					event.preventDefault();
					blockSubmit = true;
					return false;
				}
				break;
			case KEY.ESC:
				select.hide();
				break;
			default:
				clearTimeout(timeout);
				timeout = setTimeout(onChange, options.delay);
				break;
			}
		}).focus(function () {
			hasFocus++;
		}).blur(function () {
			hasFocus = 0;
			if (!config.mouseDownOnSelect) {
				hideResults();
			}
		}).click(function () {
			if (hasFocus++ > 1 && !select.visible()) {
				onChange(0, true);
			}
		}).bind("search", function () {
			var fn = (arguments.length > 1) ? arguments[1] : null;
			function findValueCallback(q, data) {
				var result;
				if (data && data.length) {
					for (var i = 0; i < data.length; i++) {
						if (data[i].result.toLowerCase() == q.toLowerCase()) {
							result = data[i];
							break;
						}
					}
				}
				if (typeof fn == "function")
					fn(result);
				else
					$input.trigger("result", result && [result.data, result.value]);
			}
			$.each(trimWords($input.val()), function (i, value) {
				request(value, findValueCallback, findValueCallback);
			});
		}).bind("flushCache", function () {
			cache.flush();
		}).bind("setOptions", function () {
			$.extend(options, arguments[1]);
			if ("data" in arguments[1])
				cache.populate();
		}).bind("unautocomplete", function () {
			select.unbind();
			$input.unbind();
			$(input.form).unbind(".autocomplete");
		});
		function selectCurrent() {
			var selected = select.selected();
			if (!selected)
				return false;
			var v = selected.result;
			previousValue = v;
			if (options.multiple) {
				var words = trimWords($input.val());
				if (words.length > 1) {
					var seperator = options.multipleSeparator.length;
					var cursorAt = $(input).selection().start;
					var wordAt,
					progress = 0;
					$.each(words, function (i, word) {
						progress += word.length;
						if (cursorAt <= progress) {
							wordAt = i;
							return false;
						}
						progress += seperator;
					});
					words[wordAt] = v;
					v = words.join(options.multipleSeparator);
				}
				v += options.multipleSeparator;
			}
			$input.val(v);
			hideResultsNow();
			$input.trigger("result", [selected.data, selected.value]);
			return true;
		}
		function onChange(crap, skipPrevCheck) {
			if (lastKeyPressCode == KEY.DEL) {
				select.hide();
				return;
			}
			var currentValue = $input.val();
			if (!skipPrevCheck && currentValue == previousValue)
				return;
			previousValue = currentValue;
			currentValue = lastWord(currentValue);
			if (currentValue.length >= options.minChars) {
				$input.addClass(options.loadingClass);
				if (!options.matchCase)
					currentValue = currentValue.toLowerCase();
				request(currentValue, receiveData, hideResultsNow);
			} else {
				stopLoading();
				select.hide();
			}
		};
		function trimWords(value) {
			if (!value)
				return [""];
			if (!options.multiple)
				return [$.trim(value)];
			return $.map(value.split(options.multipleSeparator), function (word) {
				return $.trim(value).length ? $.trim(word) : null;
			});
		}
		function lastWord(value) {
			if (!options.multiple)
				return value;
			var words = trimWords(value);
			if (words.length == 1)
				return words[0];
			var cursorAt = $(input).selection().start;
			if (cursorAt == value.length) {
				words = trimWords(value)
			} else {
				words = trimWords(value.replace(value.substring(cursorAt), ""));
			}
			return words[words.length - 1];
		}
		function autoFill(q, sValue) {
			if (options.autoFill && (lastWord($input.val()).toLowerCase() == q.toLowerCase()) && lastKeyPressCode != KEY.BACKSPACE) {
				$input.val($input.val() + sValue.substring(lastWord(previousValue).length));
				$(input).selection(previousValue.length, previousValue.length + sValue.length);
			}
		};
		function hideResults() {
			clearTimeout(timeout);
			timeout = setTimeout(hideResultsNow, 200);
		};
		function hideResultsNow() {
			var wasVisible = select.visible();
			select.hide();
			clearTimeout(timeout);
			stopLoading();
			if (options.mustMatch) {
				$input.search(function (result) {
					if (!result) {
						if (options.multiple) {
							var words = trimWords($input.val()).slice(0, -1);
							$input.val(words.join(options.multipleSeparator) + (words.length ? options.multipleSeparator : ""));
						} else {
							$input.val("");
							$input.trigger("result", null);
						}
					}
				});
			}
		};
		function receiveData(q, data) {
			if (data && data.length && hasFocus) {
				stopLoading();
				select.display(data, q);
				autoFill(q, data[0].value);
				select.show();
			} else {
				hideResultsNow();
			}
		};
		function request(term, success, failure) {
			if (!options.matchCase)
				term = term.toLowerCase();
			var data = cache.load(term);
			if (data && data.length) {
				success(term, data);
			} else if ((typeof options.url == "string") && (options.url.length > 0)) {
				var extraParams = {
					timestamp : +new Date()
				};
				$.each(options.extraParams, function (key, param) {
					extraParams[key] = typeof param == "function" ? param() : param;
				});
				$.ajax({
					mode : "abort",
					port : "autocomplete" + input.name,
					dataType : options.dataType,
					url : options.url,
					data : $.extend({
						q : lastWord(term),
						limit : options.max
					}, extraParams),
					success : function (data) {
						var parsed = options.parse && options.parse(data) || parse(data);
						cache.add(term, parsed);
						success(term, parsed);
					}
				});
			} else {
				select.emptyList();
				failure(term);
			}
		};
		function parse(data) {
			var parsed = [];
			var rows = data.split("\n");
			for (var i = 0; i < rows.length; i++) {
				var row = $.trim(rows[i]);
				if (row) {
					row = row.split("|");
					parsed[parsed.length] = {
						data : row,
						value : row[0],
						result : options.formatResult && options.formatResult(row, row[0]) || row[0]
					};
				}
			}
			return parsed;
		};
		function stopLoading() {
			$input.removeClass(options.loadingClass);
		};
	};
	$.Autocompleter.defaults = {
		inputClass : "ac_input",
		resultsClass : "ac_results",
		loadingClass : "ac_loading",
		minChars : 1,
		delay : 1000, //LK: was 400
		matchCase : false,
		matchSubset : true,
		matchContains : false,
		cacheLength : 0, //LK: was 10
		max : 20, //LK: was 100
		mustMatch : false,
		extraParams : {},
		selectFirst : true,
		formatItem : function (row) {
			return row[0];
		},
		formatMatch : null,
		autoFill : false,
		width : 0,
		multiple : false,
		multipleSeparator : ", ",
		highlight : function (value, term) {
			return value.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)(" + term.replace(/([\^\$\(\)\[\]\{\}\*\.\+\?\|\\])/gi, "\\$1") + ")(?![^<>]*>)(?![^&;]+;)", "gi"), "<strong>$1</strong>");
		},
		scroll : true,
		scrollHeight : 180
	};
	$.Autocompleter.Cache = function (options) {
		var data = {};
		var length = 0;
		function matchSubset(s, sub) {
			if (!options.matchCase)
				s = s.toLowerCase();
			var i = s.indexOf(sub);
			if (options.matchContains == "word") {
				i = s.toLowerCase().search("\\b" + sub.toLowerCase());
			}
			if (i == -1)
				return false;
			return i == 0 || options.matchContains;
		};
		function add(q, value) {
			if (length > options.cacheLength) {
				flush();
			}
			if (!data[q]) {
				length++;
			}
			data[q] = value;
		}
		function populate() {
			if (!options.data)
				return false;
			var stMatchSets = {},
			nullData = 0;
			if (!options.url)
				options.cacheLength = 1;
			stMatchSets[""] = [];
			for (var i = 0, ol = options.data.length; i < ol; i++) {
				var rawValue = options.data[i];
				rawValue = (typeof rawValue == "string") ? [rawValue] : rawValue;
				var value = options.formatMatch(rawValue, i + 1, options.data.length);
				if (value === false)
					continue;
				var firstChar = value.charAt(0).toLowerCase();
				if (!stMatchSets[firstChar])
					stMatchSets[firstChar] = [];
				var row = {
					value : value,
					data : rawValue,
					result : options.formatResult && options.formatResult(rawValue) || value
				};
				stMatchSets[firstChar].push(row);
				if (nullData++ < options.max) {
					stMatchSets[""].push(row);
				}
			};
			$.each(stMatchSets, function (i, value) {
				options.cacheLength++;
				add(i, value);
			});
		}
		setTimeout(populate, 25);
		function flush() {
			data = {};
			length = 0;
		}
		return {
			flush : flush,
			add : add,
			populate : populate,
			load : function (q) {
				if (!options.cacheLength || !length)
					return null;
				if (!options.url && options.matchContains) {
					var csub = [];
					for (var k in data) {
						if (k.length > 0) {
							var c = data[k];
							$.each(c, function (i, x) {
								if (matchSubset(x.value, q)) {
									csub.push(x);
								}
							});
						}
					}
					return csub;
				} else
					if (data[q]) {
						return data[q];
					} else
						if (options.matchSubset) {
							for (var i = q.length - 1; i >= options.minChars; i--) {
								var c = data[q.substr(0, i)];
								if (c) {
									var csub = [];
									$.each(c, function (i, x) {
										if (matchSubset(x.value, q)) {
											csub[csub.length] = x;
										}
									});
									return csub;
								}
							}
						}
				return null;
			}
		};
	};
	$.Autocompleter.Select = function (options, input, select, config) {
		var CLASSES = {
			ACTIVE : "ac_over"
		};
		var listItems,
		active = -1,
		data,
		term = "",
		needsInit = true,
		element,
		list;
		function init() {
			if (!needsInit)
				return;
			element = $("<div/>").hide().addClass(options.resultsClass).css("position", "absolute").appendTo(document.body);
			list = $("<ul/>").appendTo(element).mouseover(function (event) {
					if (target(event).nodeName && target(event).nodeName.toUpperCase() == 'LI') {
						active = $("li", list).removeClass(CLASSES.ACTIVE).index(target(event));
						$(target(event)).addClass(CLASSES.ACTIVE);
					}
				}).click(function (event) {
					$(target(event)).addClass(CLASSES.ACTIVE);
					select();
					input.focus();
					return false;
				}).mousedown(function () {
					config.mouseDownOnSelect = true;
				}).mouseup(function () {
					config.mouseDownOnSelect = false;
				});
			if (options.width > 0)
				element.css("width", options.width);
			needsInit = false;
		}
		function target(event) {
			var element = event.target;
			while (element && element.tagName != "LI")
				element = element.parentNode;
			if (!element)
				return [];
			return element;
		}
		function moveSelect(step) {
			listItems.slice(active, active + 1).removeClass(CLASSES.ACTIVE);
			movePosition(step);
			var activeItem = listItems.slice(active, active + 1).addClass(CLASSES.ACTIVE);
			if (options.scroll) {
				var offset = 0;
				listItems.slice(0, active).each(function () {
					offset += this.offsetHeight;
				});
				if ((offset + activeItem[0].offsetHeight - list.scrollTop()) > list[0].clientHeight) {
					list.scrollTop(offset + activeItem[0].offsetHeight - list.innerHeight());
				} else if (offset < list.scrollTop()) {
					list.scrollTop(offset);
				}
			}
		};
		function movePosition(step) {
			active += step;
			if (active < 0) {
				active = listItems.size() - 1;
			} else if (active >= listItems.size()) {
				active = 0;
			}
		}
		function limitNumberOfItems(available) {
			return options.max && options.max < available ? options.max : available;
		}
		function fillList() {
			list.empty();
			var max = limitNumberOfItems(data.length);
			for (var i = 0; i < max; i++) {
				if (!data[i])
					continue;
				var formatted = options.formatItem(data[i].data, i + 1, max, data[i].value, term);
				if (formatted === false)
					continue;
				var li = $("<li/>").html(options.highlight(formatted, term)).addClass(i % 2 == 0 ? "ac_even" : "ac_odd").appendTo(list)[0];
				$.data(li, "ac_data", data[i]);
			}
			listItems = list.find("li");
			if (options.selectFirst) {
				listItems.slice(0, 1).addClass(CLASSES.ACTIVE);
				active = 0;
			}
			if ($.fn.bgiframe)
				list.bgiframe();
		}
		return {
			display : function (d, q) {
				init();
				data = d;
				term = q;
				fillList();
			},
			next : function () {
				moveSelect(1);
			},
			prev : function () {
				moveSelect(-1);
			},
			pageUp : function () {
				if (active != 0 && active - 8 < 0) {
					moveSelect(-active);
				} else {
					moveSelect(-8);
				}
			},
			pageDown : function () {
				if (active != listItems.size() - 1 && active + 8 > listItems.size()) {
					moveSelect(listItems.size() - 1 - active);
				} else {
					moveSelect(8);
				}
			},
			hide : function () {
				element && element.hide();
				listItems && listItems.removeClass(CLASSES.ACTIVE);
				active = -1;
			},
			visible : function () {
				return element && element.is(":visible");
			},
			current : function () {
				return this.visible() && (listItems.filter("." + CLASSES.ACTIVE)[0] || options.selectFirst && listItems[0]);
			},
			show : function () {
				var offset = $(input).offset();
				element.css({
					width : typeof options.width == "string" || options.width > 0 ? options.width : $(input).width(),
					top : offset.top + input.offsetHeight,
					left : offset.left
				}).show();
				if (options.scroll) {
					list.scrollTop(0);
					list.css({
						maxHeight : options.scrollHeight,
						overflow : 'auto'
					});
					if ($.browser.msie && typeof document.body.style.maxHeight === "undefined") {
						var listHeight = 0;
						listItems.each(function () {
							listHeight += this.offsetHeight;
						});
						var scrollbarsVisible = listHeight > options.scrollHeight;
						list.css('height', scrollbarsVisible ? options.scrollHeight : listHeight);
						if (!scrollbarsVisible) {
							listItems.width(list.width() - parseInt(listItems.css("padding-left")) - parseInt(listItems.css("padding-right")));
						}
					}
				}
			},
			selected : function () {
				var selected = listItems && listItems.filter("." + CLASSES.ACTIVE).removeClass(CLASSES.ACTIVE);
				return selected && selected.length && $.data(selected[0], "ac_data");
			},
			emptyList : function () {
				list && list.empty();
			},
			unbind : function () {
				element && element.remove();
			}
		};
	};
	$.fn.selection = function (start, end) {
		if (start !== undefined) {
			return this.each(function () {
				if (this.createTextRange) {
					var selRange = this.createTextRange();
					if (end === undefined || start == end) {
						selRange.move("character", start);
						selRange.select();
					} else {
						selRange.collapse(true);
						selRange.moveStart("character", start);
						selRange.moveEnd("character", end);
						selRange.select();
					}
				} else if (this.setSelectionRange) {
					this.setSelectionRange(start, end);
				} else if (this.selectionStart) {
					this.selectionStart = start;
					this.selectionEnd = end;
				}
			});
		}
		var field = this[0];
		if (field.createTextRange) {
			var range = document.selection.createRange(),
			orig = field.value,
			teststring = "<->",
			textLength = range.text.length;
			range.text = teststring;
			var caretAt = field.value.indexOf(teststring);
			field.value = orig;
			this.selection(caretAt, caretAt + textLength);
			return {
				start : caretAt,
				end : caretAt + textLength
			}
		} else if (field.selectionStart !== undefined) {
			return {
				start : field.selectionStart,
				end : field.selectionEnd
			}
		}
	};
})(jQuery);
define("jquery-autocomplete/jquery.autocomplete.min", function () {});

/** @license
 * jQuery-Plugin "visualize" (inputToButton)
 * by Scott Jehl, scott@filamentgroup.com
 * http://www.filamentgroup.com
 * Copyright (c) 2009 Filament Group
 * Dual licensed under the MIT (filamentgroup.com/examples/mit-license.txt) and GPL (filamentgroup.com/examples/gpl-license.txt) licenses.
 */
(function ($) {
	$.fn.visualize = function (options, container) {
		return $(this).each(function () {
			//configuration
			var o = $.extend({
					type : 'bar', //also available: area, pie, line
					width : $(this).width(), //height of canvas - defaults to table height
					height : $(this).height(), //height of canvas - defaults to table height
					appendTitle : true, //table caption text is added to chart
					title : null, //grabs from table caption if null
					appendKey : true, //color key is added to chart
					rowFilter : ' ',
					colFilter : ' ',
					colors : ['#be1e2d', '#666699', '#92d5ea', '#ee8310', '#8d10ee', '#5a3b16', '#26a4ed', '#f45a90', '#e9e744'],
					textColors : [], //corresponds with colors array. null/undefined items will fall back to CSS
					parseDirection : 'x', //which direction to parse the table data
					pieMargin : 20, //pie charts only - spacing around pie
					pieLabelsAsPercent : true,
					pieLabelPos : 'inside',
					lineWeight : 4, //for line and area - stroke weight
					barGroupMargin : 10,
					barMargin : 1, //space around bars in bar chart (added to both sides of bar)
					yLabelInterval : 30 //distance between y labels
				}, options);
			
			//reset width, height to numbers
			o.width = parseFloat(o.width);
			o.height = parseFloat(o.height);
			
			var self = $(this);
			
			//function to scrape data from html table
			function scrapeTable() {
				var colors = o.colors;
				var textColors = o.textColors;
				var tableData = {
					dataGroups : function () {
						var dataGroups = [];
						if (o.parseDirection == 'x') {
							self.find('tr:gt(0)').filter(o.rowFilter).each(function (i) {
								dataGroups[i] = {};
								dataGroups[i].points = [];
								dataGroups[i].color = colors[i];
								if (textColors[i]) {
									dataGroups[i].textColor = textColors[i];
								}
								$(this).find('td').filter(o.colFilter).each(function () {
									dataGroups[i].points.push(parseFloat($(this).text()));
								});
							});
						} else {
							var cols = self.find('tr:eq(1) td').filter(o.colFilter).size();
							for (var i = 0; i < cols; i++) {
								dataGroups[i] = {};
								dataGroups[i].points = [];
								dataGroups[i].color = colors[i];
								if (textColors[i]) {
									dataGroups[i].textColor = textColors[i];
								}
								self.find('tr:gt(0)').filter(o.rowFilter).each(function () {
									dataGroups[i].points.push($(this).find('td').filter(o.colFilter).eq(i).text() * 1);
								});
							};
						}
						return dataGroups;
					},
					allData : function () {
						var allData = [];
						$(this.dataGroups()).each(function () {
							allData.push(this.points);
						});
						return allData;
					},
					dataSum : function () {
						var dataSum = 0;
						var allData = this.allData().join(',').split(',');
						$(allData).each(function () {
							dataSum += parseFloat(this);
						});
						return dataSum
					},
					topValue : function () {
						var topValue = 0;
						var allData = this.allData().join(',').split(',');
						$(allData).each(function () {
							if (parseFloat(this, 10) > topValue)
								topValue = parseFloat(this);
						});
						return topValue;
					},
					bottomValue : function () {
						var bottomValue = 0;
						var allData = this.allData().join(',').split(',');
						$(allData).each(function () {
							if (this < bottomValue)
								bottomValue = parseFloat(this);
						});
						return bottomValue;
					},
					memberTotals : function () {
						var memberTotals = [];
						var dataGroups = this.dataGroups();
						$(dataGroups).each(function (l) {
							var count = 0;
							$(dataGroups[l].points).each(function (m) {
								count += dataGroups[l].points[m];
							});
							memberTotals.push(count);
						});
						return memberTotals;
					},
					yTotals : function () {
						var yTotals = [];
						var dataGroups = this.dataGroups();
						var loopLength = this.xLabels().length;
						for (var i = 0; i < loopLength; i++) {
							yTotals[i] = [];
							var thisTotal = 0;
							$(dataGroups).each(function (l) {
								yTotals[i].push(this.points[i]);
							});
							yTotals[i].join(',').split(',');
							$(yTotals[i]).each(function () {
								thisTotal += parseFloat(this);
							});
							yTotals[i] = thisTotal;
							
						}
						return yTotals;
					},
					topYtotal : function () {
						var topYtotal = 0;
						var yTotals = this.yTotals().join(',').split(',');
						$(yTotals).each(function () {
							if (parseFloat(this, 10) > topYtotal)
								topYtotal = parseFloat(this);
						});
						return topYtotal;
					},
					totalYRange : function () {
						return this.topValue() - this.bottomValue();
					},
					xLabels : function () {
						var xLabels = [];
						if (o.parseDirection == 'x') {
							self.find('tr:eq(0) th').filter(o.colFilter).each(function () {
								xLabels.push($(this).html());
							});
						} else {
							self.find('tr:gt(0) th').filter(o.rowFilter).each(function () {
								xLabels.push($(this).html());
							});
						}
						return xLabels;
					},
					yLabels : function () {
						var yLabels = [];
						yLabels.push(bottomValue);
						var numLabels = Math.round(o.height / o.yLabelInterval);
						var loopInterval = Math.ceil(totalYRange / numLabels) || 1;
						while (yLabels[yLabels.length - 1] < topValue - loopInterval) {
							yLabels.push(yLabels[yLabels.length - 1] + loopInterval);
						}
						yLabels.push(topValue);
						return yLabels;
					}
				};
				
				return tableData;
			};
			
			//function to create a chart
			var createChart = {
				pie : function () {
					
					canvasContain.addClass('visualize-pie');
					
					if (o.pieLabelPos == 'outside') {
						canvasContain.addClass('visualize-pie-outside');
					}
					
					var centerx = Math.round(canvas.width() / 2);
					var centery = Math.round(canvas.height() / 2);
					var radius = centery - o.pieMargin;
					var counter = 0.0;
					var toRad = function (integer) {
						return (Math.PI / 180) * integer;
					};
					var labels = $('<ul class="visualize-labels"></ul>')
						.insertAfter(canvas);
					
					//draw the pie pieces
					$.each(memberTotals, function (i) {
						var fraction = (this <= 0 || isNaN(this)) ? 0 : this / dataSum;
						ctx.beginPath();
						ctx.moveTo(centerx, centery);
						ctx.arc(centerx, centery, radius,
							counter * Math.PI * 2 - Math.PI * 0.5,
							(counter + fraction) * Math.PI * 2 - Math.PI * 0.5,
							false);
						ctx.lineTo(centerx, centery);
						ctx.closePath();
						ctx.fillStyle = dataGroups[i].color;
						ctx.fill();
						// draw labels
						var sliceMiddle = (counter + fraction / 2);
						var distance = o.pieLabelPos == 'inside' ? radius / 1.5 : radius + radius / 5;
						var labelx = Math.round(centerx + Math.sin(sliceMiddle * Math.PI * 2) * (distance));
						var labely = Math.round(centery - Math.cos(sliceMiddle * Math.PI * 2) * (distance));
						var leftRight = (labelx > centerx) ? 'right' : 'left';
						var topBottom = (labely > centery) ? 'bottom' : 'top';
						var percentage = parseFloat((fraction * 100).toFixed(2));
						
						if (percentage) {
							var labelval = (o.pieLabelsAsPercent) ? percentage + '%' : this;
							var labeltext = $('<span class="visualize-label">' + labelval + '</span>')
								.css(leftRight, 0)
								.css(topBottom, 0);
							if (labeltext)
								var label = $('<li class="visualize-label-pos"></li>')
									.appendTo(labels)
									.css({
										left : labelx,
										top : labely
									})
									.append(labeltext);
							labeltext
							.css('font-size', radius / 8)
							.css('margin-' + leftRight, -labeltext.width() / 2)
							.css('margin-' + topBottom, -labeltext.outerHeight() / 2);
							
							if (dataGroups[i].textColor) {
								labeltext.css('color', dataGroups[i].textColor);
							}
						}
						counter += fraction;
					});
				},
				
				line : function (area) {
					
					if (area) {
						canvasContain.addClass('visualize-area');
					} else {
						canvasContain.addClass('visualize-line');
					}
					
					//write X labels
					var xInterval = canvas.width() / (xLabels.length - 1);
					var xlabelsUL = $('<ul class="visualize-labels-x"></ul>')
						.width(canvas.width())
						.height(canvas.height())
						.insertBefore(canvas);
					$.each(xLabels, function (i) {
						var thisLi = $('<li><span>' + this + '</span></li>')
							.prepend('<span class="line" />')
							.css('left', xInterval * i)
							.appendTo(xlabelsUL);
						var label = thisLi.find('span:not(.line)');
						var leftOffset = label.width() / -2;
						if (i == 0) {
							leftOffset = 0;
						} else if (i == xLabels.length - 1) {
							leftOffset = -label.width();
						}
						label
						.css('margin-left', leftOffset)
						.addClass('label');
					});
					
					//write Y labels
					var yScale = canvas.height() / totalYRange;
					var liBottom = canvas.height() / (yLabels.length - 1);
					var ylabelsUL = $('<ul class="visualize-labels-y"></ul>')
						.width(canvas.width())
						.height(canvas.height())
						.insertBefore(canvas);
					
					$.each(yLabels, function (i) {
						var thisLi = $('<li><span>' + this + '</span></li>')
							.prepend('<span class="line"  />')
							.css('bottom', liBottom * i)
							.prependTo(ylabelsUL);
						var label = thisLi.find('span:not(.line)');
						var topOffset = label.height() / -2;
						if (i == 0) {
							topOffset = -label.height();
						} else if (i == yLabels.length - 1) {
							topOffset = 0;
						}
						label
						.css('margin-top', topOffset)
						.addClass('label');
					});
					
					//start from the bottom left
					ctx.translate(0, zeroLoc);
					//iterate and draw
					$.each(dataGroups, function (h) {
						ctx.beginPath();
						ctx.lineWidth = o.lineWeight;
						ctx.lineJoin = 'round';
						var points = this.points;
						var integer = 0;
						ctx.moveTo(0,  - (points[0] * yScale));
						$.each(points, function () {
							ctx.lineTo(integer,  - (this * yScale));
							integer += xInterval;
						});
						ctx.strokeStyle = this.color;
						ctx.stroke();
						if (area) {
							ctx.lineTo(integer, 0);
							ctx.lineTo(0, 0);
							ctx.closePath();
							ctx.fillStyle = this.color;
							ctx.globalAlpha = .3;
							ctx.fill();
							ctx.globalAlpha = 1.0;
						} else {
							ctx.closePath();
						}
					});
				},
				
				area : function () {
					createChart.line(true);
				},
				
				bar : function () {
					
					canvasContain.addClass('visualize-bar');
					
					//write X labels
					var xInterval = canvas.width() / (xLabels.length);
					var xlabelsUL = $('<ul class="visualize-labels-x"></ul>')
						.width(canvas.width())
						.height(canvas.height())
						.insertBefore(canvas);
					$.each(xLabels, function (i) {
						var thisLi = $('<li><span class="label">' + this + '</span></li>')
							.prepend('<span class="line" />')
							.css('left', xInterval * i)
							.width(xInterval)
							.appendTo(xlabelsUL);
						var label = thisLi.find('span.label');
						label.addClass('label');
					});
					
					//write Y labels
					var yScale = canvas.height() / totalYRange;
					var liBottom = canvas.height() / (yLabels.length - 1);
					var ylabelsUL = $('<ul class="visualize-labels-y"></ul>')
						.width(canvas.width())
						.height(canvas.height())
						.insertBefore(canvas);
					$.each(yLabels, function (i) {
						var thisLi = $('<li><span>' + this + '</span></li>')
							.prepend('<span class="line"  />')
							.css('bottom', liBottom * i)
							.prependTo(ylabelsUL);
						var label = thisLi.find('span:not(.line)');
						var topOffset = label.height() / -2;
						if (i == 0) {
							topOffset = -label.height();
						} else if (i == yLabels.length - 1) {
							topOffset = 0;
						}
						label
						.css('margin-top', topOffset)
						.addClass('label');
					});
					
					//start from the bottom left
					ctx.translate(0, zeroLoc);
					//iterate and draw
					for (var h = 0; h < dataGroups.length; h++) {
						ctx.beginPath();
						var linewidth = (xInterval - o.barGroupMargin * 2) / dataGroups.length; //removed +1
						var strokeWidth = linewidth - (o.barMargin * 2);
						ctx.lineWidth = strokeWidth;
						var points = dataGroups[h].points;
						var integer = 0;
						for (var i = 0; i < points.length; i++) {
							var xVal = (integer - o.barGroupMargin) + (h * linewidth) + linewidth / 2;
							xVal += o.barGroupMargin * 2;
							
							ctx.moveTo(xVal, 0);
							ctx.lineTo(xVal, Math.round(-points[i] * yScale));
							integer += xInterval;
						}
						ctx.strokeStyle = dataGroups[h].color;
						ctx.stroke();
						ctx.closePath();
					}
				}
			};
			
			//create new canvas, set w&h attrs (not inline styles)
			var canvasNode = document.createElement("canvas");
			canvasNode.setAttribute('height', o.height);
			canvasNode.setAttribute('width', o.width);
			var canvas = $(canvasNode);
			
			//get title for chart
			var title = o.title || self.find('caption').text();
			
			//create canvas wrapper div, set inline w&h, append
			var canvasContain = (container || $('<div class="visualize" role="img" aria-label="Chart representing data from the table: ' + title + '" />'))
			.height(o.height)
			.width(o.width)
			.append(canvas);
			
			//scrape table (this should be cleaned up into an obj)
			var tableData = scrapeTable();
			var dataGroups = tableData.dataGroups();
			var allData = tableData.allData();
			var dataSum = tableData.dataSum();
			var topValue = tableData.topValue();
			var bottomValue = tableData.bottomValue();
			var memberTotals = tableData.memberTotals();
			var totalYRange = tableData.totalYRange();
			var zeroLoc = o.height * (topValue / totalYRange);
			var xLabels = tableData.xLabels();
			var yLabels = tableData.yLabels();
			
			//title/key container
			if (o.appendTitle || o.appendKey) {
				var infoContain = $('<div class="visualize-info"></div>')
					.appendTo(canvasContain);
			}
			
			//append title
			if (o.appendTitle) {
				$('<div class="visualize-title">' + title + '</div>').appendTo(infoContain);
			}
			
			//append key
			if (o.appendKey) {
				var newKey = $('<ul class="visualize-key"></ul>');
				var selector;
				if (o.parseDirection == 'x') {
					selector = self.find('tr:gt(0) th').filter(o.rowFilter);
				} else {
					selector = self.find('tr:eq(0) th').filter(o.colFilter);
				}
				
				selector.each(function (i) {
					$('<li><span class="visualize-key-color" style="background: ' + dataGroups[i].color + '"></span><span class="visualize-key-label">' + $(this).text() + '</span></li>')
					.appendTo(newKey);
				});
				newKey.appendTo(infoContain);
			};
			
			//append new canvas to page
			
			if (!container) {
				canvasContain.insertAfter(this);
			}
			if (typeof(G_vmlCanvasManager) != 'undefined') {
				G_vmlCanvasManager.init();
				G_vmlCanvasManager.initElement(canvas[0]);
			}
			
			//set up the drawing board
			var ctx = canvas[0].getContext('2d');
			
			//create chart
			createChart[o.type]();
			
			//clean up some doubled lines that sit on top of canvas borders (done via JS due to IE)
			$('.visualize-line li:first-child span.line, .visualize-line li:last-child span.line, .visualize-area li:first-child span.line, .visualize-area li:last-child span.line, .visualize-bar li:first-child span.line,.visualize-bar .visualize-labels-y li:last-child span.line').css('border', 'none');
			if (!container) {
				//add event for updating
				canvasContain.bind('visualizeRefresh', function () {
					self.visualize(o, $(this).empty());
				});
			}
		}).next(); //returns canvas(es)
	};
})(jQuery);

//*******************************************************************************
//Title:      FCP Combo-Chromatic Color Picker
//URL:        http://www.free-color-picker.com
//Product No. FCP201a
//Version:    1.2
//Date:       10/01/2006
//NOTE:       Permission given to use this script in ANY kind of applications IF
//            script code remains UNCHANGED and the anchor tag "powered by FCP"
//            remains valid and visible to the user.
//
//  Call:     showColorGrid2("input_field_id","span_id")
//  Add:      <DIV ID="COLORPICKER201" CLASS="COLORPICKER201"></DIV> anywhere in body
//*******************************************************************************
function getScrollY() {
	var scrOfX = 0,
	scrOfY = 0;
	if (typeof(window.pageYOffset) == 'number') {
		scrOfY = window.pageYOffset;
		scrOfX = window.pageXOffset;
	} else if (document.body && (document.body.scrollLeft || document.body.scrollTop)) {
		scrOfY = document.body.scrollTop;
		scrOfX = document.body.scrollLeft;
	} else if (document.documentElement && (document.documentElement.scrollLeft || document.documentElement.scrollTop)) {
		scrOfY = document.documentElement.scrollTop;
		scrOfX = document.documentElement.scrollLeft;
	}
	return scrOfY;
}
function getTop2() {
	csBrHt = 0;
	if (typeof(window.innerWidth) == 'number') {
		csBrHt = window.innerHeight;
	} else if (document.documentElement && (document.documentElement.clientWidth || document.documentElement.clientHeight)) {
		csBrHt = document.documentElement.clientHeight;
	} else if (document.body && (document.body.clientWidth || document.body.clientHeight)) {
		csBrHt = document.body.clientHeight;
	}
	ctop = ((csBrHt / 2) - 115) + getScrollY();
	return ctop;
}
var nocol1 = "&#78;&#79;&#32;&#67;&#79;&#76;&#79;&#82;", clos1 = "&#67;&#76;&#79;&#83;&#69;", tt2 = "&#70;&#82;&#69;&#69;&#45;&#67;&#79;&#76;&#79;&#82;&#45;&#80;&#73;&#67;&#75;&#69;&#82;&#46;&#67;&#79;&#77;", hm2 = "&#104;&#116;&#116;&#112;&#58;&#47;&#47;&#119;&#119;&#119;&#46;";
hm2 += tt2;
tt2 = "&#80;&#79;&#87;&#69;&#82;&#69;&#68;&#32;&#98;&#121;&#32;&#70;&#67;&#80;";
function getLeft2() {
	var csBrWt = 0;
	if (typeof(window.innerWidth) == 'number') {
		csBrWt = window.innerWidth;
	} else if (document.documentElement && (document.documentElement.clientWidth || document.documentElement.clientHeight)) {
		csBrWt = document.documentElement.clientWidth;
	} else if (document.body && (document.body.clientWidth || document.body.clientHeight)) {
		csBrWt = document.body.clientWidth;
	}
	cleft = (csBrWt / 2) - 125;
	return cleft;
}
function setCCbldID2(objID, val) {
	document.getElementById(objID).value = val;
}
function setCCbldSty2(objID, prop, val) {
	switch (prop) {
	case "bc":
		if (objID != 'none') {
			document.getElementById(objID).style.backgroundColor = val;
		};
		break;
	case "vs":
		document.getElementById(objID).style.visibility = val;
		break;
	case "ds":
		document.getElementById(objID).style.display = val;
		break;
	case "tp":
		document.getElementById(objID).style.top = val;
		break;
	case "lf":
		document.getElementById(objID).style.left = val;
		break;
	}
}
function putOBJxColor2(OBjElem, Samp, pigMent) {
	if (pigMent != 'x') {
		setCCbldID2(OBjElem, pigMent);
		setCCbldSty2(Samp, 'bc', pigMent);
	}
	setCCbldSty2('colorpicker201', 'vs', 'hidden');
	setCCbldSty2('colorpicker201', 'ds', 'none');
}
function showColorGrid2(OBjElem, Sam) {
	var objX = new Array('00', '33', '66', '99', 'CC', 'FF');
	var c = 0;
	var z = '"' + OBjElem + '","' + Sam + '",""';
	var xl = '"' + OBjElem + '","' + Sam + '","x"';
	var mid = '';
	mid += '<table bgcolor="#FFFFFF" border="0" cellpadding="0" cellspacing="0" style="border:solid 0px #F0F0F0;padding:2px;"><tr>';
	mid += "<td colspan='18' align='left' style='font-size:10px;background:#6666CC;color:#FFF;font-family:arial;'>&nbsp;Chromatic Selection Palette</td></tr><tr><td colspan='18' align='center' style='margin:0;padding:2px;height:12px;' ><input class='o5582n66' type='text' size='12' id='o5582n66' value='#FFFFFF'><input class='o5582n66a' type='text' size='2' style='width:14px;' id='o5582n66a' onclick='javascript:alert(\"click on selected swatch below...\");' value='' style='border:solid 1px #666;'>&nbsp;|&nbsp;<a class='o5582n66' href='javascript:onclick=putOBJxColor2(" + z + ")'><span class='a01p3'>" + nocol1 + "</span></a>&nbsp;&nbsp;&nbsp;&nbsp;<a class='o5582n66' href='javascript:onclick=putOBJxColor2(" + xl + ")'><span class='a01p3'>" + clos1 + "</span></a></td></tr><tr>";
	var br = 1;
	for (o = 0; o < 6; o++) {
		mid += '</tr><tr>';
		for (y = 0; y < 6; y++) {
			if (y == 3) {
				mid += '</tr><tr>';
			}
			for (x = 0; x < 6; x++) {
				var grid = '';
				grid = objX[o] + objX[y] + objX[x];
				var b = "'" + OBjElem + "', '" + Sam + "','#" + grid + "'";
				mid += '<td class="o5582brd" style="background-color:#' + grid + '"><a class="o5582n66"  href="javascript:onclick=putOBJxColor2(' + b + ');" onmouseover=javascript:document.getElementById("o5582n66").value="#' + grid + '";javascript:document.getElementById("o5582n66a").style.backgroundColor="#' + grid + '";  title="#' + grid + '"><div style="width:12px;height:14px;"></div></a></td>';
				c++;
			}
		}
	}
	mid += "</tr><tr><td colspan='18' align='right' style='padding:2px;border:solid 1px #FFF;background:#FFF;'></td></tr></table>";
	var ttop = getTop2();
	setCCbldSty2('colorpicker201', 'tp', ttop);
	document.getElementById('colorpicker201').style.left = getLeft2();
	setCCbldSty2('colorpicker201', 'vs', 'visible');
	setCCbldSty2('colorpicker201', 'ds', 'block');
	document.getElementById('colorpicker201').innerHTML = mid;
}
define("ColorPicker/201a", function () {});

/** @license
 * Super Tables v0.30 - MIT Style License
 * Copyright (c) 2008 Matt Murphy, www.matts411.com
 * Contributors: Joe Gallo
 */
/* Compressed with Dean Edwards' /Packer/ v3.0 --- http://dean.edwards.name/packer/ */
define('superTable', [], function () {
	var superTable = function (tableId, options) {
		
		options = options || {};
		this.cssSkin = options.cssSkin || "";
		this.headerRows = parseInt(options.headerRows || "1");
		this.fixedCols = parseInt(options.fixedCols || "0");
		this.colWidths = options.colWidths || [];
		this.initFunc = options.onStart || null;
		this.callbackFunc = options.onFinish || null;
		this.initFunc && this.initFunc();
		this.sBase = document.createElement("DIV");
		this.sFHeader = this.sBase.cloneNode(false);
		this.sHeader = this.sBase.cloneNode(false);
		this.sHeaderInner = this.sBase.cloneNode(false);
		this.sFData = this.sBase.cloneNode(false);
		this.sFDataInner = this.sBase.cloneNode(false);
		this.sData = this.sBase.cloneNode(false);
		this.sColGroup = document.createElement("COLGROUP");
		this.sDataTable = document.getElementById(tableId);
		this.sDataTable.style.margin = "0px";
		if (this.cssSkin !== "") {
			this.sDataTable.className += " " + this.cssSkin
		}
		if (this.sDataTable.getElementsByTagName("COLGROUP").length > 0) {
			this.sDataTable.removeChild(this.sDataTable.getElementsByTagName("COLGROUP")[0])
		}
		this.sParent = this.sDataTable.parentNode;
		this.sParentHeight = this.sParent.offsetHeight;
		this.sParentWidth = this.sParent.offsetWidth;
		this.sBase.className = "sBase";
		this.sFHeader.className = "sFHeader";
		this.sHeader.className = "sHeader";
		this.sHeaderInner.className = "sHeaderInner";
		this.sFData.className = "sFData";
		this.sFDataInner.className = "sFDataInner";
		this.sData.className = "sData";
		var alpha,
		beta,
		touched,
		clean,
		cleanRow,
		i,
		j,
		k,
		m,
		n,
		p;
		this.sHeaderTable = this.sDataTable.cloneNode(false);
		if (this.sDataTable.tHead) {
			alpha = this.sDataTable.tHead;
			this.sHeaderTable.appendChild(alpha.cloneNode(false));
			beta = this.sHeaderTable.tHead
		} else {
			alpha = this.sDataTable.tBodies[0];
			this.sHeaderTable.appendChild(alpha.cloneNode(false));
			beta = this.sHeaderTable.tBodies[0]
		}
		alpha = alpha.rows;
		for (i = 0; i < this.headerRows; i++) {
			beta.appendChild(alpha[i].cloneNode(true))
		}
		this.sHeaderInner.appendChild(this.sHeaderTable);
		if (this.fixedCols > 0) {
			this.sFHeaderTable = this.sHeaderTable.cloneNode(true);
			this.sFHeader.appendChild(this.sFHeaderTable);
			this.sFDataTable = this.sDataTable.cloneNode(true);
			this.sFDataInner.appendChild(this.sFDataTable)
		}
		alpha = this.sDataTable.tBodies[0].rows;
		
		/* Stops the code if there are no rows. Why continue if there's nothing to work with? */
		if (this.sDataTable.tBodies[0].rows.length == 0) {
			return false;
		}
		
		for (i = 0, j = alpha.length; i < j; i++) {
			clean = true;
			for (k = 0, m = alpha[i].cells.length; k < m; k++) {
				if (alpha[i].cells[k].colSpan !== 1 || alpha[i].cells[k].rowSpan !== 1) {
					i += alpha[i].cells[k].rowSpan - 1;
					clean = false;
					break
				}
			}
			if (clean === true)
				break
		}
		cleanRow = (clean === true) ? i : 0;
		for (i = 0, j = alpha[cleanRow].cells.length; i < j; i++) {
			if (i === this.colWidths.length || this.colWidths[i] === -1) {
				this.colWidths[i] = alpha[cleanRow].cells[i].offsetWidth
			}
		}
		for (i = 0, j = this.colWidths.length; i < j; i++) {
			this.sColGroup.appendChild(document.createElement("COL"));
			this.sColGroup.lastChild.setAttribute("width", this.colWidths[i])
		}
		this.sDataTable.insertBefore(this.sColGroup.cloneNode(true), this.sDataTable.firstChild);
		this.sHeaderTable.insertBefore(this.sColGroup.cloneNode(true), this.sHeaderTable.firstChild);
		if (this.fixedCols > 0) {
			this.sFDataTable.insertBefore(this.sColGroup.cloneNode(true), this.sFDataTable.firstChild);
			this.sFHeaderTable.insertBefore(this.sColGroup.cloneNode(true), this.sFHeaderTable.firstChild)
		}
		if (this.cssSkin !== "") {
			this.sDataTable.className += " " + this.cssSkin + "-Main";
			this.sHeaderTable.className += " " + this.cssSkin + "-Headers";
			if (this.fixedCols > 0) {
				this.sFDataTable.className += " " + this.cssSkin + "-Fixed";
				this.sFHeaderTable.className += " " + this.cssSkin + "-FixedHeaders"
			}
		}
		if (this.fixedCols > 0) {
			this.sBase.appendChild(this.sFHeader)
		}
		this.sHeader.appendChild(this.sHeaderInner);
		this.sBase.appendChild(this.sHeader);
		if (this.fixedCols > 0) {
			this.sFData.appendChild(this.sFDataInner);
			this.sBase.appendChild(this.sFData)
		}
		this.sBase.appendChild(this.sData);
		this.sParent.insertBefore(this.sBase, this.sDataTable);
		this.sData.appendChild(this.sDataTable);
		var sDataStyles,
		sDataTableStyles;
		this.sHeaderHeight = this.sDataTable.tBodies[0].rows[(this.sDataTable.tHead) ? 0 : this.headerRows].offsetTop;
		sDataTableStyles = "margin-top: " + (this.sHeaderHeight * -1) + "px;";
		sDataStyles = "margin-top: " + this.sHeaderHeight + "px;";
		sDataStyles += "height: " + (this.sParentHeight - this.sHeaderHeight) + "px;";
		if (this.fixedCols > 0) {
			this.sFHeaderWidth = this.sDataTable.tBodies[0].rows[cleanRow].cells[this.fixedCols].offsetLeft;
			if (window.getComputedStyle) {
				alpha = document.defaultView;
				beta = this.sDataTable.tBodies[0].rows[0].cells[0];
				if (navigator.taintEnabled) {
					this.sFHeaderWidth += Math.ceil(parseInt(alpha.getComputedStyle(beta, null).getPropertyValue("border-right-width")) / 2)
				} else {
					this.sFHeaderWidth += parseInt(alpha.getComputedStyle(beta, null).getPropertyValue("border-right-width"))
				}
			} else if (/*@cc_on!@*/
				0) {
				alpha = this.sDataTable.tBodies[0].rows[0].cells[0];
				beta = [alpha.currentStyle["borderRightWidth"], alpha.currentStyle["borderLeftWidth"]];
				if (/px/i.test(beta[0]) && /px/i.test(beta[1])) {
					beta = [parseInt(beta[0]), parseInt(beta[1])].sort();
					this.sFHeaderWidth += Math.ceil(parseInt(beta[1]) / 2)
				}
			}
			if (window.opera) {
				this.sFData.style.height = this.sParentHeight + "px"
			}
			this.sFHeader.style.width = this.sFHeaderWidth + "px";
			sDataTableStyles += "margin-left: " + (this.sFHeaderWidth * -1) + "px;";
			sDataStyles += "margin-left: " + this.sFHeaderWidth + "px;";
			sDataStyles += "width: " + (this.sParentWidth - this.sFHeaderWidth) + "px;"
		} else {
			sDataStyles += "width: " + this.sParentWidth + "px;"
		}
		this.sData.style.cssText = sDataStyles;
		this.sDataTable.style.cssText = sDataTableStyles;
		
		$('table[id="' + tableId + '"]').parent('.sData').bind('scroll', function () {
			$('#' + tableId).parent().css({
				'right' : $(this).scrollLeft() + 'px'
			});
		});
		
		this.callbackFunc && this.callbackFunc()
	};
	return superTable;
});
define("vendor/superTables", function () {});

/**
 * Parses a string of well-formed JSON text.
 *
 * If the input is not well-formed, then behavior is undefined, but it is
 * deterministic and is guaranteed not to modify any object other than its
 * return value.
 *
 * This does not use `eval` so is less likely to have obscure security bugs than
 * json2.js.
 * It is optimized for speed, so is much faster than json_parse.js.
 *
 * This library should be used whenever security is a concern (when JSON may
 * come from an untrusted source), speed is a concern, and erroring on malformed
 * JSON is *not* a concern.
 *
 *                      Pros                   Cons
 *                    +-----------------------+-----------------------+
 * json_sans_eval.js  | Fast, secure          | Not validating        |
 *                    +-----------------------+-----------------------+
 * json_parse.js      | Validating, secure    | Slow                  |
 *                    +-----------------------+-----------------------+
 * json2.js           | Fast, some validation | Potentially insecure  |
 *                    +-----------------------+-----------------------+
 *
 * json2.js is very fast, but potentially insecure since it calls `eval` to
 * parse JSON data, so an attacker might be able to supply strange JS that
 * looks like JSON, but that executes arbitrary javascript.
 * If you do have to use json2.js with untrusted data, make sure you keep
 * your version of json2.js up to date so that you get patches as they're
 * released.
 *
 * @param {string} json per RFC 4627
 * @param {function} opt_reviver optional function that reworks JSON objects
 *     post-parse per Chapter 15.12 of EcmaScript3.1.
 *     If supplied, the function is called with a string key, and a value.
 *     The value is the property of 'this'.  The reviver should return
 *     the value to use in its place.  So if dates were serialized as
 *     {@code { "type": "Date", "time": 1234 }}, then a reviver might look like
 *     {@code
 *     function (key, value) {
 *       if (value && typeof value === 'object' && 'Date' === value.type) {
 *         return new Date(value.time);
 *       } else {
 *         return value;
 *       }
 *     }}.
 *     If the reviver returns {@code undefined} then the property named by key
 *     will be deleted from its container.
 *     {@code this} is bound to the object containing the specified property.
 * @return {Object|Array}
 * @author Mike Samuel <mikesamuel@gmail.com>
 */
define('jsonParse', [], function () {
	var jsonParse = (function () {
		var number
			 = '(?:-?\\b(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?\\b)';
		var oneChar = '(?:[^\\0-\\x08\\x0a-\\x1f\"\\\\]'
			 + '|\\\\(?:[\"/\\\\bfnrt]|u[0-9A-Fa-f]{4}))';
		var string = '(?:\"' + oneChar + '*\")';
		
		// Will match a value in a well-formed JSON file.
		// If the input is not well-formed, may match strangely, but not in an unsafe
		// way.
		// Since this only matches value tokens, it does not match whitespace, colons,
		// or commas.
		var jsonToken = new RegExp(
				'(?:false|true|null|[\\{\\}\\[\\]]'
				 + '|' + number
				 + '|' + string
				 + ')', 'g');
		
		// Matches escape sequences in a string literal
		var escapeSequence = new RegExp('\\\\(?:([^u])|u(.{4}))', 'g');
		
		// Decodes escape sequences in object literals
		var escapes = {
			'"' : '"',
			'/' : '/',
			'\\' : '\\',
			'b' : '\b',
			'f' : '\f',
			'n' : '\n',
			'r' : '\r',
			't' : '\t'
		};
		function unescapeOne(_, ch, hex) {
			return ch ? escapes[ch] : String.fromCharCode(parseInt(hex, 16));
		}
		
		// A non-falsy value that coerces to the empty string when used as a key.
		var EMPTY_STRING = new String('');
		var SLASH = '\\';
		
		// Constructor to use based on an open token.
		var firstTokenCtors = {
			'{' : Object,
			'[' : Array
		};
		
		var hop = Object.hasOwnProperty;
		
		return function (json, opt_reviver) {
			// Split into tokens
			var toks = json.match(jsonToken);
			// Construct the object to return
			var result;
			var tok = toks[0];
			if ('{' === tok) {
				result = {};
			} else if ('[' === tok) {
				result = [];
			} else {
				throw new Error(tok);
			}
			
			// If undefined, the key in an object key/value record to use for the next
			// value parsed.
			var key;
			// Loop over remaining tokens maintaining a stack of uncompleted objects and
			// arrays.
			var stack = [result];
			for (var i = 1, n = toks.length; i < n; ++i) {
				tok = toks[i];
				
				var cont;
				switch (tok.charCodeAt(0)) {
				default: // sign or digit
					cont = stack[0];
					cont[key || cont.length] =  + (tok);
					key = void 0;
					break;
				case 0x22: // '"'
					tok = tok.substring(1, tok.length - 1);
					if (tok.indexOf(SLASH) !== -1) {
						tok = tok.replace(escapeSequence, unescapeOne);
					}
					cont = stack[0];
					if (!key) {
						if (cont instanceof Array) {
							key = cont.length;
						} else {
							key = tok || EMPTY_STRING; // Use as key for next value seen.
							break;
						}
					}
					cont[key] = tok;
					key = void 0;
					break;
				case 0x5b: // '['
					cont = stack[0];
					stack.unshift(cont[key || cont.length] = []);
					key = void 0;
					break;
				case 0x5d: // ']'
					stack.shift();
					break;
				case 0x66: // 'f'
					cont = stack[0];
					cont[key || cont.length] = false;
					key = void 0;
					break;
				case 0x6e: // 'n'
					cont = stack[0];
					cont[key || cont.length] = null;
					key = void 0;
					break;
				case 0x74: // 't'
					cont = stack[0];
					cont[key || cont.length] = true;
					key = void 0;
					break;
				case 0x7b: // '{'
					cont = stack[0];
					stack.unshift(cont[key || cont.length] = {});
					key = void 0;
					break;
				case 0x7d: // '}'
					stack.shift();
					break;
				}
			}
			// Fail if we've got an uncompleted object.
			if (stack.length) {
				throw new Error();
			}
			
			if (opt_reviver) {
				// Based on walk as implemented in http://www.json.org/json2.js
				var walk = function (holder, key) {
					var value = holder[key];
					if (value && typeof value === 'object') {
						var toDelete = null;
						for (var k in value) {
							if (hop.call(value, k) && value !== holder) {
								// Recurse to properties first.  This has the effect of causing
								// the reviver to be called on the object graph depth-first.
								
								// Since 'this' is bound to the holder of the property, the
								// reviver can access sibling properties of k including ones
								// that have not yet been revived.
								
								// The value returned by the reviver is used in place of the
								// current value of property k.
								// If it returns undefined then the property is deleted.
								var v = walk(value, k);
								if (v !== void 0) {
									value[k] = v;
								} else {
									// Deleting properties inside the loop has vaguely defined
									// semantics in ES3 and ES3.1.
									if (!toDelete) {
										toDelete = [];
									}
									toDelete.push(k);
								}
							}
						}
						if (toDelete) {
							for (var i = toDelete.length; --i >= 0; ) {
								delete value[toDelete[i]];
							}
						}
					}
					return opt_reviver.call(holder, key, value);
				};
				result = walk({
						'' : result
					}, '');
			}
			
			return result;
		};
	})();
	
	// end define
	return jsonParse;
});






// Loads required jQuery, plugins and other 3rd parties in correct order!
define('vendor', [
		// jQuery
		'order!jQuery/jquery',		
		'order!jQuery/jquery-ui.min',
		'order!jQuery/jquery.dimensions',
		'order!jQuery/jquery.treeview',
		'order!jQuery/jquery.tinysort',
		'order!jquery-autocomplete/lib/jquery.bgiframe.min',
		'order!jquery-autocomplete/jquery.autocomplete.min',
		
		// Other 3rd parties
		'order!ColorPicker/201a',
		'order!vendor/superTables'
	], function () {
		// Do nothing
	}
);

// Publish jQuery 1st after all vendors are loaded!
define('jQuery', ['vendor'], function () {
	return window.jQuery;
});






/** @license
  Copyright (c) 2008-2012, Maximum Processing Inc, All Rights Reserved.
  
  BEGIN of Core JS Objects
  
  The following numbered objects should be loaded in order prior the rest of our objects, right after jQuery!
*/

// Main/root core object for all JS!
define('MP', ['jQuery', 'ContextMenu', 'Editor', 'Communication'], function ($, ContextMenu, Editor, Communication) {
	var MP = new function (undefined) {
		/* PRIVATE PROPERTIES */
		
		/* PRIVATE METHODS */

		return {
			/* PUBLIC PROPERTIES */
			StingrayJsVersion : "2.6.9.1", //Do not reference this from within the core, use Global.Version() instead!

			/* PUBLIC METHODS */
			Initialize : function (cfgObj) {
				jQuery.extend(MP.Config, cfgObj);
				this.Tools.Initialize();
			},

			/* PUBLIC OBJECTS */
			Modules : {
				description: "Various modules/objects"
			},
			Types : {
				description: "Type definitions"
			},
			Components : {
				description: "Screen components"
			},
			Editor : {
				description: "Editor tools"
			},
			Events : {
				description: "Core events"
			}
		};
	};
	
	// Debugging tools
	var Tools = new function () {
		try {

			/* PRIVATE PROPERTIES */
			var tbDiv = null,
				tbSect = null,
				lastButton,
				self = this;
			
			/* PRIVATE METHODS */
			function iLog(Place, Message, Type, Silent) {
				Log.Add("Tools." + Place, Message, Type, Silent);
			}
			function CompleteConfig() {
				var shell = $('#shell');
				var cfg = {
					Editor : {
						html : {
							snap : [5, 5],
							pageLayout : "middle"
						},
						ace : {
							enabled : true,
							theme : "chrome",
							codeTips : false,
							wordWrap : false
						},
						property : {
							pinned : false
						},
						toolBars : {
							developer : {
								width : 0,
								position : {
									left : shell.offset().left + shell.width() + 40,
									top : 100
								}
							},
							page : {
								width : 0,
								position : {
									left : shell.offset().left - 50,
									top : 100
								}
							},
							process : {
								width : 0,
								position : {
									left : shell.offset().left + shell.width() - 20,
									top : 100
								}
							}
						},
						tabs : {
							logging : {
								pinned : false,
								viewStyle : "float",
								position : {
									left : "center",
									top : "middle"
								},
								size : {
									width : 600,
									height : 400
								}
							},
							reqList : {
								pinned : false,
								filter : "",
								viewStyle : "float",
								showAll : false,
								position : {
									left : "center",
									top : "middle"
								},
								size : {
									width : 600,
									height : 400
								}
							},
							watchList : {
								pinned : false,
								filter : "",
								viewStyle : "float",
								position : {
									left : "center",
									top : "middle"
								},
								size : {
									width : 600,
									height : 400
								}
							},
							ajax : {
								pinned : false,
								viewStyle : "float",
								position : {
									left : "center",
									top : "middle"
								},
								size : {
									width : 600,
									height : 400
								}
							},
							process : {
								extendBy : 500
							}
						}
					},
					ScriptFunctions : []
				};

				$.extend(Tools.Config, cfg);
			}
			function UpdateButton(button, condition, definition, onClick) {
				var btn = tbSect.find('#' + button);
				if (condition) {
					if (!btn.length) {
						btn = $(definition);
						if (lastButton)
							lastButton.after(btn);
						else
							tbSect.append(btn);
						if (onClick)
							btn.bind("click", onClick);
					};
					lastButton = btn;
				} else
					btn.remove();
			}
			function InitToolbar() {
				try {
					if (tbDiv)
						return;
						
					iLog("InitToolbar", "Called");
					
					tbDiv = $('<div id="DevToolBar" class="verticalToolbar aboveSpinner"/>');
					$('#bottom').after(tbDiv);
					tbSect = $('<div class="toolbarSection">');
					tbDiv.append(tbSect);

					tbDiv.draggable({
							cancel: "img",
							start: function( event, ui ) {
								Global.DisableHighlightingInChrome(true);
							},
							stop: function( event, ui ) {
								Global.DisableHighlightingInChrome(false);
								Global.UpdateLastPosition(tbDiv, ui);
							}
						})
						.resizable({
							start: function() {
								Global.DisableHighlightingInChrome(true);
							},
							stop: function( event, ui ) {
								Global.DisableHighlightingInChrome(false);
							}
						})
						.disableSelection();
					
					var cfg = Tools.Config.Editor.toolBars.developer;
					tbDiv.css('left', cfg.position.left + 'px')
						.css('top', cfg.position.top + 'px')
						.data('lastLeft', cfg.position.left)
						.data('lastTop', cfg.position.top);
					if (cfg.width)
						tbDiv.css('width', cfg.width + 'px');

					$(window).bind('scroll.DevToolBar', function () {
						if (tbDiv.is(":visible"))
							tbDiv.css('top', (tbDiv.data('lastTop') + $(document).scrollTop()) + "px");
					});
				} catch (err) {
					iLog("InitToolbar", err, Log.Type.Error);
				}
			}
			function ShowLogging(activate) {
				if (Tools.Config.loggingEnabled)
					Log.Show(activate);
			}
			function ShowReqList(activate) {
				if (Tools.Config.reqlistEnabled)
					ReqList.Show(activate);
			}
			function ShowWatchList(activate) {
				if (Tools.Config.watchlistEnabled)
					WatchList.Show(activate);
			}
			function ShowAjax(activate) {
				if (Tools.Config.ajaxEnabled)
					AjaxTab.Show(activate);
			}
			function TogglePageLayout(value) {
				var div = $('#shell');
				var val = '30px';
				
				if (!value) {
					value = Tools.Config.Editor.html.pageLayout;
					value = value.toLowerCase();
					var arr = ['middle', 'left', 'right'];
					var idx = $.inArray(value, arr);
					if (idx >= 0 && idx <= 1)
						idx++;
					else
						idx = 0;
					value = arr[idx];
				} else
					value = value.toLowerCase();
				Tools.Config.Editor.html.pageLayout = value;
				
				switch (value) {
				case 'left' : 
					div.css('margin-left', val);
					div.css('margin-right', 'auto');
					break;
				case 'right':
					div.css('margin-left', 'auto');
					div.css('margin-right', val);
					break;
				default :
					div.css('margin-left', 'auto');
					div.css('margin-right', 'auto');
					break;
				};
			}
			function ShowTemplates() {
			}
			function SaveConfiguration() {
				var SaveAndSend = function (saveDefault) {
					dlg.dialog("close");
					
					// Update the configuration object
					var c = Tools.Config.Editor;
					var doc = $(document);
					var UpdateDbgWndCfg = function(cfg, div) {
						if (div.data('lastLeft') && div.data('lastTop')) {
							cfg.position.left = div.data('lastLeft');
							cfg.position.top = div.data('lastTop');
							cfg.size.width = Utilities.ToNumber(div.parent().width());
							cfg.size.height = Utilities.ToNumber(div.parent().height());
						};
					};
					
					var d = tbDiv;
					if (d.length) {
						c.toolBars.developer.position.left = d.data('lastLeft');
						c.toolBars.developer.position.top = d.data('lastTop');
						c.toolBars.developer.width = Utilities.ToNumber(d.width());
					}
					d = $('#RuleToolbar');
					if (d.length) {
						c.toolBars.process.position.left = d.data('lastLeft');
						c.toolBars.process.position.top = d.data('lastTop');
						c.toolBars.process.width = Utilities.ToNumber(d.width());
					}
					d = $('#ComponentToolbar');
					if (d.length) {
						c.toolBars.page.position.left = d.data('lastLeft');
						c.toolBars.page.position.top = d.data('lastTop');
						c.toolBars.page.width = Utilities.ToNumber(d.width());
					}
					d = $('#LoggingDiv');
					if (d.length) {
						UpdateDbgWndCfg(c.tabs.logging, d);
					}
					d = $('#ReqListDiv');
					if (d.length) {
						UpdateDbgWndCfg(c.tabs.reqList, d);
					}
					d = $('#WatchListDiv');
					if (d.length) {
						UpdateDbgWndCfg(c.tabs.watchList, d);
					}
					d = $('#AjaxDiv');
					if (d.length) {
						UpdateDbgWndCfg(c.tabs.ajax, d);
					}
					
					// Convert the configuration object to string
					var data = 'Cfg="Editor":';
					if (saveDefault)
						data += '{}';
					else
						data += encodeURIComponent(JSON.stringify(c));
					var url = "admintabs.max?action=SaveConfig";
					
					// Send to the server
					Communication.CustomRequest(url, null, null, data);
				};

				// This dialog is being reused and so should be created only once!
				var dlg = $('#SaveConfigurationDlg');
				if (!dlg.length) {
					dlg = $('<div id="SaveConfigurationDlg"></div>');
					dlg.html('<p>You can either save your current configuration or reset to the default settings.<p/><p>In order to see the default setting you must re-login.</p>');
					
					var btns = {
						'Reset to default' : function () {
							SaveAndSend(true);
						},
						'Save current' : function () {
							SaveAndSend(false);
						}
					};					
					dlg.dialog({
						width : 370,
						height : 180,
						autoOpen : false,
						closeOnEscape : true,
						resizable : false,
						modal : true,
						buttons : btns,
						dialogClass : "clientDialog",
						title : "Save User Preferences",
						open : function() {
							if (!Editor.Enabled)
								Tools.ToolsInForeground(false);
						},
						close : function() {
							if (!Editor.Enabled)
								Tools.ToolsInForeground(true);
						}
					});
				};
				dlg.dialog("open");
			}
			function ShowVersion(msg) {
				msg = (msg) ? msg : "";
				jAlert(msg + MP.StingrayJsVersion);
			}
			
			return {
			
				/* PUBLIC PROPERTIES */
				description: "Debugging tools",
				Initialized : false,
				Enabled : false,
				Config : {},
				
				/* PUBLIC METHODS */
				ConfigUpdate : function (cfgObj) {
					$.extend(this.Config, cfgObj);
					this.ShowToolbar();
				},
				ShowToolbar : function () {
					try {
						var c = this.Config,
							b;
						
						if (!this.Initialized || c.isEditor)
							return;
						
						InitToolbar();
						
						UpdateButton('dtbLog', c.loggingEnabled, '<img id="dtbLog" title="Open a Log Viewer" src="../../images/dev-logging.png" />', function () {
							ShowLogging();
						});
						UpdateButton('dtbRL', c.reqlistEnabled, '<img id="dtbRL" title="Open a ReqList Viewer" src="../../images/dev-reqlist.png" />', function () {
							ShowReqList();
						});
						UpdateButton('dtbWL', c.watchlistEnabled, '<img id="dtbWL" title="Open a WatchList Viewer" src="../../images/dev-watchlist.png" />', function () {
							ShowWatchList();
						});
						UpdateButton('dtbAjax', c.ajaxEnabled, '<img id="dtbAjax" title="Open an Ajax Viewer" src="../../images/dev-ajax.png" />', function () {
							ShowAjax();
						});
						UpdateButton('dtbPos', true, '<img id="dtbPos" title="Toggle Page Layout" src="../../images/dev-layout.png" />', function () {
							TogglePageLayout();
						});
						UpdateButton('dtbEdit', !Editor.Enabled, '<img id="dtbEdit" title="Edit this page" src="../../images/dev-edit.png" />', function () {
							Communication.EditorRequest();
						});
						UpdateButton('dtbNew', !Editor.Enabled, '<img id="dtbNew" title="Add new page" src="../../images/dev-new.png" />', function () {
							Communication.EditorCreateNew();
						});
						/*
						UpdateButton('dtbTemps', Editor.Enabled, '<img id="dtbTemps" title="Add a template" src="../../images/dev-templates.png" />', function () {
							ShowTemplates();
						});
						*/
						UpdateButton('dtbSrch', Editor.Enabled, '<img id="dtbSrch" title="Find on the page" src="../../images/dev-search.png" />', function () {
							Editor.Search();
						});
						UpdateButton('dtbCfg', JSON && JSON.stringify, '<img id="dtbCfg" title="Save current configuration and layout" src="../../images/dev-config.png" />', function () {
							SaveConfiguration();
						});
						b = Editor.Enabled && !Editor.LockedBy;
						UpdateButton('dtbQSave', b, '<img id="dtbQSave" title="Save without leaving the editor (Quick save)" src="../../images/dev-quick.png" />', function () {
							PropertyEd.QuickSave();
						});
						UpdateButton('dtbFSave', b, '<img id="dtbFSave" title="Save and exit (Full save)" src="../../images/dev-save.png" />', function () {
							PropertyEd.Save();
						});
						UpdateButton('dtbExit', Editor.Enabled, '<img id="dtbExit" title="Exit without saving the page (Cancel editing)" src="../../images/dev-exit.png" />', function () {
							PropertyEd.Disable();
						});
						UpdateButton('dtbVer', !Editor.Enabled, '<img id="dtbVer" title="Show version" src="../../images/dev-version.png" />', function () {
							ShowVersion('Client Version: ');
						});
						
						// Lower z-order if we are inside the editor to allow other windows to be shown above
						tbDiv.toggleClass('aboveSpinner', !Editor.Enabled);
					} catch (err) {
						iLog("ShowToolbar", err, Log.Type.Error);
					}
				},
				Initialize : function (cfgObj) {
					try {
						var div = $('#DeveloperTabs');
						if (this.Initialized || !div.length || !div.find('div').is(':visible'))
							return;

						Communication.EnableSessionTimer = false;
						div.tabs();
						CompleteConfig();
						$.extend(true, this.Config, cfgObj);
						var arr = this.Config.ScriptFunctions;
						arr = arr.sort(function(a, b) {
							return a.name > b.name;
						});
						
						Log.Initialize();
						ReqList.Initialize();
						WatchList.Initialize();
						AjaxTab.Initialize();
						ContextMenu.Initialize();
						RulesMaker.Initialize($("#preproc"), $("#postproc"));
						
						TogglePageLayout(this.Config.Editor.html.pageLayout);

						this.Enabled = true;
						this.Initialized = true;

						this.ShowToolbar();
					} catch (err) {
						iLog("Initialize", err, Log.Type.Error);
					}
				},
				AceIsEnabled : function () {
					return !Browser.IsMSIE() && window.ace && this.Config.Editor.ace.enabled;
				},
				ToolsInForeground : function(value) {
					$('#DevToolBar').toggleClass('aboveSpinner', value);
					$('#LoggingDiv').parent().toggleClass('aboveSpinner', value);
					$('#ReqListDiv').parent().toggleClass('aboveSpinner', value);
					$('#WatchListDiv').parent().toggleClass('aboveSpinner', value);
					$('#AjaxDiv').parent().toggleClass('aboveSpinner', value);
				}
			};
		
		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	};
	MP.Tools = Tools;
	
	return MP;
});

// 1. A storage for page variables and functions on page scope. ScriptingContainer adds functions to this and calls reset to remove old functions
CustomScript = new function () {
	
	// clear the previously added functions
	this.Reset = function () {
		jQuery.each(CustomScript, function (field, val) {
			if (field != "Reset") {
				CustomScript[field] = null;
			}
		});
	};
};

// 2. Adds JSON.parse(data) if it is not provided by browser (IE7...)
if (!JSON) {
	var JSON = {
		parse: function(data) {
			var rvalidchars = /^[\],:{}\s]*$/;
			var rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
			var rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
			var rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;
			
			if (typeof data !== "string" || !data)
				return null;
			
			// Make sure leading/trailing whitespace is removed (IE can't handle it)
			data = jQuery.trim(data);
			
			// Make sure the incoming data is actual JSON. Logic borrowed from http://json.org/json2.js
			if (rvalidchars.test(data.replace(rvalidescape, "@").replace(rvalidtokens, "]").replace(rvalidbraces, ""))) {
				return (new Function("return " + data))();
			} else {
				jQuery.error("Invalid JSON: " + data);
			}
		}
	};
};

// 3. Main global logging used across JS core
define('Log', ['jQuery'], function ($) {

	// log entry types, the value is used as a class when displayed
	var LogType = new function () {
		this.Error = "error";
		this.Info = "info";
		this.Warning = "warning";
		this.Debug = "debug";
		this.Search = "search";
	};

	var Log = new function (undefined) {

		/* PRIVATE PROPERTIES */
		var _logDiv = null,
			_logTab,
			_location,
			_wrapper,
			_logTable = null,
			_logID = 0,
			_lastSentErrTime = new Date(),
			_config;

		/* PRIVATE METHODS */

		function FormatEntry(ent) {
			_logID++;
			
			var le = $("<tr/>");
			le.append("<td class='index'>" + _logID + "</td>");
			le.append("<td class='time'>" + ent.Time + "</td>");
			le.append("<td class='source'>" + ent.Source + "</td>");
			
			var td = $("<td class='" + ent.Type + "' />");
			td.append(ent.Message);
			
			le.append(td);
			return le;
		}
		function Entry(Src, Message, Type) {
			this.Source = Src;
			this.Message = Message;
			this.Time = Utilities.GetFormattedTime();
			this.Type = Type;
		}
		function Clear() {
			_logID = 0;
			
			if (_logTable)
				_logTable.empty().remove();
			_logTable = $('<table class="Logging"><tr><th>ID</th><th>Time</th><th>Source</th><th>Message</th></tr></table>');
			_wrapper.append(_logTable);
			$('#dtbLog').removeClass('error warning debug search');
		}
		// Remove the oldest records to preserve system resources
		function EnsureLimit() {
			if (_logID < 3000)
				return;

			if ((_logID % 100) == 0)
				_logTable.find("tr:gt(0):lt(101)").empty().remove();
		}
		function InitConfig() {
			_config = MP.Tools.Config.Editor.tabs.logging;
			if (!_config.size) {
				_config.size = {
					width: 600,
					height: 400
				};
			};
		}
		function UpdateButtons() {
			if (Log.Enabled)
				_logDiv.dialog( "option", "title", "Log viewer");
			else
				_logDiv.dialog( "option", "title", "Log viewer - Disabled");
			
			var bp = $(".ui-dialog-buttonpane", _logDiv.parent());
			var FindBtn = function(caption) {
				return $("button:contains(" + caption + ")", bp);
			};
			
			if (Log.Enabled)
				FindBtn('Enable').html("Disable");
			else
				FindBtn('Disable').html("Enable");
			
			if (_config.pinned)
				FindBtn('Pin').html("Unpin");
			else
				FindBtn('Unpin').html("Pin");
			
			if (_location == _logTab)
				FindBtn('Tab View').html("View Here");
			else
				FindBtn('View Here').html("Tab View");
		}
		
		return {

			/* PUBLIC PROPERTIES */
			Enabled : false,
			Initialized: false,

			/* PUBLIC METHODS */

			// Add an entry to the log [default Type = LogType.Info]
			Add : function (Src, Message, Type, SilentError) {
				Type = Type || LogType.Info;
				SilentError = SilentError || false;

				if (!this.Initialized) {
					// Log error to console if available. LK: neither (console != undefined) nor (!console) work in IE!
					if (Type == LogType.Error && window.console != undefined && window.console.log != undefined)
						console.log(Src, " Error: ", Message);
					return;
				}
					
				// To preserve performance do not do anything if disabled or hidden
				if (this.Enabled && _wrapper.is(':visible') || $.inArray(Type, [LogType.Error, LogType.Warning, LogType.Debug, LogType.Search]) > -1) {
					EnsureLimit();
					
					var msg = "";
					var isObj = Utilities.IsObject(Message);
					if (Type == LogType.Search && isObj) {
						msg = $("<a>Found</a>");
						msg.bind("click", function() {
							var ctrl;
							if (Message.GetControl)
								ctrl = Message.GetControl();
							else {
								ctrl = Message.Icon.GetImage();
								var s = ctrl.parent().attr("ID");
								RulesMaker.ShowProcessTab(s);
							}
							Global.ScrollToElement(ctrl);
						});
						Message.HighlightAsFound(true);
					} else {
						if (isObj) {
							if (Message.message)
								msg += Message.message;
							else
								msg += Message.Message.description;
							msg += " [";
							if (Message.fileName)
								msg += Message.fileName + ", ";
							if (Message.lineNumber)
								msg += Message.lineNumber + ", ";
							if (Message.EntryID)
								msg += Message.EntryID;
							else
								msg += _logID;
							msg += ']';
						} else {
							msg = Message;
						}
					}
					var entry = new Entry(Src, msg, Type);
					_logTable.append(FormatEntry(entry));
					if (entry.Type != LogType.Info) {
						$('#dtbLog').toggleClass(entry.Type, true);
					}
				}
				
				if (Type == LogType.Error) {
					// Send live non communication errors to the server. Limit 1 post per 2 seconds!
					var now = new Date();
					var ms =  new Date(now - _lastSentErrTime);
					if (!this.Initialized && Src.indexOf("Comm.") != 0 && ms > 2000) {
						_lastSentErrTime = now;
						var data = "ReqList=" + ReqList.GetList();
						var vrmName = $("#middle").attr("VRMName");
						var url = "Logging.max?action=log&Source=" + Src + " (" + Global.Version() + ")&Message=" + msg + "&VRMName=" + vrmName;

						Communication.CustomRequest(url, null, null, data);
					};
					
					if (!SilentError)
						throw Message;
				}
			},
			ClearTab : function () {
				if (!this.Initialized)
					return;

				Clear();
				this.Add("Log.ClearTab", "Called");
			},
			Show : function (activate) {
				if (!this.Initialized)
					return;
				
				_logDiv.dialog("open");
				if (activate && !this.Enabled)
					this.Switch();
			},
			Hide : function () {
				if (this.Initialized)
					_logDiv.dialog("close");
			},
			Switch : function () {
				this.Enabled = !this.Enabled;
				
				UpdateButtons();
			},
			Pin : function (value) {
				if (value == undefined)
					_config.pinned = !_config.pinned;
				else
					_config.pinned = value;
				
				UpdateButtons();
				
				if (_config.pinned) {
					$(window).bind('scroll.pinLogDiv', function () {
						var p = _logDiv.parent();
						if (p.is(":visible"))
							p.css('top', (_logDiv.data('lastTop') + $(document).scrollTop()) + "px");
					});
				} else {
					$(window).unbind('scroll.pinLogDiv');
				}
			},
			MoveTo : function (value) {
				if (!value)
					value = (_location == _logDiv) ? 'tab' : 'float';
				else
					value = value.toLowerCase();
				_config.viewStyle = value;
				
				var div = _wrapper.detach();
				var msg = 'This view is inactive. You can either <a class="activateViewLink">activate this view</a> or <a class="goToViewLink">go to the other view</a>.';
				
				if (value == 'tab') {
					_location = _logTab;
					this.Hide();
					_logDiv.html(msg);
					_logDiv.find('.activateViewLink').bind('click', function() {
						Log.MoveTo("float");
					});
					_logDiv.find('.goToViewLink').bind('click', function() {
						Log.Hide();
						Global.ScrollToElement($('#LoggingLink'), 500);
					});
					_logTab.html('');
					div.appendTo(_logTab);
					if (this.Initialized)
						Global.ScrollToElement($('#LoggingLink'), 500);
				} else {
					_location = _logDiv;
					_logTab.html(msg);
					_logTab.find('.activateViewLink').bind('click', function() {
						Log.MoveTo("tab");
					});
					_logTab.find('.goToViewLink').bind('click', function() {
						Log.Show();
						Global.ScrollToElement(_logDiv.parent(), 500);
					});
					_logDiv.html('');
					div.appendTo(_logDiv);
				}
				
				UpdateButtons();
			},
			Initialize : function () {
				try {
					if (!MP.Tools.Config.loggingEnabled || this.Initialized)
						return;					

					InitConfig();
					
					// This dialog is being reused and so should be created only once!
					_logTab = $('#LoggingTab');
					_logDiv = $('#LoggingDiv');
					if (!_logDiv.length)
						_logDiv = $('<div id="LoggingDiv"><div class="toolWrapper"></div></div>');
					
					_wrapper = _logDiv.find(".toolWrapper");
					_location = _logDiv;
					
					var btns = {
						'Clear' : function () {
							Log.ClearTab();
						},
						'Enable' : function () {
							Log.Switch();
						},
						'Pin' : function () {
							Log.Pin();
						},
						'Tab View' : function () {
							Log.MoveTo();
						}
					};
					_logDiv.dialog({
						width : _config.size.width,
						height : _config.size.height,
						position : [_config.position.left, _config.position.top],
						minWidth : 300,
						minHeight : 200,
						autoOpen : false,
						closeOnEscape : false,
						modal : false,
						buttons : btns,
						dialogClass : "aboveSpinner",
						resizeStart: function() {
							Global.DisableHighlightingInChrome(true);
						},
						resizeStop: function() {
							Global.DisableHighlightingInChrome(false);
						},
						dragStart: function(event, ui) {
							Global.DisableHighlightingInChrome(true);
						},
						dragStop: function(event, ui) {
							Global.DisableHighlightingInChrome(false);
							Global.UpdateLastPosition(_logDiv, ui);
						},
						open: function(event) {
							UpdateButtons();
							
							if (_logDiv.data('lastLeft') && _logDiv.data('lastTop')) {
								_logDiv.dialog("option", {
									position: [_logDiv.data('lastLeft'), _logDiv.data('lastTop')]
								});
							} else {
								Global.UpdateLastPosition(_logDiv);
							}
						}
					});
					Clear();
					
					this.MoveTo(_config.viewStyle);
					this.Pin(_config.pinned || false);
					this.Initialized = true;
				} catch (err) {
					this.Add("Initialize", err, LogType.Error);
				}
			}
		};
	};
	Log.Type = LogType;
	
	return Log;
});

TransferListHelper = new function () {
	/* PRIVATE PROPERTIES */
	var logClassName = "TrfListHelper.";
		
	/* PRIVATE METHODS */	
	function iLog(Place, Message, Type, Silent) {
		Log.Add(logClassName + Place, Message, Type, Silent);
	}
	function List(left, right) {
		this.Left = left;
		this.Right = right;
	}
	function GetLists(button) {
		try {
			iLog("GetLists", "Called");
			
			var p = $(button).parents(".StaticContainer");
			var l = $(p).find("select")[0];
			var r = $(p).find("select")[1];
			return new List($(l), $(r));
		} catch (err) {
			iLog("GetLists", err, Log.Type.Error);
		}
	}
	function TransferSelected(from, to, all) {
		try {
			iLog("TransferSelected", "Called");
			
			var toMove = new Array();
			for (var i = 0; i < from[0].options.length; i++) {
				var opt = from[0].options[i];
				if (opt.selected || all)
					toMove.push(opt);
			}
			for (var i = 0; i < toMove.length; i++) {
				var opt = toMove[i];
				$(opt).remove().appendTo(to);
				$(opt).removeAttr("selected");
			}
			Utilities.SortSelect(from);
			Utilities.SortSelect(to);
		} catch (err) {
			iLog("TransferSelected", err, Log.Type.Error);
		}
	}
	
	return {
	
		/* PUBLIC PROPERTIES */
		
		/* PUBLIC METHODS */
		MoveSelectedLeft : function (button) {
			try {
				iLog("MoveSelectedLeft", "Called");
				
				var list = GetLists(button);
				TransferSelected(list.Right, list.Left, false);
			} catch (err) {
				iLog("MoveSelectedLeft", err, Log.Type.Error);
			}
		},
		MoveSelectedRight : function (button) {
			try {
				iLog("MoveSelectedRight", "Called");
				
				var list = GetLists(button);
				TransferSelected(list.Left, list.Right, false);
			} catch (err) {
				iLog("MoveSelectedRight", err, Log.Type.Error);
			}
		},
		MoveAllLeft : function (button) {
			try {
				iLog("MoveAllLeft", "Called");
				
				var list = GetLists(button);
				TransferSelected(list.Right, list.Left, true);
			} catch (err) {
				iLog("MoveAllLeft", err, Log.Type.Error);
			}
		},
		MoveAllRight : function (button) {
			try {
				iLog("MoveAllRight", "Called");
				
				var list = GetLists(button);
				TransferSelected(list.Left, list.Right, true);
			} catch (err) {
				iLog("MoveAllRight", err, Log.Type.Error);
			}
		},
		Serialize : function (HTML) {
			try {
				iLog("Serialize", "Called");
				
				var ret = "";
				$(HTML).find(".component").each(function () { // find all the transfer lists in the HTML
					if ($(this).attr("TransferList") != null) {
						$(this).find("select").each(function () { // find the selects in the transfer lists
							var name = $(this).attr("name");
							ret += "&" + name + "_count=" + $(this)[0].options.length;
							for (var i = 0; i < $(this)[0].options.length; i++) {
								var opt = $(this)[0].options[i];
								ret += "&" + name + "_" + i + "=" + $(opt).attr("value");
							}
						});
					}
				});
				return ret;
			} catch (err) {
				iLog("Serialize", err, Log.Type.Error);
			}
		}
	}; // end return block
};

define('Storage', [], function () {
	function Storage() {
		try {
			/* PRIVATE PROPERTIES */
			var logClassName = "Storage.";
			var self = this;
			var _objects = new Array();

			/* PRIVATE METHODS */
			
			function iLog(Place, Message, Type, Silent) {
				Log.Add(logClassName + Place, Message, Type, Silent);
			}
			function Pair(Component, ID) {
				this.Component = Component;
				this.ID = ID;
				this.Destroy = function () {
					this.Component = null;
					this.ID = null;
				};
			}
			
			/* PUBLIC METHODS */

			this.AddComponent = function (Component, ID) {
				try {
					iLog("AddComponent", "Called");
					
					var p = new Pair(Component, ID);
					_objects[_objects.length] = p;
				} catch (err) {
					iLog("AddComponent", err, Log.Type.Error);
				}
			};
			this.GetComponent = function (ID) {
				try {
					for (var i = 0; i < _objects.length; i++) {
						var p = _objects[i];
						if (p.ID == ID)
							return p.Component;
					}
					return null;
				} catch (err) {
					iLog("GetComponent", err, Log.Type.Error);
				}
			};
			this.GetCount = function () {
				return _objects.length;
			};
			this.GetItemArray = function () {
				try {
					iLog("GetItemArray", "Called");
					
					var _array = new Array();
					for (var i = 0; i < _objects.length; i++) {
						_array[i] = _objects[i].Component;
					}
					return _array;
				} catch (err) {
					iLog("GetItemArray", err, Log.Type.Error);
				}
			};
			this.GetIdArray = function () {
				try {
					iLog("GetIdArray", "Called");
					
					var _array = new Array();
					for (var i = 0; i < _objects.length; i++) {
						_array[i] = _objects[i].ID;
					}
					return _array;
				} catch (err) {
					iLog("GetIdArray", err, Log.Type.Error);
				}
			};
			this.Remove = function (ID) {
				try {
					iLog("Remove", "Called: " + ID);
					
					for (var i = 0; i < _objects.length; i++) {
						var p = _objects[i];
						if (p.ID == ID) {
							p.Destroy();
							_objects.splice(i, 1);
							return;
						}
					}
				} catch (err) {
					iLog("Remove", err, Log.Type.Error);
				}
			};
			this.Reset = function () {
				try {
					iLog("Reset", "Called");
					
					for (var i = 0; i < _objects.length; i++)
						_objects[i].Destroy();
					_objects = null;
					_objects = new Array();
				} catch (err) {
					iLog("Reset", err, Log.Type.Error);
				}
			};
		
		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	}
	
	return Storage;
});

//Public mini version of internal full PageHelper
define('Helper', ['PageHelper'], function (PageHelper) {
	var Helper = new function () {
		this.GetEditorComponent = function (Component) {
			return PageHelper.GetEditorComponent(Component);
		},
		this.RemoveComponentID = function (Component) {
			PageHelper.RemoveComponentID(Component);
		}
	}
	
	return Helper;
});

/*
This script provides standard functions used by Javascript Control Objects found in the controls.js

EXAMPLES

1. Get the Control Object for an existing HTML Component and calls one of its methods
var div = $("component div selector");
var text = PageHelper.GetEditorComponent(div)
text.SetCaption("This is new");

2. Create a new Component
var ctrl = PageHelper.CreateEditorComponent("EditorText");
ctrl.AppendTo( $("#container") );
 */

define('PageHelper', ['Storage', 'ContextMenu', 'ContextMenuItems'], function (Storage, ContextMenu, ContextMenuItems) {
	// Building controlTypes isn't safe, but if we don't do it this way we will encounter circular 
	// dependency issues (because many components depend upon PageHelper).  =\  Oh well
	var controlTypeIncludes = {
		'EditorCheckBox' : 'EditorCheckBox',
		'EditorDropDown' : 'EditorDropDown',
		'EditorLabel' : 'EditorLabel',
		'EditorLink' : 'EditorLink',
		'EditorDiv' : 'EditorDiv',
		'EditorMemo' : 'EditorMemo',
		'EditorRadio' : 'EditorRadio',
		'EditorSubmitButton' : 'EditorSubmitButton',
		'EditorText' : 'EditorText',
		'TransferList' : 'TransferList',
		
		'EditableContent' : 'EditableContent',
		'DynamicContainer' : 'DynamicContainer',
		'StaticContainer' : 'StaticContainer',
		'ScriptingContainer' : 'ScriptingContainer',
		'ValidationContainer' : 'ValidationContainer'
	};
	
	var includes = [];
	var types = [];
	var key;	
	for (key in controlTypeIncludes) {
		if (Object.prototype.hasOwnProperty.call(controlTypeIncludes, key)) {
			includes.push(controlTypeIncludes[key]);
			types.push(key);
		}
	}
	
	var controlTypes = {};
	require(includes, function () {
		for (var i = 0; i < types.length; ++i)
			controlTypes[types[i]] = arguments[i];
	});

	var Editor = {};
	require(['Editor'], function (ed) {
		Editor = ed;
	});
	
	// The main object for HTML Controls
	var PageHelper = new function () {
		try {
			/* PRIVATE PROPERTIES */
			var logClassName = "PgHelper.",
				lastCompID = 0,
				selected = new Array(),
				eStore = new Storage(),
				copiedHTML = "",
				lastQuestionnaire = "";

			/* PRIVATE METHODS */

			function iLog(Place, Message, Type, Silent) {
				Log.Add(logClassName + Place, Message, Type, Silent);
			}
			function CreateComponent(strRef, compName, noNameCheck) {
				try {
					iLog("CreateComponent", "Called");
					
					var name = '';
					var fn = controlTypes[strRef];
					var ctrl = new fn();
					if (ctrl == null)
						throw "A component '" + strRef + "' could not be created!";
						
					if (ctrl.NameRequired) {
						if (strRef == "TransferList") {
							name = compName || Utilities.PromptForName(false);
							if (name == Utilities.ModalResult.Cancel || name == Utilities.ModalResult.Empty)
								return false;
						} else {
							name = strRef.replace('Editor', '');
							if (noNameCheck)
								name = compName || name;
							else
								name = PageHelper.MakeUniquePageID(compName || name);
						}
					}
					ctrl.Create(name);
					ctrl.GetControl()[0][strRef] = ctrl;
					return ctrl;
				} catch (err) {
					iLog("CreateComponent", err, Log.Type.Error);
				}
			}
			function AddEditorToComponent(Component) {
				var ctrl = PageHelper.GetEditorComponent(Component);
				ctrl.EditMode();
				PageHelper.AddStoredComponent(ctrl);
				
				// Show it if it was designed hidden
				var elm = $(Component);
				if (!elm.is(":visible")) {
					iLog("AddEditorToComponent", "Incompatible element! To hide the element use 'Client Condition' property instead setting its visibility in style!\n" + Utilities.IdentifyChildren(elm), Log.Type.Warning);
					elm.attr("isHidden", true);
					elm.show();
				};

				return ctrl;
			}
			// Removes editor stuff and cleans up component prior save
			function RemoveEditorFromComponent(Component) {
				var ctrl = PageHelper.GetEditorComponent(Component);
				if (!ctrl)
					return;
					
				var id = PageHelper.GetComponentID(Component)
				eStore.Remove(id);
				ctrl.HighlightAsSelected(false);
				ctrl.HighlightAsFound(false);
				ctrl.DefaultMode();

				var elm = $(Component);

				// Hide it if it was originaly hidden
				if (elm.attr("isHidden")) {
					elm.removeAttr("isHidden");
					elm.hide();
				};
				
				// Remove all extra class whitespaces
				var s = elm.attr('Class');
				s = Utilities.RemoveWhiteSpaces(s);
				s = Utilities.Trim(s);
				elm.attr("Class", s);
				
				// Remove extra attributes
				elm.removeAttr("origL");
				elm.removeAttr("origT");
				elm.removeAttr("unselectable");
				elm.removeAttr("aria-disabled");
				if (elm.attr("condition") == "")
					elm.removeAttr("condition");

				elm.removeClass("ui-resizable-autohide");
				elm.removeClass("ui-state-disabled");
				
				elm.find('.ui-selectee').removeClass("ui-selectee");
			}
			function SetComponentID(Component) {
				try {
					lastCompID += 1;
					iLog("SetComponentID", "ID=" + lastCompID);
					
					$(Component).attr("EditorID", lastCompID);
				} catch (err) {
					iLog("SetComponentID", err, Log.Type.Error);
				}
			}
			function EnsureSelection() {
				try {
					if (!selected.length) {
						var ec = ContextMenu.EventComponent;
						var id = PageHelper.GetComponentID(ec);
						if (!id)
							id = PageHelper.GetParentID(ec);
						PageHelper.AddSelected(id);
					};
				} catch (err) {
					iLog("EnsureSelection", err, Log.Type.Error);
				}
			}
			function MakePastedComponentEditable(element) {
				var s;
				var ctrl = AddEditorToComponent(element);
				if (ctrl.GetID) {
					s = ctrl.GetID();
					s = PageHelper.MakeUniquePageID(s);
					ctrl.SetID(s);
				}
				if (ctrl.GetName) {
					s = ctrl.GetName();
					s = PageHelper.MakeUniquePageID(s);
					ctrl.SetName(s);
				}
				PageHelper.AddSelected(ctrl);

				return ctrl;
			}
			function AddHelpLinkIcon(el, url) {
				var d = $('<div class="mp-help"/>');
				d.appendTo(el);
				d.bind('click', function() {
					var wnd = window.open(url, "helplink", "width=500,height=500,scrollbars=1,resizable=1,toolbar=0,location=0,menubar=0,status=0");
					wnd.focus();
				});
				var ref = el.attr("ref");
				if ($.inArray(ref, ['EditorText','EditorMemo','EditorDropDown','EditorSubmitButton']) > -1) {
					var rightGap = (ref == 'EditorSubmitButton') ? 8 : 2;
					var inp = el.find(':input');
					d.css({
						top: inp.position().top + inp.outerHeight() / 2 - d.outerHeight() / 2 + 1,
						left: inp.position().left + inp.outerWidth() + rightGap
					});
				};
				return d;
			}
			
			
			return {
				/* PUBLIC METHODS */
				
				Search : function (str, caseSensitive) {
					try {
						var arr = eStore.GetItemArray();
						if (str == "")
							iLog("Search", "Clearing", Log.Type.Info);
						else
							iLog("Search", "Searching " + arr.length + " HTML elements for '" + str + "'", Log.Type.Debug);
						
						$.each(arr, function () {
							if (this.Search)
								this.Search(str, caseSensitive);
						});
					} catch (err) {
						iLog("Search", err, Log.Type.Error);
					}
				},
				
				ClearStoredComponents : function () {
					try {
						iLog("ClearStoredComponents", "Called");
						
						eStore.Reset();
						lastCompID = 0;
					} catch (err) {
						iLog("ClearStoredComponents", err, Log.Type.Error);
					}
				},
				AddStoredComponent : function (Component) {
					try {
						if (Component) {
							iLog("AddStoredComponent", "Called");
							
							SetComponentID(Component.GetControl());
							eStore.AddComponent(Component, lastCompID);
						}
					} catch (err) {
						iLog("AddStoredComponent", err, Log.Type.Error);
					}
				},
				GetStoredComponent : function (id) {
					try {
						return eStore.GetComponent(id);
					} catch (err) {
						iLog("GetStoredComponent", err, Log.Type.Error);
					}
				},

				CreateEditorComponent : function (strRef, compName, noNameCheck) {
					try {
						if (!strRef)
							throw "No reference!";
						iLog("CreateEditorComponent", "Called");
						
						var ctrl = CreateComponent(strRef, compName, noNameCheck);
						PageHelper.AddStoredComponent(ctrl);
						
						return ctrl;
					} catch (err) {
						iLog("CreateEditorComponent", err, Log.Type.Error);
					}
				},
				// Deletes an element from the screen and removes it from storage
				DeleteEditorComponent : function (Component) {
					try {
						var id = PageHelper.GetComponentID(Component);
						if (id) {
							iLog("DeleteEditorComponent", "Called");
							
							eStore.Remove(id);
							$(Component).remove();
						}
					} catch (err) {
						iLog("DeleteEditorComponent", err, Log.Type.Error);
					}
				},
				// returns object for the control
				GetEditorComponent : function (Component) {
					try {
						var ref = PageHelper.GetComponentRef(Component);
						if (!ref)
							throw 'Missing ref attribute!';
						var ctrl = null;
						var temp = $(Component)[0];
						try {
							ctrl = temp[ref];
							if (!ctrl)
								throw 'Error!';
							return ctrl;
						} catch (err) {
							var fn = controlTypes[ref];
							if (!fn)
								throw 'The control of type "' + ref + '" not initialized!';
							ctrl = new fn();
							ctrl.Load(Component);
							temp[ref] = ctrl;
							return ctrl;
						}
					} catch (err) {
						iLog("GetEditorComponent", err.message || err + " " + Utilities.IdentifyChildren(Component), Log.Type.Error);
					}
				},
				MakeUniquePageID : function (Name, MaxOcurrences) {
					if (!Name)
						return '';
						
					var pref = Name.replace(/\d+$/, '');
					var s = pref;
					var max = MaxOcurrences || 0;
					var cnt, i = 0;
					
					while (true) {
						cnt = $('#' + s, '#rightColumn').length;
						if (cnt <= max)
							break;
						i++;
						s = pref + i.toString();
					}
					return s;
				},
				GetParentRef : function (Component) {
					try {
						var p = $(Component)[0].parentNode;
						var ref = PageHelper.GetComponentRef(p);
						return ref;
					} catch (err) {
						iLog("GetParentRef", err, Log.Type.Error);
					}
				},
				GetParentID : function (Component) {
					try {
						var p = $(Component)[0].parentNode;
						var id = PageHelper.GetComponentID(p);
						return id;
					} catch (err) {
						iLog("GetParentID", err, Log.Type.Error);
					}
				},
				GetParentCtrl : function (Component) {
					try {
						var p = $(Component)[0].parentNode;
						var ctrl = PageHelper.GetComponentCtrl(p);
						return ctrl;
					} catch (err) {
						iLog("GetParentCtrl", err, Log.Type.Error);
					}
				},
				GetComponentRef : function (Component) {
					try {
						return $(Component).attr("ref");
					} catch (err) {
						iLog("GetComponentRef", err, Log.Type.Error);
					}
				},
				GetComponentID : function (Component) {
					try {
						return $(Component).attr("EditorID");
					} catch (err) {
						iLog("GetComponentID", err, Log.Type.Error);
					}
				},
				GetComponentCtrl : function (Component) {
					try {
						return PageHelper.GetEditorComponent(Component);
					} catch (err) {
						iLog("GetComponentCtrl", err, Log.Type.Error);
					}
				},
				RemoveComponentID : function (Component) {
					try {
						var id = PageHelper.GetComponentID(Component);
						if (id) {
							iLog("RemoveComponentID", "ID=" + id);
						
							$(Component).removeAttr("EditorID");
						}
					} catch (err) {
						iLog("RemoveComponentID", err, Log.Type.Error);
					}
				},
				
				IsSelected : function (id) {
					return (id && $.inArray(id, selected) > -1);
				},
				GetSelected : function () {
					return selected;
				},
				AddSelected : function (id) {
					if (!id)
						return;
					if (Utilities.IsObject(id)) {
						var ctrl = id;
						id = PageHelper.GetComponentID(ctrl.GetControl());
					} else {
						var ctrl = PageHelper.GetStoredComponent(id);
					}
					if (PageHelper.IsSelected(id))
						return;
					
					if (ctrl && ctrl.HighlightAsSelected) {
						ctrl.HighlightAsSelected(true);
						selected.push(id);
					}
				},
				SelectAll : function () {
					try {
						iLog("SelectAll", "Called");
						
						PageHelper.ClearSelected();
						var ec = ContextMenu.EventComponent;
						var pRef = PageHelper.GetComponentRef(ec);
						if ($.inArray(pRef, ['StaticContainer']) == -1)
							return;
						var pID = PageHelper.GetComponentID(ec);
						if (!pID)
							return;
						
						var arr = eStore.GetItemArray();
						for (var i = 0; i < arr.length; i++) {
							var obj = arr[i];
							var ctrl = obj.GetControl();
							var cID = PageHelper.GetParentID(ctrl);
							var cRef = PageHelper.GetComponentRef(ctrl);
							if (cID == pID && !cRef.match(/Container/))
								PageHelper.AddSelected(obj);
						};
					} catch (err) {
						iLog("SelectAll", err, Log.Type.Error);
					}
				},
				SelectBelow : function () {
					try {
						iLog("SelectBelow", "Called");
						
						PageHelper.ClearSelected();
						var y = ContextMenu.OffsetY - 30;
						var ec = ContextMenu.EventComponent;
						var pRef = PageHelper.GetComponentRef(ec);
						if ($.inArray(pRef, ['StaticContainer']) == -1)
							return;
						var pID = PageHelper.GetComponentID(ec);
						if (!pID)
							return;
						
						var arr = eStore.GetItemArray();
						for (var i = 0; i < arr.length; i++) {
							var obj = arr[i];
							var ctrl = obj.GetControl();
							var cID = PageHelper.GetParentID(ctrl);
							var cRef = PageHelper.GetComponentRef(ctrl);
							if (cID == pID && !cRef.match(/Container/) && obj.GetTop && obj.GetTop() > y)
								PageHelper.AddSelected(obj);
						};
					} catch (err) {
						iLog("SelectBelow", err, Log.Type.Error);
					}
				},
				ClearSelected : function () {
					try {
						iLog("ClearSelected", "Called");
						
						for (var i = 0; i < selected.length; i++) {
							var ctrl = PageHelper.GetStoredComponent(selected[i]);
							if (ctrl && ctrl.HighlightAsSelected)
								ctrl.HighlightAsSelected(false);
						};
						selected = null;
						selected = [];
					} catch (err) {
						iLog("ClearSelected", err, Log.Type.Error);
					}
				},
				
				SnapToGrid : function () {
					try {
						iLog("SnapToGrid", "Called");
						
						EnsureSelection();
						var snap = MP.Tools.Config.Editor.html.snap;
						for (var i = 0; i < selected.length; i++) {
							var ctrl = PageHelper.GetStoredComponent(selected[i]);
							if (!ctrl)
								continue;

							var x = ctrl.GetLeft();
							x = Utilities.SnapTo(x, snap[0]);
							ctrl.SetLeft(x);

							var y = ctrl.GetTop();
							y = Utilities.SnapTo(y, snap[1]);
							ctrl.SetTop(y);
						}
					} catch (err) {
						iLog("SnapToGrid", err, Log.Type.Error);
					}
				},
				AlignLeft : function () {
					try {
						iLog("AlignLeft", "Called");
						
						EnsureSelection();
						var i, ctrl, x, minX = 9999999;
						for (i = 0; i < selected.length; i++) {
							ctrl = PageHelper.GetStoredComponent(selected[i]);
							if (ctrl) {
								x = ctrl.GetLeft();
								minX = x < minX ? x : minX;
							};
						};

						var snap = MP.Tools.Config.Editor.html.snap;
						minX = Utilities.SnapTo(minX, snap[0]);
						for (i = 0; i < selected.length; i++) {
							ctrl = PageHelper.GetStoredComponent(selected[i]);
							if (ctrl)
								ctrl.SetLeft(minX);
						}
					} catch (err) {
						iLog("AlignLeft", err, Log.Type.Error);
					}
				},
				AlignRight : function () {
					try {
						iLog("AlignRight", "Called");
						
						EnsureSelection();
						var i, ctrl, div, w, x, maxX = 0;
						for (i = 0; i < selected.length; i++) {
							ctrl = PageHelper.GetStoredComponent(selected[i]);
							if (ctrl) {
								div = ctrl.GetControl();
								w = div.width();
								x = ctrl.GetLeft() + w;
								maxX = x > maxX ? x : maxX;
							};
						};

						var snap = MP.Tools.Config.Editor.html.snap;
						maxX = Utilities.SnapTo(maxX, snap[0]);
						for (i = 0; i < selected.length; i++) {
							ctrl = PageHelper.GetStoredComponent(selected[i]);
							if (ctrl) {
								div = ctrl.GetControl();
								w = div.width();
								ctrl.SetLeft(maxX - w);
							}
						}
					} catch (err) {
						iLog("AlignRight", err, Log.Type.Error);
					}
				},
				AlignTop : function () {
					try {
						iLog("AlignTop", "Called");
						
						EnsureSelection();
						var i, ctrl, y, minY = 9999999;
						for (i = 0; i < selected.length; i++) {
							ctrl = PageHelper.GetStoredComponent(selected[i]);
							if (ctrl) {
								y = ctrl.GetTop();
								minY = y < minY ? y : minY;
							};
						};

						var snap = MP.Tools.Config.Editor.html.snap;
						minY = Utilities.SnapTo(minY, snap[1]);
						for (i = 0; i < selected.length; i++) {
							ctrl = PageHelper.GetStoredComponent(selected[i]);
							if (ctrl)
								ctrl.SetTop(minY);
						}
					} catch (err) {
						iLog("AlignTop", err, Log.Type.Error);
					}
				},
				SpaceVertically : function () {
					try {
						iLog("SpaceVertically", "Called");
						
						EnsureSelection();
						jPrompt('Please enter a vertical spacing between tops of the selected components', 40, 'Space Vertically', function (v) {
							if (v == null)
								return;

							var i, ctrl, arr = [];
							for (i = 0; i < selected.length; i++) {
								ctrl = PageHelper.GetStoredComponent(selected[i]);
								if (ctrl)
									arr.push(ctrl);
							}
							
							arr.sort(function(a, b) {
								return (b.GetTop() < a.GetTop());
							});
							
							var px = Utilities.ToNumber(v);
							var newTop, lastTop, currTop;
							for (i = 0; i < arr.length; i++) {
								ctrl = arr[i];
								
								currTop = ctrl.GetTop();
								if (i == 0) {
									newTop = currTop;
									lastTop = currTop;
								} else {
									if (lastTop != currTop) {
										newTop = newTop + px;
										lastTop = currTop;
									}
								}
								ctrl.SetTop(newTop);
							};
						});
					} catch (err) {
						iLog("SpaceVertically", err, Log.Type.Error);
					}
				},
				SpaceHorizontally : function () {
					try {
						iLog("SpaceHorizontally", "Called");
						
						EnsureSelection();
						jPrompt('Please enter a horizontal spacing between left sides of the selected components', 100, 'Space Horizontally', function (v) {
							if (v == null)
								return;

							var i, ctrl, arr = [];
							for (i = 0; i < selected.length; i++) {
								ctrl = PageHelper.GetStoredComponent(selected[i]);
								if (ctrl)
									arr.push(ctrl);
							}
							
							arr.sort(function(a, b) {
								return (b.GetLeft() < a.GetLeft());
							});
							
							var px = Utilities.ToNumber(v);
							var newLeft, lastLeft, currLeft;
							for (i = 0; i < arr.length; i++) {
								ctrl = arr[i];
								
								currLeft = ctrl.GetLeft();
								if (i == 0) {
									newLeft = currLeft;
									lastLeft = currLeft;
								} else {
									if (lastLeft != currLeft) {
										newLeft = newLeft + px;
										lastLeft = currLeft;
									}
								}
								ctrl.SetLeft(newLeft);
							};
						});
					} catch (err) {
						iLog("SpaceHorizontally", err, Log.Type.Error);
					}
				},
				Duplicate : function () {
					try {
						iLog("Duplicate", "Called");
						
						PageHelper.ClearSelected();
						EnsureSelection();
						
						jPrompt('Please enter how many copies and their vertical spacing', '5, 20', 'Duplicate Component', function (v) {
							if (v == null)
								return;

							var arr = v.split(','),
								count = (arr.length > 0) ? parseInt(arr[0]) : 0,
								space = (arr.length > 1) ? parseInt(arr[1]) : 0;
							
							if (!count)
								return;
								
							space = space || 20;
							var ctrl = PageHelper.GetStoredComponent(selected[0]),
								y = ctrl.GetTop(),
								html = PageHelper.GetHtmlOfSelectedComponents(false),
								div = ctrl.GetControl(),
								cont = PageHelper.GetParentCtrl(div),
								ref = PageHelper.GetParentRef(div);
							
							for (var i = 0; i < count; i++) {
								var c = PageHelper.AddComponentFromHtmlString(html, cont);
								
								// Set position of all static container's direct children
								if (ref == "StaticContainer") {
									y += space;
									c.SetTop(y);
								} else {
									var d = c.GetControl();
									d.css('position', 'relative')
									   .css('left', '')
									   .css('top', '')
									   .css('width', '');
									ctrl.Refresh();
								};
							}
						});
					} catch (err) {
						iLog("Duplicate", err, Log.Type.Error);
					}
				},
				Questionnaire : function () {
					try {
						iLog("Questionnaire", "Called");
						
						var container = ContextMenu.EventComponent,
							ref = PageHelper.GetComponentRef(container);
						if (ref != "StaticContainer") {
							jAlert("Questionnaires may be built only in body of static containers!");
							return;
						};
						
						// This dialog removes itself from DOM after close!
						var dlg = $('<div id="QuestionnaireDlg"><label>Question = Name:</label><br><textarea id="data"/><p></p></div>');
						var p = $('p', dlg)
						p.append('Width <input id="width" value="500" style="width: 50px"/> ');
						p.append('Spacing <input id="spacing" value="25" style="width: 50px"/> ');
						p.append('Fill <input id="fill" value=" ." style="width: 50px"/> ');
						var taData = $('#data', dlg);
						var btns = {
							'Build' : function (e) {
								lastQuestionnaire = taData.val();
								var lines = lastQuestionnaire.split('\n'),
									width = Utilities.ToNumber($('#width', dlg).val()) || 500,
									spacing = Utilities.ToNumber($('#spacing', dlg).val()) || 25,
									fill = $('#fill', dlg).val(),
									snap = MP.Tools.Config.Editor.html.snap,
									x = Utilities.SnapTo(ContextMenu.OffsetX, snap[0]),
									y = Utilities.SnapTo(ContextMenu.OffsetY, snap[1]);
								
								$.each(lines, function (i, line) {
									var i = line.search(/=[^=]*$/);
									if (i < 0)
										return;
									var question = line.substring(0, i).trim(),
										name = line.substring(i + 1).trim(),
										elm;
									
									elm = PageHelper.CreateEditorComponent("EditorLabel", "");
									elm.AppendTo(container);
									elm.SetLeft(x);
									elm.SetTop(y);
									elm.SetCaption(question);
									
									if (fill) {
										var ctrl = elm.GetControl();
										while (ctrl.width() < width) {
											question = question + fill;
											elm.SetCaption(question);
										};
									};
									
									elm = PageHelper.CreateEditorComponent("EditorRadio", name, true);
									elm.AppendTo(container);
									elm.SetLeft(x + width + 20);
									elm.SetTop(y);
									elm.SetCaption('Yes');
									
									elm = PageHelper.CreateEditorComponent("EditorRadio", name, true);
									elm.AppendTo(container);
									elm.SetLeft(x + width + 70);
									elm.SetTop(y);
									elm.SetCaption('No');
									elm.SetValue('0');
									
									y += spacing;
								});
								
								dlg.dialog("close");
							},
							'Load Last' : function (e) {
								taData.val(lastQuestionnaire);
								taData.focus();
							}
						};
						var ResizeMemo = function() {
							var h = dlg.height();
							taData.height(h - 60);
						};
						
						dlg.dialog({
							width : 500,
							height : 400,
							autoOpen : false,
							closeOnEscape : true,
							modal : true,
							buttons : btns,
							title : "Build Questionnaire",
							resizeStart: function() {
								Global.DisableHighlightingInChrome(true);
							},
							resizeStop: function() {
								Global.DisableHighlightingInChrome(false);
								ResizeMemo();
							},
							dragStart: function() {
								Global.DisableHighlightingInChrome(true);
							},
							dragStop: function() {
								Global.DisableHighlightingInChrome(false);
							},
							close : function () {
								dlg.remove();
							},
							open : function () {
								taData.focus();
								ResizeMemo();
							}
						});
						dlg.dialog("open");
					} catch (err) {
						iLog("Questionnaire", err, Log.Type.Error);
					}
				},
				SortTabIndex : function () {
					try {
						iLog("SortTabIndex", "Called");
						
						EnsureSelection();
						jPrompt('Please enter an initial Tab Index value', 1, 'SortTabIndex', function (v) {
							if (v == null)
								return;

							var i, ctrl, arr = [];
							for (i = 0; i < selected.length; i++) {
								ctrl = PageHelper.GetStoredComponent(selected[i]);
								if (ctrl)
									arr.push(ctrl);
							}
							arr.sort(function(a, b) {
								var a = a.GetTop() + '.' + a.GetLeft();
								var b = b.GetTop() + '.' + b.GetLeft();
								a = parseFloat(a);
								b = parseFloat(b);
								return (b < a);
							});
							
							var idx = Utilities.ToNumber(v);
							for (i = 0; i < arr.length; i++) {
								ctrl = arr[i];
								ctrl.SetTabIndex(idx);
								idx++;
							};
						});
					} catch (err) {
						iLog("SortTabIndex", err, Log.Type.Error);
					}
				},
				SetProperty : function (methodName, displayValue, description) {
					try {
						iLog("SetProperty", methodName);
						
						EnsureSelection();
						jPrompt('Please enter a value for ' + description, displayValue, methodName, function (v) {
							if (v == null)
								return;
							if (Utilities.IsNumber(displayValue))
								v = Utilities.ToNumber(v);
							
							for (var i = 0; i < selected.length; i++) {
								var ctrl = PageHelper.GetStoredComponent(selected[i]);
								if (ctrl && ctrl[methodName]) {
									if ($.inArray(methodName, ['SetID', 'SetName']) > -1)
										v = PageHelper.MakeUniquePageID(v);
									
									ctrl[methodName](v);
								}
							}
						});
					} catch (err) {
						iLog("SetProperty", err, Log.Type.Error);
					}
				},
				MakeContextMenu : function () {
					try {
						var m = new ContextMenuItems();
						var i;
						
						i = m.Add("Copy >");
							m.Add("To Browser", function () { PageHelper.CopyToBrowser(false); }, i);
						if (Browser.IsMSIE())
							m.Add("To Clipboard", function () { PageHelper.CopyToClipboard(false); }, i);
							m.Add("To Text Area", function () { PageHelper.CopyToTextarea(false); }, i);

						i = m.Add("Cut >");
							m.Add("To Browser", function () { PageHelper.CopyToBrowser(true); }, i);
						if (Browser.IsMSIE())
							m.Add("To Clipboard", function () { PageHelper.CopyToClipboard(true); }, i);
							m.Add("To Text Area", function () { PageHelper.CopyToTextarea(true); }, i);

						i = m.Add("Paste >");
							m.Add("From Browser", function () { PageHelper.PasteFromBrowser(); }, i);
						if (Browser.IsMSIE())
							m.Add("From Clipboard", function () { PageHelper.PasteFromClipboard(); }, i);
							m.Add("From Text Area", function () { PageHelper.PasteFromTextarea(); }, i);
						
						i = m.Add("Select >");
							m.Add("All", function () { PageHelper.SelectAll(); }, i);
							m.Add("Below", function () { PageHelper.SelectBelow(); }, i);

						i = m.Add("Component >");
							m.Add("Delete", function () { PageHelper.DeleteSelection(); }, i);
							m.Add("HTML", function () { PageHelper.EditHTML(); }, i);
							m.Add("Duplicate", function () { PageHelper.Duplicate(); }, i);
							m.Add("Questionnaire", function () { PageHelper.Questionnaire(); }, i);
						
						i = m.Add("Position >");
							m.Add("Snap to Grid", function () { PageHelper.SnapToGrid(); }, i);
							m.Add("Align Left", function () { PageHelper.AlignLeft(); }, i);
							m.Add("Align Top", function () { PageHelper.AlignTop(); }, i);
							m.Add("Align Right", function () { PageHelper.AlignRight(); }, i);
							m.Add("Set Left", function () { PageHelper.SetProperty("SetLeft", 10, "Left"); }, i);
							m.Add("Set Top", function () { PageHelper.SetProperty("SetTop", 10, "Top"); }, i);
							m.Add("Space Vertically", function () { PageHelper.SpaceVertically(); }, i);
							m.Add("Space Horizontally", function () { PageHelper.SpaceHorizontally(); }, i);
							m.Add("Sort Tab Index", function () { PageHelper.SortTabIndex(); }, i);

						i = m.Add("Property >");
							m.Add("Required", function () { PageHelper.SetProperty("SetRequired", true, "Required"); }, i);
							m.Add("Width", function () { PageHelper.SetProperty("SetWidth", 100, "Width"); }, i);
							m.Add("Height", function () { PageHelper.SetProperty("SetHeight", 50, "Height"); }, i);
							m.Add("Caption", function () { PageHelper.SetProperty("SetCaption", "", "Caption"); }, i);
							m.Add("Tooltip", function () { PageHelper.SetProperty("SetTooltip", "Please enter a...", "Tooltip"); }, i);
							m.Add("Server Cond.", function () { PageHelper.SetProperty("SetSvrCondition", "", "Server Condition"); }, i);
							m.Add("Client Cond.", function () { PageHelper.SetProperty("SetCliCondition", "", "Client Condition"); }, i);
							m.Add("Tab Index", function () { PageHelper.SetProperty("SetTabIndex", 1, "Tab Index"); }, i);
							m.Add("Name", function () { PageHelper.SetProperty("SetName", "Component1", "Name"); }, i);
							m.Add("ID", function () { PageHelper.SetProperty("SetID", "Component1", "ID"); }, i);
							m.Add("Valueless Attr.", function () { PageHelper.SetProperty("SetValueLessAttrs", "", "Valueless Attributes"); }, i);
							m.Add("Style", function () { PageHelper.SetProperty("SetStyle", "", "Style"); }, i);
							m.Add("Class", function () { PageHelper.SetProperty("SetClass", "Default", "Class"); }, i);
							m.Add("Value", function () { PageHelper.SetProperty("SetValue", "1", "Value"); }, i);
							m.Add("Size", function () { PageHelper.SetProperty("SetSize", "", "Size"); }, i);
							m.Add("Help Link", function () { PageHelper.SetProperty("SetHelpLink", "../../help.html", "Size"); }, i);
							m.Add("Options", function () { PageHelper.SetProperty("SetOptions", "<option value='1'>Text</option>", "Options"); }, i);
							m.Add("Multi Select", function () { PageHelper.SetProperty("SetMultiSelect", true, "Multi Select"); }, i);
							m.Add("Target", function () { PageHelper.SetProperty("SetTarget", "Communication.LinkRequest();", "Target"); }, i);
							m.Add("Flipped", function () { PageHelper.SetProperty("SetFlipped", true, "Flipped"); }, i);

						i = m.Add("Search >");
							m.Add("Search...", function () { Editor.Search(); }, i);
							m.Add("Clear", function () { Editor.ClearSearch(); }, i);

						i = m.Add("File >");
						if (Editor.Enabled && !Editor.LockedBy) {
							m.Add("Quick Save", function () { PropertyEd.QuickSave(); }, i);
							m.Add("Save & Exit", function () { PropertyEd.Save(); }, i);
						};
							m.Add("Exit...", function () { PropertyEd.Disable(); }, i);
						
						return m.GetHTML();
					} catch (err) {
						iLog("MakeContextMenu", err, Log.Type.Error);
					}
				},
				CopyToBrowser : function (doCut) {
					try {
						iLog("CopyToBrowser", "Called");
						
						copiedHTML = PageHelper.GetHtmlOfSelectedComponents(doCut);
					} catch (err) {
						iLog("CopyToBrowser", err, Log.Type.Error);
					}
				},
				PasteFromBrowser : function () {
					try {
						iLog("PasteFromBrowser", "Called");
						
						PageHelper.AddComponentsFromHtmlString(copiedHTML);
					} catch (err) {
						iLog("PasteFromBrowser", err, Log.Type.Error);
					}
				},
				CopyToClipboard : function (doCut) {
					try {
						iLog("CopyToClipboard", "Called");
						
						copiedHTML = PageHelper.GetHtmlOfSelectedComponents(doCut);
						Global.SetClipboard(copiedHTML);
					} catch (err) {
						iLog("CopyToClipboard", err, Log.Type.Error);
					}
				},
				PasteFromClipboard : function () {
					try {
						iLog("PasteFromClipboard", "Called");
						
						var s = Global.GetClipboard();
						PageHelper.AddComponentsFromHtmlString(s);
					} catch (err) {
						iLog("PasteFromClipboard", err, Log.Type.Error);
					}
				},
				CopyToTextarea : function (doCut) {
					try {
						iLog("CopyToTextarea", "Called");
						
						copiedHTML = PageHelper.GetHtmlOfSelectedComponents(doCut);
						Editor.ShowTextareaForm(copiedHTML);
					} catch (err) {
						iLog("CopyToTextarea", err, Log.Type.Error);
					}
				},
				PasteFromTextarea : function () {
					try {
						iLog("PasteFromTextarea", "Called");
						
						Editor.ShowTextareaForm('', function (s) {
							PageHelper.AddComponentsFromHtmlString(s);
						});
					} catch (err) {
						iLog("PasteFromTextarea", err, Log.Type.Error);
					}
				},
				DeleteSelection : function () {
					try {
						iLog("DeleteSelection", "Called");
						
						EnsureSelection();
						Editor.HideProperties();
						for (var i = 0; i < selected.length; i++) {
							var ctrl = PageHelper.GetStoredComponent(selected[i]);
							if (ctrl) {
								var div = ctrl.GetControl();
								var ref = PageHelper.GetComponentRef(div);
								
								// Do not allow delete the main container!
								if ($.inArray(ref, ['EditableContent']) > -1)
									continue;
								
								if ($.inArray(ref, ["ScriptingContainer", "StaticContainer", "DynamicContainer"]) == -1) {
									PageHelper.DeleteEditorComponent(div);
									continue;
								};

								// Warn prior deleting a container
								jConfirm('You are about to delete an entire container!\nAre you sure?', 'Confirm Delete', function(answer) {
									if (answer) {
										PageHelper.DeleteEditorComponent(div);
									};
								});
							};
						};
						PageHelper.ClearSelected();
					} catch (err) {
						iLog("DeleteSelection", err, Log.Type.Error);
					}
				},
				EditHTML : function () {
					try {
						iLog("EditHTML", "Called");
						
						this.ClearSelected();
						
						var h1 = PageHelper.GetHtmlOfSelectedComponents(false);
						if (!h1)
							return;
							
						EnsureSelection();
						Editor.ShowAceEditorForm(h1, "HTML Editor", "WARNING: Not following editor API may corrupt the page or the editor!", function (h2) {
							var id = PageHelper.GetSelected()[0];
							var ctrl = PageHelper.GetStoredComponent(id);
							var elm = ctrl.GetControl();
							var par = PageHelper.GetParentRef(elm);
							if ($.inArray(par, ['EditableContent', "DynamicContainer"]) > -1) {
								elm.after(h2);
							} else {
								par = PageHelper.GetParentCtrl(elm);
								par = par.GetControl();
								par.append(h2);
							}
							PageHelper.ClearSelected();
							PageHelper.DeleteEditorComponent(elm);
							PageHelper.ConvertDefaultToEditorComponents();
						});
					} catch (err) {
						iLog("EditHTML", err, Log.Type.Error);
					}
				},
				ConvertDefaultToEditorComponents : function (includeSelf, div) {
					div = div || $("#rightColumn");
					
					$(".component", div).each(function () {
						try {
							var id = PageHelper.GetComponentID(this);
							if (!id)
								AddEditorToComponent(this);
						} catch (err) {
							iLog("ConvertDefaultToEditorComponents", err, Log.Type.Error, true);
						}
					});
					if (includeSelf)
						AddEditorToComponent(div);
				},
				ConvertEditorToDefaultComponents : function (includeSelf, div) {
					div = div || $("#rightColumn");
					
					$(".component", div).each(function () {
						try {
							RemoveEditorFromComponent(this);
						} catch (err) {
							iLog("ConvertEditorToDefaultComponents", err, Log.Type.Error, true);
						}
					});
					if (includeSelf)
						RemoveEditorFromComponent(div);
				},
				AddComponentFromHtmlString : function (htmlStr, parentCont) {
					try {
						if (!htmlStr)
							return;
						
						var div = (parentCont.GetControl) ? parentCont.GetControl() : parentCont;
						PageHelper.ClearSelected();
						var elm = $(htmlStr);
						elm.appendTo(div);
						var ctrl = MakePastedComponentEditable(elm);
						elm.find('.component').each(function () {
							MakePastedComponentEditable(this);
						});
						
						return ctrl;
					} catch (err) {
						iLog("AddComponentsFromHtmlString", err, Log.Type.Error);
					}
				},
				AddComponentsFromHtmlString : function (htmlStr) {
					try {
						if (!htmlStr)
							return;
						var ec = ContextMenu.EventComponent;
						var ref = PageHelper.GetComponentRef(ec);
						if ($.inArray(ref, ["EditableContent", "StaticContainer", "DynamicContainer"]) == -1)
							return;
						
						PageHelper.ClearSelected();
						copiedHTML = htmlStr;
						var items = $(htmlStr);
						var minX = 9999999, minY = 9999999;
						var arr = [];
						items.each(function (i, item) {
							var elm = $(items[i]);
							var s = elm.html();
							if (!s)
								return;
								
							elm.appendTo(ec);
							var ctrl = MakePastedComponentEditable(elm);
							elm.find('.component').each(function () {
								MakePastedComponentEditable(this);
							});
							
							// Find the left/top most position
							var x = ctrl.GetLeft();
							minX = x < minX ? x : minX;
							var y = ctrl.GetTop();
							minY = y < minY ? y : minY;
							
							arr.push(ctrl);
						});
						
						// Set position of all static container's direct children
						for (var i = 0; i < arr.length; i++) {
							var ctrl = arr[i];

							if (ref == "StaticContainer") {
								var snap = MP.Tools.Config.Editor.html.snap;
								var x = ctrl.GetLeft() - minX + ContextMenu.OffsetX - 5;
								var y = ctrl.GetTop() - minY + ContextMenu.OffsetY - 25;
								ctrl.SetLeft(Utilities.SnapTo(x, snap[0]));
								ctrl.SetTop(Utilities.SnapTo(y, snap[1]));
							} else {
								var div = ctrl.GetControl();
								div.css('position', 'relative')
								   .css('left', '')
								   .css('top', '')
								   .css('width', '');
								ctrl.Refresh();
							};
						};
						
						return arr;
					} catch (err) {
						iLog("AddComponentsFromHtmlString", err, Log.Type.Error);
					}
				},
				GetHtmlOfSelectedComponents : function (doCut) {
					try {
						var copiedHTML = "";

						EnsureSelection();
						for (var i = 0; i < selected.length; i++) {
							var ctrl = PageHelper.GetStoredComponent(selected[i]);
							if (ctrl) {
								var div = ctrl.GetControl();
								var ref = PageHelper.GetComponentRef(div);

								// Skip the main container!
								if ($.inArray(ref, ['EditableContent']) > -1)
									continue;
								
								// Remove editor
								PageHelper.ConvertEditorToDefaultComponents(true, div);
								copiedHTML += div.formOuterHTML();
								
								// Delete or return editor
								if (doCut)
									div.remove();
								else
									PageHelper.ConvertDefaultToEditorComponents();
							};
						};
						PageHelper.ClearSelected();
						
						copiedHTML = PageHelper.CleanVRM(copiedHTML);
						return copiedHTML;
					} catch (err) {
						iLog("GetHtmlOfSelectedComponents", err, Log.Type.Error);
					}
				},
				// Check for missing tooltips
				FindFieldsWithNoTooltips : function () {
					iLog("FindFieldsWithNoTooltips", "Called");
					
					var arr = [];
					$('input, textarea', $('#rightColumn')).each(function () {
						if ($.trim($(this).attr('title')) == "") {
							arr.push($(this).attr('id') + " - " + $(this).attr('type'));
						}
					});
					return arr;
				},
				// To clean or othervice manipulate a raw VRM data prior send to SR
				CleanVRM : function (data) {
					try {
						iLog("CleanVRM", "Called");
						
						data = data.replace(/done[0-9]{1,}=\"[0-9]{1,}\"\s{0,}/g, "");
						data = data.replace(/targetlink2onclick/g, "onclick");
						
						return data;
					} catch (err) {
						iLog("CleanVRM", err, Log.Type.Error);
					}
				},
				AddHelpLink : function (ctrl) {
					var el = ctrl.GetControl(),
						url = ctrl.GetHelpLink();
					
					// does element have a help URL
					if (!url)
						return;
					
					var FadeIn = function() {
						el.data('MouseIn', true);
						
						// skip if icon already shown
						var d = $('div.mp-help', el);
						if (d.length)
							return;
						
						d = AddHelpLinkIcon(el, url);
						d.bind('mouseenter', function() {
							el.data('MouseIn', true);
						});
						d.bind('mouseleave', function() {
							el.data('MouseIn', false);
						});
						d.fadeIn(500);
					};
					var FadeOut = function() {
						// skip if icon not shown
						var d = $('div.mp-help', el);
						if (!d.length)
							return;
						
						// do not remove icon from focused elements
						if (el.find('input,textarea,select').is(":focus"))
							return;
						
						// remove the icon
						el.data('MouseIn', false);
						setTimeout(function() {
							if (!el.data('MouseIn')) {
								d.fadeOut(500, function() {
									d.remove();
								});
							};
						}, 500);
					};					
					
					if (Global.FadingHelpLinks) {
						el.bind("mouseenter", FadeIn);
						el.bind("focusin", FadeIn);
						el.bind("mouseleave", FadeOut);
						el.bind("focusout", FadeOut);
						
					} else {
						// skip if icon already shown
						var d = $('div.mp-help', el);
						if (d.length)
							return;
						
						d = AddHelpLinkIcon(el, url);
						d.show();
					};
				}
			};
			
		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	};
	
	return PageHelper;
});

// Do not include PropertyEd! You'll get circular dependency issues
define('Editor', ['PageHelper', 'RuleHelper', 'ContextMenu', 'IconMover', 'IconConnector'], function (PageHelper, RuleHelper, ContextMenu, IconMover, IconConnector) {
	var Editor = new function () {
		try {
			/* PRIVATE PROPERTIES */
			var logClassName = "Editor.";
			var _currentComponent = null;

			/* PRIVATE METHODS */
			
			function iLog(Place, Message, Type, Silent) {
				Log.Add(logClassName + Place, Message, Type, Silent);
			}
			
			return {
			
				/* PUBLIC PROPERTIES */
				Enabled : false,
				Changing : false,
				VRMName : "",
				LockedBy : "",

				/* PUBLIC METHODS */

				// Search 
				Search : function () {
					function DoSearch () {
						var fw = $('#fw', dlg).val();
						var cs = $('#cs', dlg)[0].checked;

						PageHelper.Search(fw, cs);
						RuleHelper.Search(fw, cs);
					}
					// This dialog is being reused and so should be created only once!
					var dlg = $('#SearchForDlg');
					if (!dlg.length) {
						dlg = $('<div id="SearchForDlg" style="text-align: left;"><label for="fw">Find What:</label><input type="text" id="fw" name="fw" value=""/><br/><br/><input type="checkbox" id="cs" name="cs" value="1"/><label for="cs">Case sensitive</label></div>');
						var btns = {
							'Search' : function (e) {
								DoSearch();
								dlg.dialog("close");
							},
							'Clear' : function () {
								Editor.ClearSearch();
								dlg.dialog("close");
							}
						};					
						dlg.dialog({
							width : 200,
							height : 200,
							autoOpen : false,
							closeOnEscape : true,
							modal : true,
							buttons : btns,
							title : "Find",
							open : function () {
								dlg.find('#fw').focus().select();
							}
						});
						dlg.keypress(function(e) {
							if (e.keyCode == $.ui.keyCode.ENTER) {
								DoSearch();
							}
						});
					};
					dlg.dialog("open");
				},
				ClearSearch : function () {
					PageHelper.Search('', false);
					RuleHelper.Search('', false);
				},
				// Deletes a single HTML component from the editor
				DeleteComponent : function (Component) {
					try {
						var ctrl = Component || _currentComponent;
						if (!ctrl)
							return;

						iLog("DeleteComponent", "Called");
						
						Editor.HideProperties();
						PageHelper.DeleteEditorComponent(ctrl);
						_currentComponent = null;
					} catch (err) {
						iLog("DeleteComponent", err, Log.Type.Error);
					}
				},
				// Called when a template component is dropped onto a container
				BuildComponent : function (Ref, Container, Position) {
					try {
						if (Ref == null)
							iLog("BuildComponent", "The Template control passed in did not specify a ref attribute", Log.Type.Error);
							
						var ctrl = PageHelper.CreateEditorComponent(Ref);
						if (ctrl) {
							ctrl.AppendTo(Container);
							ctrl.Refresh();
							
							if (Position) {
								var snap = MP.Tools.Config.Editor.html.snap;
								ctrl.SetLeft(Utilities.SnapTo(Position.left - 5, snap[0]));
								ctrl.SetTop(Utilities.SnapTo(Position.top - 25, snap[1]));
							}
						}
					} catch (err) {
						iLog("BuildComponent", err, Log.Type.Error);
					}
				},
				DisableSelectibleInIE : function (div, disable) {
					if (!Browser.IsMSIE())
						return;
					
					if (disable)
						div.selectable("disable");
					else
						div.selectable("enable");
				},
				// Disables the editor and sets each component to its default state
				DisableEditor : function () {
					try {
						if (!this.Enabled)
							return;
						iLog("DisableEditor", "Called");
						
						this.Changing = true;
						
						$(".ShowOutEditor").children().show();
						$("#vrmName").remove();
						
						PageHelper.Search("");
						PageHelper.ConvertEditorToDefaultComponents(true);
						PageHelper.ClearStoredComponents();

						// Undelegate all event handlers!
						$("#rightColumn")
							.undelegate(".component")
							.undelegate(".EditorMemo")
							.selectable("destroy");
						$("#preproc, #postproc")
							.undelegate(".icon")
							.selectable("destroy");
						
						this.Enabled = false;
						
						// Raise back z-order of all our client debuging tools
						MP.Tools.ToolsInForeground(true);
						MP.Tools.ShowToolbar();
					} catch (err) {
						iLog("DisableEditor", err, Log.Type.Error);
					}
					this.Changing = false;
				},
				// Enables the editor and sets each component to its editable state
				EnableEditor : function (vrmName, lockedBy) {
					try {
						if (this.Enabled)
							return;
						iLog("EnableEditor", "Called");
						
						this.Changing = true;
						$(".HideInEditor").children().hide();
						
						this.VRMName = vrmName || this.VRMName;
						if (this.VRMName) {
							$("#middle").attr("VRMName", this.VRMName);
							$("#EditVRMButton").val("Edit " + this.VRMName);
							$("#bottom").append('<div id="vrmName">' + this.VRMName.toUpperCase() + '</div>');
						};
						
						this.LockedBy = lockedBy;
						if (lockedBy)
							jAlert('This page is locked by ' + lockedBy + '\nYou will not be able to save any changes!');
						
						ContextMenu.Add("#rightColumn", PageHelper.MakeContextMenu);
						
						var div = $("#rightColumn");
						PageHelper.ConvertDefaultToEditorComponents(true, div);
						
						// Delegate all event handlers!
						div.delegate(".component", "dblclick", function (event) {
							event.stopPropagation();							
							Editor.ShowProperties($(this));
						});
						div.delegate(".EditorMemo", "click", function (event) {
							event.stopPropagation();
							$(this).find("textarea").focus();
						});
						
						div = $("#preproc, #postproc");
						var stopEventProp = false;
						var ppDiv = div; // keep a valid reference!
						div.delegate(".icon", "dblclick", function (event) {
							var id = $(this).attr("id");
							RulesMaker.ShowProperties(id);
						});
						div.delegate(".icon", "mousedown", function (event) {
							try {
								stopEventProp = true;
								
								Editor.DisableSelectibleInIE(ppDiv, true);
								
								var id = $(this).attr("id");
								IconMover.Load(id);
								IconMover.Enable();
								if (event.which == 1)
									ContextMenu.Hide();
								
								var ctrl = RuleStorage.GetComponent(id);
								ctrl.Icon.SetIconMover(IconMover);
							} catch (err) {
								iLog("MouseDown", err, Log.Type.Error);
							}
						});
						div.delegate(".icon", "mouseup", function (event) {
							try {
								stopEventProp = false;
								
								var img = $(this);
								var id = img.attr("id");
								if (event.which == 3)
									RulesMaker.SelectThisOnlyIfNotSelected(id);

								IconConnector.IconClicked(id, event.which);
								IconMover.Reset();
								
								var ctrl = RuleStorage.GetComponent(id);
								ctrl.SetX(img.position().left);
								ctrl.SetY(img.position().top);
								
								Editor.DisableSelectibleInIE(ppDiv, false);
							} catch (err) {
								iLog("MouseUp", err, Log.Type.Error);
							}
						});
						div.bind("mousedown", function (event) {
							try {
								if (stopEventProp)
									return false;
								
								ContextMenu.Hide();
								IconConnector.CanvasClicked(event.which);
							} catch (err) {
								iLog("MouseDown", err, Log.Type.Error);
							}
						});
						div.selectable({
							filter : "img",
							selected : function (event, ui) {
								var id = $(ui.selected).attr("id");
								RulesMaker.AddSelected(id);
							},
							start : function (event, ui) {
								Global.DisableHighlightingInChrome(true);
								RulesMaker.ClearSelected();
							},
							stop : function (event, ui) {
								Global.DisableHighlightingInChrome(false);
							}
						});

						this.Enabled = true;
						
						// Lower z-order of all our client debuging tools
						MP.Tools.ToolsInForeground(false);
						MP.Tools.ShowToolbar();
					} catch (err) {
						iLog("EnableEditor", err, Log.Type.Error);
					}
					this.Changing = false;
				},
				HideProperties : function () {
					try {
						iLog("HideProperties", "Called");
						
						PropertyEd.Hide();
					} catch (err) {
						iLog("HideProperties", err, Log.Type.Error);
					}
				},
				//LK: Not needed, called when an ajax post inserts new html into the document
				Refresh : function () {
					try {
						if (!this.Enabled)
							return;
						iLog("Refresh", "Called");

						PageHelper.ConvertDefaultToEditorComponents(true);
					} catch (err) {
						iLog("Refresh", err, Log.Type.Error);
					}
				},
				// Shows a table to update component properties
				ShowProperties : function (Component) {
					try {
						iLog("ShowProperties", "Called");
						
						var ctrl = PageHelper.GetEditorComponent(Component);
						var properties = ctrl.GetProperties();
						var title = ctrl.refClassName;
						try {
							if (ctrl.GetName)
								title = title + " - Name: " + ctrl.GetName();
							if (ctrl.GetID)
								title = title + " - ID: " + ctrl.GetID();
						} catch (err) {
							iLog("ShowProperties", err, Log.Type.Error, true);
						}						
						_currentComponent = $(Component);
						PropertyEd.Show(properties, Editor.DeleteComponent, title );
					} catch (err) {
						iLog("ShowProperties", err, Log.Type.Error);
					}
				},
				// returns the properties of the current component
				GetProperties : function () {
					try {
						var ctrl = PageHelper.GetEditorComponent(_currentComponent);
						return ctrl.GetProperties();
					} catch (err) {
						iLog("GetProperties", err, Log.Type.Error);
					}
				},
				ShowAceEditorForm : function (data, title, description, callback) {
					// This dialog removes itself from DOM after close!
					var aceEditor;
					var dlg = $('<div id="AceEditorDlg"><label>' + description + '</label><br><textarea id="xc"/></div>');
					var ta = dlg.find('#xc');
					var btns = {
						'Apply' : function (e) {
							if (callback) {
								var val;
								if (aceEditor)
									val = aceEditor.getValue();
								else
									val = ta.val();
								callback(val);
							};
							dlg.dialog("close");
						}
					};					
					dlg.dialog({
						width : 700,
						height : 500,
						autoOpen : false,
						closeOnEscape : false,
						modal : true,
						buttons : btns,
						title : title,
						resizeStart: function() {
							Global.DisableHighlightingInChrome(true);
						},
						resizeStop: function() {
							Global.DisableHighlightingInChrome(false);
							if (aceEditor)
								aceEditor.resize();
						},
						dragStart: function() {
							Global.DisableHighlightingInChrome(true);
						},
						dragStop: function() {
							Global.DisableHighlightingInChrome(false);
						},
						close : function() {
							if (aceEditor)
								aceEditor.destroy();
							dlg.remove();
						},
						open : function() {
							ta.val(data)
							if (MP.Tools.AceIsEnabled())
								aceEditor = Global.ConvertToAceEditor(ta, 'html', true);
						}
					});
					dlg.dialog("open");
				},
				ShowTextareaForm : function (data, callback) {
					// This dialog removes itself from DOM after close!
					var dlg = $('<div id="CopyPasteDlg"><label>XML Code:</label><br><textarea id="xc"/></div>');
					var ta = dlg.find('#xc');
					var btns = {
						'OK' : function (e) {
							if (callback)
								callback(ta.val());
							dlg.dialog("close");
						}
					};					
					dlg.dialog({
						width : 400,
						height : 400,
						autoOpen : false,
						closeOnEscape : true,
						modal : true,
						buttons : btns,
						title : "Copy/Paste",
						resizeStart: function() {
							Global.DisableHighlightingInChrome(true);
						},
						resizeStop: function() {
							Global.DisableHighlightingInChrome(false);
						},
						dragStart: function() {
							Global.DisableHighlightingInChrome(true);
						},
						dragStop: function() {
							Global.DisableHighlightingInChrome(false);
						},
						close : function () {
							dlg.remove();
						},
						open : function () {
							ta.val(data);
							ta.focus();
							ta.select();
						}
					});
					dlg.dialog("open");
				}
			};

		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	};
	
	return Editor;
});

define('PropertyFields', ['ValidatorContainer'], function (Validator) {
	var filterOptions = {
		'' : ''
	};
	var key,
	filter;
	
	for (key in Validator.Filters) {
		if (!Object.prototype.hasOwnProperty.call(Validator.Filters, key)) {
			continue;
		}
		
		filter = Validator.Filters[key];
		
		filterOptions[key] = {
			text : filter.name
		};
	}
	
	var PropertyFields = {
		EditorTextFilters : {
			label : 'Filters',
			description : 'Data filters',
			type : 'multi',
			data : [{
					name : 'Filter',
					label : 'Filter',
					type : 'select',
					data : filterOptions
				}, {
					name : 'DType',
					label : 'Type',
					type : 'select',
					data : ',DATE,FLOAT,INTEGER,STRING'.split(',')
				}, {
					name : 'Param',
					label : 'Parameter',
					type : 'text',
					sizeHint : 'wide'
				}
			]
		},
		Borderless : {
			label : 'Borderless',
			description : 'Whether the control shows a border',
			type : 'checkbox',
			live : true
		},
		Caption : {
			label : 'Caption',
			description : 'The caption of the component',
			type : 'text',
			live : true,
			sizeHint : 'wide'
		},
		HtmlBody : {
			label : 'HTML body',
			description : 'The HTML body of the component',
			type : 'text',
			live : false,
			sizeHint : 'large',
			language : 'html'
		},
		Checked : {
			label : 'Checked',
			description : 'Whether or not the component is checked',
			type : 'text',
			live : true,
			sizeHint : 'small'
		},
		Class : {
			label : 'Class',
			description : 'The css class of the component',
			type : 'select',
			data : [
				'Default',
				'PageTitle',
				'DefaultBold',
				'Required',
				'RequiredBold',
				'Extended',
				'ExtendedBold',
				'RequiredExtended',
				'RequiredExtendedBold',
				'InfoColor',
				'AttentionColor'
			],
			live : true
		},
		ClassText : {
			label : 'Class',
			description : 'The css class of the component',
			type : 'text',
			sizeHint : 'wide',
			live : true
		},
		SvrCondition : {
			label : 'Server Condition',
			description : 'A server side condition in PASCAL for the element to be delivered or not',
			type : 'text',
			sizeHint : 'wide'
		},
		CliCondition : {
			label : 'Client Condition',
			description : 'A client side condition in JS for the element to be initially shown or not',
			type : 'text',
			sizeHint : 'wide'
		},
		DefaultButton : {
			label : 'Default button',
			description : 'Check to invoke the click event on enter key press on any element of the parent Static Container',
			type : 'checkbox',
			live : false
		},
		EditHTML : {
			label : 'Edit HTML',
			description : 'Replaces the text area with an html editor',
			type : 'checkbox',
			live : false
		},
		Spellcheck : {
			label : 'Spellcheck',
			description : 'Enables the text area to be spellchecked',
			type : 'checkbox',
			live : false
		},
		Flipped : {
			label : 'Flipped',
			description : "Flip input's side",
			type : 'checkbox',
			live : true
		},
		Height : {
			label : 'Height',
			description : 'The height of the component',
			type : 'text',
			sizeHint : 'small',
			live : true
		},
		ID : {
			label : 'ID',
			description : 'The ID of the component',
			type : 'text'
		},
		Left : {
			label : 'Left',
			description : 'The left position of the component',
			type : 'text',
			live : true,
			sizeHint : 'small'
		},
		MaxLength : {
			label : 'Maximum length',
			description : 'The maximum number of characters allowed',
			type : 'text',
			live : true,
			sizeHint : 'small'
		},
		MultiSelect : {
			label : 'Multi-select',
			description : 'Allow multiple items to be selected',
			type : 'checkbox',
			live : true
		},
		Name : {
			label : 'Name',
			description : 'The name of the component',
			type : 'text'
		},
		OnClick : {
			label : 'On click',
			description : 'The javascript that executes when the component is clicked',
			type : 'text'
		},
		Options : {
			label : 'Options',
			description : 'The variable that fills the dropdown options',
			type : 'text',
			sizeHint : 'wide'
		},
		Required : {
			label : 'Required',
			description : 'If the component requires input',
			type : 'checkbox',
			live : true
		},
		Secure : {
			label : 'Secure',
			description : 'Secure input with masked value. Use function "SecureVarForDisplay" to set the mask',
			type : 'checkbox',
			live : false
		},
		Watchpoint : {
			label : 'Watch Point',
			description : 'Set a watchpoint which will cause Stingray to send all ReqList changes back to the editor',
			type : 'checkbox',
			live : true
		},
		Scripts : {
			label : 'Scripts',
			description : 'Javascript functions that will be made available on this page',
			type : 'text',
			live : false,
			sizeHint : 'large',
			language : 'javascript'
		},
		ScriptFunctions : {
			label : 'Script functions',
			description : 'User functions',
			type : 'multi',
			data : [{
					name : 'Name',
					label : 'Event',
					type : 'select',
					data : {
						'BLUR' : {
							text : 'Blur/unfocus'
						},
						'CHANGE' : {
							text : 'Change/edit'
						},
						'CLICK' : {
							text : 'Click'
						},
						'DBLCLICK' : {
							text : 'Double-click'
						},
						'FOCUS' : {
							text : 'Focus'
						},
						'MOUSEDOWN' : {
							text : 'Mouse button down'
						},
						'MOUSEMOVE' : {
							text : 'Mouse move'
						},
						'MOUSEOUT' : {
							text : 'Mouse move out'
						},
						'MOUSEOVER' : {
							text : 'Mouse move over'
						},
						'MOUSEUP' : {
							text : 'Mouse button up'
						},
						'KEYPRESS' : {
							text : 'Key Press'
						},
						'KEYUP' : {
							text : 'Key Up'
						},
						'KEYDOWN' : {
							text : 'Key Down'
						}
					}
				}, {
					name : 'Body',
					label : 'Handler',
					type : 'text',
					sizeHint : 'medium'
				}
			]
		},
		Size : {
			label : 'Size',
			description : 'The size attribute of an input',
			type : 'text',
			sizeHint : 'small',
			live : true
		},
		Style : {
			label : 'Style',
			description : 'The style applied to the component',
			type : 'text',
			live : true,
			sizeHint : 'wide'
		},
		TabIndex : {
			label : 'Tab index',
			description : 'The tab index of the component',
			type : 'text',
			live : false,
			sizeHint : 'small'
		},
		Tags : {
			label : 'Tags',
			description : 'Attributes without value (eg. disabled, readonly, checked...) added to the input element',
			type : 'text',
			live : true
		},
		Target : {
			label : 'Target',
			description : 'The stingray target div that will receive the rendered template html',
			type : 'text',
			sizeHint : 'wide'
		},
		Top : {
			label : 'Top',
			description : 'The top position of the component',
			type : 'text',
			live : true,
			sizeHint : 'small'
		},
		Tooltip : {
			label : 'Tooltip',
			description : 'The tooltip that displays above a component',
			type : 'text',
			live : true,
			sizeHint : 'wide'
		},
		HelpLink : {
			label : 'Help Link',
			description : 'URL address to a HTML help document',
			type : 'text',
			live : false,
			sizeHint : 'wide'
		},
		Type : {
			label : 'Type',
			description : 'The type of button',
			type : 'select',
			live : true
		},
		Validate : {
			label : 'Validate',
			description : 'If the button should validated the page',
			type : 'checkbox',
			live : true
		},
		Value : {
			label : 'Value',
			description : 'The value of the component',
			type : 'text',
			live : true,
			sizeHint : 'small'
		},
		ValueLessAttrs : {
			label : 'Valueless attrs',
			description : 'The attributes ',
			type : 'text',
			live : true,
			sizeHint : 'wide'
		},
		Width : {
			label : 'Width',
			description : 'The width of the component',
			type : 'text',
			live : true,
			sizeHint : 'small'
		},
		EventVRM : {
			label : 'Event VRM',
			description : 'The VRM [with params] to be called by Ajax',
			type : 'text'
		},
		Event : {
			label : 'Event',
			description : 'The event that fires the ajax post',
			type : 'select'
		},
		AjaxEnabled : {
			label : 'Ajax enabled',
			description : 'Whether the ajax post feature is enabled',
			type : 'checkbox'
		},
		Comment : {
			label : 'Comment',
			description : 'Component comments that show on hover. The first line (up to 50 characters) display next to the component ',
			type : 'text',
			live : true,
			sizeHint : 'wide'
		},
		CompiledScriptFunction : {
			label : 'Function',
			description : 'Script Function',
			type : 'csf',
			data : []
		},
		SCRIPT : {
			label : 'Script',
			description : 'Script code',
			type : 'text',
			sizeHint : 'large',
			language : 'pascal'
		},
		Language : {
			label : 'Language',
			description : 'The type of language the script is written in',
			type : 'select',
			live : false,
			data : ['Pascal']
		},
		SqlTrnName : {
			label : 'Name',
			description : 'A unique name of SQL transaction',
			type : 'text'
		},
		SqlTrnType : {
			label : 'Type',
			description : 'The type of needed SQL transaction',
			type : 'select',
			live : false,
			data : ['Begin', 'Commit', 'Rollback']
		},
		ErrorMessage : {
			label : 'Error message',
			description : 'The error message that will be displayed to the user',
			type : 'text',
			sizeHint : 'large'
		},
		J1 : {
			label : 'J1',
			description : 'The Component that is called by default',
			type : 'text'
		},
		J2 : {
			label : 'J2',
			description : 'The Component that is called on a false condition',
			type : 'text'
		},
		MathParams : {
			label : 'Math parameters',
			description : 'Math Properties',
			type : 'multi',
			data : [{
					name : 'Name',
					label : 'Name',
					type : 'text',
					sizeHint : 'small'
				}, {
					name : 'Format',
					label : 'Format',
					type : 'select',
					data : 'INTEGER,LONGDATETIME,LONGDATETIMEAMPM,SHORTDATE,ROUND,FLOAT'.split(',')
				}, {
					name : 'Value',
					label : 'Param value',
					type : 'text',
					sizeHint : 'wide'
				}
			]
		},
		Query : {
			label : 'Query',
			description : 'A SQL query',
			type : 'text',
			sizeHint : 'large',
			language : 'sql'
		},
		QueryParams : {
			label : 'Parameters',
			description : 'Set Query Parameters',
			type : 'multi',
			data : [{
					name : 'Name',
					label : 'Name',
					type : 'text',
					sizeHint : 'small'
				}, {
					name : 'Type',
					label : 'Type',
					type : 'select',
					data : 'BOOLEAN,CURRENCY,DATETIME,FLOAT,INTEGER,STRING,SECURE'.split(',')
				}, {
					name : 'Value',
					label : 'Value',
					type : 'text',
					sizeHint : 'wide'
				}
			]
		},
		RuleName : {
			label : 'Rule name',
			description : 'The vrm to be called',
			type : 'text'
		},
		SetParams : {
			label : 'ReqList Variables',
			description : 'Set ReqList Variables',
			type : 'multi',
			data : [{
					name : 'Name',
					label : 'Name',
					type : 'text',
					sizeHint : 'small'
				}, {
					name : 'Value',
					label : 'Value',
					type : 'text',
					sizeHint : 'wide'
				}
			]
		},
		X : {
			label : 'X',
			description : 'The left coordinate of the component',
			type : 'text',
			live : true
		},
		Y : {
			label : 'Y',
			description : 'The top coordinate of the component',
			type : 'text',
			live : true
		}
	};
	
	return PropertyFields;
});

define('TemplateBase', ['jQuery', 'PropertyFields', 'Utilities', 'PageHelper', 'Editor'], function ($, PropertyFields, Utilities, PageHelper, Editor) {
	var uniqueIdCounter = 0; // Used to track individual components
	
	function TemplateBase(undefined) {
		/* PUBLIC PROPERTIES */
		
		/* PRIVATE PROPERTIES */
		var logClassName = "TmpBase.";
		var self = this;
		var _control = null;
		var _input = null;
		var CurrentPositionX;
		var CurrentPositionY;
		
		/* PRIVATE METHODS */

		function iLog(Place, Message, Type, Silent) {
			var id = (!_control) ? "" : _control.attr("EditorID");
			var s = logClassName + Place;
			s += (!_input) ? "" : "." + _input.attr("id") || _input.attr("name");
			s = (!id) ? s : s + "." + id;
			Log.Add(s, Message, Type, Silent);
		}
		// attaches the valueless attributes to the input
		function attachValuelessAttrs() {
			try {
				iLog("attachValuelessAttrs", "Called");
				
				if (!_input)
					return;
				var str = _input.attr("valuelessAttrs");
				if (!str)
					return;
				var arr = str.match(/[a-zA-Z0-9#_]+/g);
				if (arr == null)
					return;
				for (var i = 0; i < arr.length; i++) {
					try {
						if (arr[i].indexOf("#") > -1)
							_input.attr(arr[i], "");
						else
							_input.attr(arr[i], " ");
					} catch (err) {
						// Bad attribute; ignore
					}
				}
			} catch (err) {
				iLog("attachValuelessAttrs", err, Log.Type.Error);
			}
		}
		// detaches the valueless attributes from the input
		function detachValuelessAttrs() {
			try {
				iLog("detachValuelessAttrs", "Called");

				if (!_input)
					return;
				var str = _input.attr("valuelessAttrs");
				if (!str)
					return;
				var arr = str.match(/[a-zA-Z0-9#_]+/g);
				if (arr == null)
					return;
				for (var i = 0; i < arr.length; i++) {
					try {
						_input.removeAttr(arr[i]);
					} catch (err) {
						// Bad attribute; ignore
					}
				}
			} catch (err) {
				iLog("detachValuelessAttrs", err, Log.Type.Error);
			}
		}
		function UserFunction(name, body) {
			this.Name = name;
			this.Body = body;
		}
		
		/* PUBLIC METHODS */

		this.Log = function (Place, Message, Type, Silent) {
			var id = (!_control) ? "" : _control.attr("EditorID");
			var s = Place;
			s += (!_input) ? "" : "." + _input.attr("id") || _input.attr("name");
			s = (!id) ? s : s + "." + id;
			Log.Add(s, Message, Type, Silent);
		};
		this.BaseLoad = function (ControlElement, InputElement) {
			try {
				iLog("BaseLoad", "Called");
				
				_control = $(ControlElement);
				if (InputElement) {
					_input = $(InputElement);
					_input.unbind("focus.clearerror").bind("focus.clearerror", function () {
						var ctrl = PageHelper.GetEditorComponent($(this).parent());
						if (ctrl.ErrorStatus)
							ctrl.ErrorStatus(false);
					});
				}
				_control.unbind("click.clearerror").bind("click.clearerror", function () {
					var ctrl = PageHelper.GetEditorComponent(this);
					if (ctrl.ErrorStatus)
						ctrl.ErrorStatus(false);
				});
				attachValuelessAttrs();
			} catch (err) {
				iLog("BaseLoad", err, Log.Type.Error);
			}
		};
		this.BaseLoad2 = function (ControlElement) {
			try {
				iLog("BaseLoad2", "Called");
				
				_control = $(ControlElement);
			} catch (err) {
				iLog("BaseLoad2", err, Log.Type.Error);
			}
		};
		this.AttachFunctions = function () {
			try {
				if (Editor.Enabled)
					return;
				if (!_control.attr("function"))
					return;
				iLog("AttachFunctions", "Called");
				
				var functions = _control.attr("function").split("|");
				var definitions = _control.attr("definition").split("|");
				var f, d, name;
				for (var i = 0; i < functions.length; i++) {
					f = Utilities.Trim(functions[i]);
					d = Utilities.Trim(definitions[i]);
					if (!d.beginsWith("#S") && f != "" && d != "") {
						name = f.toLowerCase() + ".templatebase";
						try {
							var fn = new Function(d);
							_input.unbind(name).bind(name, fn);
						} catch (err) {
							// We don't want to loose the err object!
							iLog("BindScriptFunction", err + " on " + f + " in " + d, Log.Type.Error, true);
							throw err;
						}
					}
				}

			} catch (err) {
				iLog("AttachFunctions", err, Log.Type.Error);
			}
		};
		this.DetachFunctions = function () {
			try {
				iLog("DetachFunctions", "Called");
				
				// hack: this should be called in its own
				detachValuelessAttrs();
				if (_control.attr("function")) {
					var functions = _control.attr("function").split("|");
					for (var i = 0; i < functions.length; i++) {
						var name = functions[i].toLowerCase() + ".templatebase";
						_input.unbind(name);
					}
				}
			} catch (err) {
				iLog("DetachFunctions", err, Log.Type.Error);
			}
		};
		this.AddFunction = function () {
			try {
				iLog("AddFunction", "Called");
				
				if ((_control.attr("function") == null) || (_control.attr("function").length == 0)) {
					_control.attr("function", "");
					_control.attr("definition", "");
				} else {
					_control.attr("function", _control.attr("function") + "|");
					_control.attr("definition", _control.attr("definition") + "|");
				}
			} catch (err) {
				iLog("AddFunction", err, Log.Type.Error);
			}
		};
		this.DeleteFunction = function (FunctionIndex) {
			try {
				iLog("DeleteFunction", "Called");
				
				if (!_control.attr("function"))
					return;
				var functions;
				if (!_control.attr("function").match(/|/)) {
					functions = _control.attr("function").split("|");
				} else {
					functions = [$.trim(_control.attr("function"))];
				}
				var definitions = _control.attr("definition").split("|");
				functions.splice(FunctionIndex, 1);
				definitions.splice(FunctionIndex, 1);
				_control.attr("function", functions.toPipeString());
				_control.attr("definition", definitions.toPipeString());
				if (_control.attr("function").length == 0) {
					_control.removeAttr("function");
					_control.removeAttr("definition");
				}
			} catch (err) {
				iLog("DeleteFunction", err, Log.Type.Error);
			}
		};
		this.GetBaseProperties = function () {
			try {
				iLog("GetBaseProperties", "Called");
				
				var p = new Array();
				var prnt = PageHelper.GetParentRef(_control);
				if (prnt == "StaticContainer") {
					p[p.length] = new PropertyEd.Property(PropertyFields["Left"], this.GetLeft, this.SetLeft);
					p[p.length] = new PropertyEd.Property(PropertyFields["Top"], this.GetTop, this.SetTop);
				}
				p[p.length] = new PropertyEd.Property(PropertyFields["SvrCondition"], this.GetSvrCondition, this.SetSvrCondition);
				p[p.length] = new PropertyEd.Property(PropertyFields["CliCondition"], this.GetCliCondition, this.SetCliCondition);
				if (_input) {
					if (_control.attr("ref") != 'EditorLabel')
						p[p.length] = new PropertyEd.Property(PropertyFields["TabIndex"], this.GetTabIndex, this.SetTabIndex);
					else
						_input.attr("tabindex", "-1");
					p[p.length] = new PropertyEd.Property(PropertyFields["Tooltip"], this.GetTooltip, this.SetTooltip);
					p[p.length] = new PropertyEd.Property(PropertyFields["HelpLink"], this.GetHelpLink, this.SetHelpLink);
					p[p.length] = new PropertyEd.Property(PropertyFields["ValueLessAttrs"], this.GetValueLessAttrs, this.SetValueLessAttrs);
				}
				var ca = new RulesMaker.ComplexArgs(this.GetBaseProperties, this.AddFunction, this.DeleteFunction);
				p[p.length] = new PropertyEd.Property(PropertyFields["ScriptFunctions"], this.GetFunctions, this.SetFunctions, ca);

				return p;
			} catch (err) {
				iLog("GetBaseProperties", err, Log.Type.Error);
			}
		};
		this.GetFunctions = function () {
			try {
				iLog("GetFunctions", "Called");
				
				var functions = _control.attr("function");
				var definitions = _control.attr("definition");
				if ((functions == null) || (definitions == null))
					return new Array();
				var ret = new Array();
				if (functions.indexOf("|") > -1) { // multiple functions
					functions = _control.attr("function").split("|");
					definitions = _control.attr("definition").split("|");
					for (var i = 0; i < functions.length; i++) {
						var f = new UserFunction(functions[i], definitions[i]);
						ret[ret.length] = f;
					}
				} else { // only one function
					ret[0] = new UserFunction(functions, definitions);
				}
				return ret;
			} catch (err) {
				iLog("GetFunctions", err, Log.Type.Error);
			}
		};
		this.SetFunctions = function (arr) {
			try {
				iLog("SetFunctions", "Called");
				
				var functions = "";
				var definitions = "";
				var hasfunctions = true;
				if (arr.length == 0)
					hasfunctions = false;
				if (arr.length == 1) {
					var f = Utilities.ReplaceAll(arr[0].Name, " ", "");
					if (f == "")
						hasfunctions = false;
				}
				if (!hasfunctions) {
					_control.removeAttr("function");
					_control.removeAttr("definition");
					return;
				}
				for (var i = 0; i < arr.length; i++) {
					var f = Utilities.ReplaceAll(arr[i].Name, " ", "");
					if (f.length > 0) {
						functions += arr[i].Name + "|";
						definitions += arr[i].Body + "|";
					}
				}
				if (arr.length > 0) {
					functions = functions.removeLastChar();
					definitions = definitions.removeLastChar();
				}
				_control.attr("function", functions);
				_control.attr("definition", definitions);
			} catch (err) {
				iLog("SetFunctions", err, Log.Type.Error);
			}
		};
		this.GetSvrCondition = function () {
			try {
				var str = _control.attr("condition");
				return str || "";
			} catch (err) {
				iLog("GetSvrCondition", err, Log.Type.Error);
			}
		};
		this.SetSvrCondition = function (Condition) {
			try {
				_control.attr("condition", Condition);
			} catch (err) {
				iLog("SetSvrCondition", err, Log.Type.Error);
			}
		};
		this.GetCliCondition = function () {
			try {
				var s = _control.attr("cli-cond");
				return s || "";
			} catch (err) {
				iLog("GetCliCondition", err, Log.Type.Error);
			}
		};
		this.SetCliCondition = function (value) {
			try {
				_control.attr("cli-cond", value);
			} catch (err) {
				iLog("SetCliCondition", err, Log.Type.Error);
			}
		};
		this.GetTabIndex = function () {
			try {
				if (!_input)
					return 0;
				return _input.attr("tabindex");
			} catch (err) {
				iLog("GetTabIndex", err, Log.Type.Error);
			}
		};
		this.SetTabIndex = function (newTabIndex) {
			try {
				if (!_input)
					return;
				var idx = parseInt(newTabIndex, 0);
				if (idx < 0)
					idx = 0;
				_input.attr("tabindex", idx);
			} catch (err) {
				iLog("SetTabIndex", err, Log.Type.Error);
			}
		};
		this.GetValueLessAttrs = function () {
			try {
				if (!_input)
					return "";
				var str = _input.attr("valuelessAttrs");
				if (!str)
					return "";
				var attrs = str.match(/[a-zA-Z0-9#_]+/g);
				if (attrs == null)
					return "";
				var ret = attrs.toString();
				return ret.replace(/,/g, " ");
			} catch (err) {
				iLog("GetValueLessAttrs", err, Log.Type.Error);
			}
		};
		this.SetValueLessAttrs = function (newValue) {
			try {
				if (!_input)
					return;
				_input.removeAttr("valuelessAttrs");
				if (newValue == null)
					return;
				var attrs = newValue.match(/[a-zA-Z0-9#_]+/g);
				if (attrs == null)
					return;
				attrs = attrs.toString();
				_input.attr("valuelessAttrs", attrs.replace(/,/g, " "));
			} catch (err) {
				iLog("SetValueLessAttrs", err, Log.Type.Error);
			}
		};
		this.GetTooltip = function () {
			try {
				if (!_input)
					return "";
				var ret = _input.attr("title");
				if (!ret)
					return "";
				return ret;
			} catch (err) {
				iLog("GetTooltip", err, Log.Type.Error);
			}
		};
		this.SetTooltip = function (newValue) {
			try {
				if (_input)
					_input.attr('title', newValue);
			} catch (err) {
				iLog("SetTooltip", err, Log.Type.Error);
			}
		};
		this.GetHelpLink = function () {
			try {
				var ret = _control.attr("mp-help");
				if (!ret)
					return "";
				return ret;
			} catch (err) {
				iLog("GetHelpLink", err, Log.Type.Error);
			}
		};
		this.SetHelpLink = function (newValue) {
			try {
				_control.attr('mp-help', newValue);
			} catch (err) {
				iLog("SetHelpLink", err, Log.Type.Error);
			}
		};
		this.GetLeft = function () {
			try {
				return Utilities.ToNumber(_control.css("left"));
			} catch (err) {
				iLog("GetLeft", err, Log.Type.Error);
			}
		};
		this.SetLeft = function (newValue) {
			try {
				_control.css("left", Utilities.ToNumber(newValue) + 'px');
			} catch (err) {
				iLog("SetLeft", err, Log.Type.Error);
			}
		};
		this.GetTop = function () {
			try {
				return Utilities.ToNumber(_control.css("top"));
			} catch (err) {
				iLog("GetTop", err, Log.Type.Error);
			}
		};
		this.SetTop = function (newValue) {
			try {
				_control.css("top", Utilities.ToNumber(newValue) + 'px');
			} catch (err) {
				iLog("SetTop", err, Log.Type.Error);
			}
		};
		this.HighlightAsSelected = function (value) {
			_control.find(".moving").toggleClass("ui-selected", value);
		};
		this.HighlightAsFound = function (value) {
			var cls = Browser.IsMSIE() ? "ui-searchIE" : "ui-search";
			var elm = _input || _control;
			elm.toggleClass(cls, value);
		};
		this.BaseSearch = function (str, caseSensitive) {
			try {
				this.HighlightAsFound(false);
				if (str == "")
					return;

				var re = (caseSensitive) ? new RegExp(str, "") : new RegExp(str, "i");
				var found = false;
				
				if (!found && this.GetID)
					found = this.GetID().search(re) > -1;

				if (!found && this.GetName)
					found = this.GetName().search(re) > -1;
					
				if (!found && this.GetTooltip)
					found = this.GetTooltip().search(re) > -1;

				if (!found && this.GetSvrCondition)
					found = this.GetSvrCondition().search(re) > -1;

				if (!found && this.GetCliCondition)
					found = this.GetCliCondition().search(re) > -1;

				if (!found && this.GetValueLessAttrs)
					found = this.GetValueLessAttrs().search(re) > -1;

				if (!found && this.GetCaption)
					found = this.GetCaption().search(re) > -1;

				if (!found && this.GetFunctions) {
					var arr = $.grep(this.GetFunctions(), function(e){
						return e.Body.search(re) > -1;
					});
					found = arr.length > 0;
				}
				if (found) {
					iLog("Search", this, Log.Type.Search);
					return;
				} else {
					// Continue search in inherited objects!
					return re;
				}
			} catch (err) {
				iLog("Search", err, Log.Type.Error);
			}
		};
		this.DisableHighlighting = function () {
			Global.DisableHighlightingInChrome(true);
		};
		this.EnableHighlighting = function () {
			Global.DisableHighlightingInChrome(false);
		};
		this.onDragStart = function () {
			Global.DisableHighlightingInChrome(true);
			CurrentPositionX = self.GetLeft();
			CurrentPositionY = self.GetTop();
		};
		this.onDragStop = function() {
			Global.DisableHighlightingInChrome(false);
		};
		this.onDragProgress = function () {
			var x = self.GetLeft();
			var y = self.GetTop();
			var id = PageHelper.GetComponentID(_control);
			if (!PageHelper.IsSelected(id)) {
				PageHelper.ClearSelected();
				PageHelper.AddSelected(id);
			};
			if ((CurrentPositionX == x) && (CurrentPositionY == y))
				return;
			
			var offsetX = x - CurrentPositionX;
			var offsetY = y - CurrentPositionY;
			var selected = PageHelper.GetSelected();
			CurrentPositionX = x;
			CurrentPositionY = y;

			for (var i = 0; i < selected.length; i++) {
				id = selected[i];
				var ctrl = PageHelper.GetStoredComponent(id);
				if (ctrl) {
					x = ctrl.GetLeft();
					y = ctrl.GetTop();
					ctrl.SetLeft(x + offsetX);
					ctrl.SetTop(y + offsetY);
				} else
					iLog("Dragging", "Cannot locate component ID: " + id, Log.Type.Warning);
			};
		};
	}
	
	return TemplateBase;
});

/*
This script provides commonly used utility functions
 */
define('Utilities', ['jQuery', 'Formatting'], function ($, Formatting) {
	Array.prototype.reset = function () {
		for (var i = 0; i < this.length; i++)
			this[i] = null;
	};
	Array.prototype.toPipeString = function () {
		var str = "";
		for (var i = 0; i < this.length; i++) {
			str += this[i] + "|";
		}
		return str.substring(0, str.length - 1);
	};
	String.prototype.beginsWith = function (str) {
		var L = str.length;
		var begin = this.substring(0, L);
		return (begin == str);
	};
	String.prototype.endsWith = function (str) {
		var L = str.length;
		var end = this.substring(this.length - L);
		return (end == str);
	};
	String.prototype.removeLastChar = function () {
		return this.substring(0, this.length - 1);
	};
	String.prototype.removeFirstChar = function () {
		return this.substring(1);
	};
	String.prototype.insert = function (pos, str) {
		if (typeof pos == "object") {
			var ret = "";
			var lp = 0;
			for (var i = 0; i < pos.length; i++) {
				var p = pos[i];
				ret += this.substring(lp, p) + str;
				lp = p;
			}
			ret += this.substring(lp);
			return ret;
		}
		return this.substring(0, pos) + str + this.substring(pos);
	};
	
	// Add new functions to jQuery here
	jQuery.fn.outerHTML = function () {
		try {
			if (this[0].outerHTML)
				return this[0].outerHTML;
			// TODO: if not IE then this code must return the equivalent of outerHTML - needs testing
			return $('<div>').append(this.eq(0).clone(true)).html();
		} catch (err) {
			Log.Add("jQuery.fn.outerHTML", err, Log.Type.Error);
		}
	};

	// This returns correct input values which $.outerHTML() does not! Performance penalty!
	var oldOuterHTML = $.fn.outerHTML;
	jQuery.fn.formOuterHTML = function () {
		if (arguments.length)
			return oldOuterHTML.apply(this, arguments);
		$("input,button", this).each(function() {
			this.setAttribute('value', this.value);
		});
		$("textarea", this).each(function() {
			$(this).text(this.value);
		});
		return oldOuterHTML.apply(this);
	};

	// This returns correct input values which $.html() does not! Performance penalty!
	var oldHTML = $.fn.html;
	$.fn.formHTML = function() {
		if (arguments.length)
			return oldHTML.apply(this, arguments);
		$("input,button", this).each(function() {
			this.setAttribute('value', this.value);
		});
		$("textarea", this).each(function() {
			$(this).text(this.value);
		});
		
		/* LK: we do not need to save values of the following inputs!
		$("input:radio,input:checkbox", this).each(function() {
			if (this.checked) this.setAttribute('checked', 'checked');
			else this.removeAttribute('checked');
		});
		$("option", this).each(function() {
			if (this.selected) this.setAttribute('selected', 'selected');
			else this.removeAttribute('selected');
		});
		*/
		return oldHTML.apply(this);
	};
	
	// Add :focus selector introduced later in jQuery 1.6
	$.expr[":"].focus = function( elem ) {
		return elem === document.activeElement && ( elem.type || elem.href );
	};
	
	// Dialog modal result types, the value is used as a class when displayed
	var ModalResultType = new function () {
		this.Ok = "-Dialog-Returned-OK-";
		this.Cancel = "-Dialog-Returned-Cancel-";
		this.Yes = "-Dialog-Returned-Yes-";
		this.No = "-Dialog-Returned-No-";
		this.Empty = "-Dialog-Returned-Empty-String";
	};

	Utilities = new function (undefined) {
		var logClassName = "Utils.";
		
		try {
			function iLog(Place, Message, Type, Silent) {
				Log.Add(logClassName + Place, Message, Type, Silent);
			}
			/* Prevent Page Refresh Helper */
			function nocontextmenu() {
				try {
					event.cancelBubble = true;
					event.returnValue = false;
					return false;
				} catch (err) {
					iLog("nocontextmenu", err, Log.Type.Error);
				}
			}
			function norightclick(e) {
				try {
					if (window.Event) {
						if (e.which != 1)
							return false;
					} else if (event.button != 1) {
						event.cancelBubble = true;
						event.returnValue = false;
						return false;
					}
				} catch (err) {
					iLog("norightclick", err, Log.Type.Error);
				}
			}
			function onKeyDown() {
				try {
					if ((event.altKey) || ((event.ctrlKey) && ((event.keyCode == 78) || (event.keyCode == 82)) || (event.keyCode == 116) || (event.keyCode == 122))) {
						event.keyCode = 0;
						event.returnValue = false;
					}
				} catch (err) {
					iLog("onKeyDown", err, Log.Type.Error);
				}
			}
			/* End Prevent Page Refresh Helper */
			
			function G() {
			  return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1)
			}
			
			return {
			
				/* PUBLIC METHODS */

				MakeGUID : function() {
				  return (G() + G() + "-" + G() + "-" + G() + "-" + G() + "-" + G() + G() + G()).toUpperCase();
				},
				GetXmlString : function (xmlDocument) {
					if (typeof xmlDocument.xml !== 'undefined') {
						return xmlDocument.xml;
					}
					return (new XMLSerializer()).serializeToString(xmlDocument);
				},
				// formats an array for .droppable accept selector
				GetAcceptedComponents : function (AcceptArray) {
					try {
						var _accept = "";
						for (var i = 0; i < AcceptArray.length; i++)
							_accept += "img[ref='" + AcceptArray[i] + "'],";
						_accept = _accept.substring(0, _accept.length - 1);
						return _accept;
					} catch (err) {
						iLog("GetAcceptedComponents", err, Log.Type.Error);
					}
				},
				// returns the current time formatted "0h:0m:0s:00ms"
				GetFormattedTime : function () {
					try {
						var d = new Date();
						var t = this.PadNumber(d.getHours()) + ":" + this.PadNumber(d.getMinutes()) + ":" + this.PadNumber(d.getSeconds()) + ":" + this.PadNumber(d.getMilliseconds(), 4);
						return t;
					} catch (err) {
						iLog("GetFormattedTime", err, Log.Type.Error);
					}
				},
				GetTimeDifference : function (Date1, Date2) {
					var d1 = Date1.getTime();
					var d2 = Date2.getTime();
					return d2 - d1;
				},
				FilterScript : function (Script) {
					try {
						var s = "";
						for (var j = 0; j < Script.length; j++) {
							var character = Script.substring(j, j + 1);
							var code = character.charCodeAt(0);
							if (code != 10)
								s += character;
						}
						return s;
					} catch (err) {
						iLog("FilterScript", err, Log.Type.Error);
					}
				},
				Format : function (str, params) {
					try {
						for (var i = 0; i < params.length; i++) {
							str = str.replace("{" + i + "}", params[i]);
						}
						return str;
					} catch (err) {
						iLog("Format", err, Log.Type.Error);
					}
				},
				// pads numbers with zero to the specified length [default padding = 2]
				PadNumber : function (num, padd) {
					try {
						if (padd == null)
							padd = 2;
						var m = "1000000000000000";
						var c = "0000000000000000";
						var n = parseInt(m.substring(0, padd), 10);
						if (num >= n)
							return num;
						var l = num.toString().length;
						var b = c.substring(0, padd - l);
						return b + num.toString();
					} catch (err) {
						iLog("PadNumber", err, Log.Type.Error);
					}
				},
				ParseXML : function (xml) {
					if (window.ActiveXObject && window.GetObject) {
						var dom = new ActiveXObject('Microsoft.XMLDOM');
						dom.loadXML(xml);
						return dom;
					}
					if (window.DOMParser)
						return new DOMParser().parseFromString(xml, 'text/xml');
					throw new Error('No XML parser available');
				},
				PreventRefresh : function () {
					try {
						document.oncontextmenu = nocontextmenu;
						document.onmousedown = norightclick;
						if (Browser.IsFirefox()) {
							document.addEventListener("keydown", onKeyDown, false);
						} else {
							document.attachEvent("onkeydown", onKeyDown);
						}
						if (window.Event)
							document.captureEvents(Event.MOUSEUP);
					} catch (err) {
						iLog("PreventRefresh", err, Log.Type.Error);
					}
				}, // prompts the user for a control name and ensures it doesn't already exist
				PromptForName : function (unique, caption) {
					try {
						caption = caption || "Please enter the control name";
						var n = prompt(caption, "");
						if (n == null)
							return Utilities.ModalResult.Cancel;
						n = this.Trim(n);
						if (n == "")
							return Utilities.ModalResult.Empty;
							
						if (unique) {
							if ($("#" + n).length > 0) {
								iLog("PromptForName", "The name '" + n + "' is already being used!", Log.Type.Warning);
								return false;
							}
						}
						return n;
					} catch (err) {
						iLog("PromptForName", err, Log.Type.Error);
					}
				},
				ReplaceAll : function (str, fnd, val) {
					try {
						if (str == null)
							return null;
						if (typeof str != "string")
							return "";
						while (str.indexOf(fnd) > -1) {
							str = str.replace(fnd, val);
						}
						return str;
					} catch (err) {
						iLog("ReplaceAll", err, Log.Type.Error);
					}
				},
				Serialize : function (HTML) {
					try {
						var toReturn = [];
						var els = $(HTML).find(':input').get();
						$.each(els, function () {
							if (this.name && !this.disabled && (this.checked || /select|textarea/i.test(this.nodeName) || /text|hidden|password/i.test(this.type))) {
								var $this = $(this);
								var n = encodeURIComponent(this.name);
								var v;
								
								// Add the element's modified submit value or it's real visible value
								if ($this.data('submit-value'))
									v = $this.data('submit-value');
								else
									v = $this.val();
								toReturn.push(n + "=" + encodeURIComponent(v));
									
								if ($this.attr('sMask')) {
									toReturn.push(n + "-sMask=" + encodeURIComponent($this.attr('sMask')));
									toReturn.push(n + "-sValue=" + encodeURIComponent($this.attr('sValue')));
								}
							}
						});
						// Get the data of CKEditor
						$(HTML).find("div[ref='EditorMemo']").each(function () {
							if ($(this).attr("EditHTML") == "true") {
								var id, i, data;
								id = $(this).find('div.ckEditorDiv').attr("id");
								if (id) {
									// New correct way, all entered data preserved!
									data = Global.GetCKEditorDataByID(id);
									id = encodeURIComponent(id);
									data = encodeURIComponent(data);
									toReturn.push(id + "=" + data);
								} else {
									// Old buggy way, passible loss of entered data due incorrect escape!
									id = $(this).find("textarea").attr("id");
									data = Global.GetCKEditorDataByID(id);
									id = encodeURIComponent(id);
									data = encodeURIComponent(data);
									for (i = 0; i < toReturn.length; i++) {
										if (toReturn[i].beginsWith(id)) {
											toReturn[i] = id + "=" + data;
											break;
										}
									}
								}
							}
						});
						var ret = toReturn.join("&").replace(/%20/g, "+");
						ret += TransferListHelper.Serialize(HTML);
						// serialize the transfer lists
						return ret;
					} catch (err) {
						iLog("Serialize", err, Log.Type.Error);
					}
				},
				SortSelect : function (sel) {
					try {
						sel = $(sel)[0];
						for (var i = 0; i < sel.options.length; i++) {
							var a = sel.options[i];
							var move = true;
							for (var j = 0; j < sel.options.length; j++) {
								if (j != i && move == true) {
									var b = sel.options[j];
									if ($(a).text() < $(b).text()) {
										$(a).remove().insertBefore($(b));
										move = false;
									}
								}
							}
						}
					} catch (err) {
						iLog("SortSelect", err, Log.Type.Error);
					}
				},
				SnapTo : function (num, snapTo, goUp) {
					if (goUp)
						return num - (num % snapTo) + snapTo;
					else
						return num - (num % snapTo);
				},
				ToNumber : function (str) {
					try {
						var i = parseInt(str, 10);
						if (isNaN(i))
							return 0;
						else
							return i;
					} catch (err) {
						iLog("ToNumber", err, Log.Type.Error);
					}
				},
				ToMoney : function (num) {
					try {
						if (typeof num == 'string')
							return Formatting.formatTextAsMoney(num);
						else
							return Formatting.formatFieldAsMoney(num);
					} catch (err) {
						iLog("ToMoney", err, Log.Type.Error);
					}
				},
				MoneyToNumber : function (str) {
					try {
						var s = Formatting.stripNonNumericalCharacters(str);
						var f = parseFloat(s);
						if (isNaN(f))
							return 0;
						else
							return f;
					} catch (err) {
						iLog("MoneyToNumber", err, Log.Type.Error);
					}
				},
				// Reads the properties of an object and displays them as name = value pairs
				ToString : function (IComponent, wrapped, currDepth) {
					currDepth = currDepth || 0;
					if (currDepth > 20)
						return "null";
					
					currDepth++;
					var _str = "";
					if (!wrapped)
						_str = "{\n";
					$.each(IComponent, function (field, val) {
						if (Utilities.IsObject(val))
							_str += "\"" + field + "\": " + Utilities.ToString(val, false, currDepth) + ",";
						else {
							switch (typeof val) {
							case "boolean":
								_str += "\"" + field + "\":" + val + ",";
								break;
							case "string":
								_str += "\"" + field + "\":\"" + val + "\",";
								break;
							case "number":
								_str += "\"" + field + "\":" + val + ",";
								break;
							default:
								_str += "\"" + field + "\": \"" + val + "\",";
								break;
							}
							_str += "\n";
						}
					});
					if (!wrapped)
						_str += "\n}";
					_str = _str.replace(/,\s{0,}\}/g, "\n}");
					return _str;
				},
				toProperCase : function(s) {
					return s.toLowerCase().replace( /\b((m)(a?c))?(\w)/g,
						function($1, $2, $3, $4, $5) {
							if($2)
								return $3.toUpperCase()+$4+$5.toUpperCase();
							else
								return $1.toUpperCase();
						}
					);
				},
				Trim : function (str) {
					if (str) {
						return str.replace(/^\s+|\s+$/g, "");
					} else {
						return "";
					}
				},
				RemoveWhiteSpaces : function (str) {
					if (str) {
						return str.replace(/\s+/g, " ");
					} else {
						return "";
					}
				}, // returns true if o is an object
				IsObject : function (o) {
					try {
						return (o && "object" == typeof o) || Utilities.IsFunction(o);
					} catch (err) {
						iLog("IsObject", err, Log.Type.Error);
					}
				}, // returns true if o is a function
				IsFunction : function (o) {
					try {
						return "function" == typeof o;
					} catch (err) {
						iLog("IsFunction", err, Log.Type.Error);
					}
				},
				IsNumber : function (o) {
					try {
						return "number" == typeof o;
					} catch (err) {
						iLog("IsNumber", err, Log.Type.Error);
					}
				},
				IsDate : function(DateStr, FormatStr) {
					try {
						if (FormatStr)
							var d = new Date.parseExact(DateStr, FormatStr);
						else
							var d = new Date.parse(DateStr);
						return !isNaN(d.getTime());
					} catch (err) {
						return false;
					}
				},
				IdentifyChildren : function(element) {
					var arr = [];
					var el = $(element);
					
					try {
						var children = el.find('[id]');
						children.each(function() {
							arr.push($(this).attr('id') || $(this).attr('name'));
						});
					} catch (err) {}
					
					var n = el.attr('id') || el.attr('name');					
					return n + '[' + arr.join() + ']';
				},
				ConvertToJSONObject : function (jsonStr, keyName) {
					if (Utilities.IsObject(jsonStr))
						return jsonStr;
					
					var strToObj = function(s) {
						try {
							return $.parseJSON(s);
						} catch(err) {
							return null;
						}
					};
					
					var re = /^\{(.*)\}$/;
					if (re.test(jsonStr.trim()))
						return strToObj(jsonStr.trim());
					
					jsonStr = jsonStr.replace(/"/g,'\\"');
					jsonStr = '{"' + keyName + '" : "' + jsonStr + '"}';
					return strToObj(jsonStr);
				},
				ConvertToOptions : function (obj) {
					var makeOption = function (data) {
						if (data instanceof $)
							return data;
						
						return $('<option/>')
						.attr('value', data.value || '')
						.attr('title', data.title || '')
						.text(data.text || '');
					};
					
					var parseOption = function (opt) {
						if (typeof opt === 'string') {
							return {
								text : opt,
								value : opt
							};
						} else if (opt instanceof $) {
							return opt;
						} else if (typeof opt === 'object') {
							return opt;
						} else {
							throw new TypeError('Option items must be strings, arrays, or jQuery elements');
						}
					};
					
					var $options = $([]);				
					if (obj instanceof Array || obj instanceof $) {
						$.each(obj, function (i, opt) {
							$options = $options.add(makeOption(parseOption(opt)));
						});
					} else if (typeof obj === 'object') {
						// WTB Object.keys with Array#forEach.
						var key;
						for (key in obj) {
							if (!Object.prototype.hasOwnProperty.call(obj, key))
								continue;
							
							$options = $options.add(makeOption($.extend(parseOption(obj[key]), {value: key})));
						};
					} else {
						throw new TypeError('Option container must be an array or object');
					}
					
					return $options;
				}
			};
		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	};
	
	Utilities.ModalResult = ModalResultType;

	return Utilities;
});

define('Formatting', ['jQuery'], function ($) {
	var joinNumber = function (integer, fractions) {
		if (fractions === '')
			return integer;
		else
			return integer + '.' + fractions;
	};
	
	var stripNonNumericalCharacters = function(text) {
		var s = text.replace(/[^-\d\.]/g, "");
		return isNaN(parseFloat(s)) ? '' : '' + parseFloat(s);
	};
	
	var formatNumberWithCommas = function (amountString) {
		var parts = amountString.split('.');
		var integer = parts[0].replace(/(\d{1,3})(?=(\d{3})+$)/g, '$1,');
		var fractions = parts.slice(1).join('');
		
		if (parts.length > 1)
			return integer + '.' + fractions;
		else
			return integer;
	};
	
	var formatText = function (text) {
		var s = stripNonNumericalCharacters(text);
		s = formatNumberWithCommas(s);
		var i = parseFloat(s);
		if (i < 0)
			return s.insert(1, '$');
		else
			return '$' + s;
	};
	
	var formatTextAsMoney = function (text) {
		text = $.trim(text);
		if (text) {
			//Remove incorrect negative symbols first
			var v1 = text.slice(0, 1);
			var v2 = text.slice(1);
			v2 = v2.replace(/-/g, "");
			text = formatText(v1 + v2);
		} else {
			text = "";
		}
		
		var parts = text.split('.');
		var integer = parts[0] || '';
		var fractions = parts[1] || '';
		
		if (fractions.length !== 0 && fractions.length !== 2) {
			fractions = fractions + '00';
			fractions = fractions.substr(0, 2);
		}
		
		return joinNumber(integer, fractions);
	};
	
	var formatFieldAsMoney = function ($field) {
		var v1 = $.trim($field.val());
		var v2 = "";
		if (v1) {
			v2 = formatTextAsMoney(v1);
			if (v1 == v2)
				return v2;
		};
		
		$field.val(v2);
		return v2;
	};
	
	return {
		formatFieldAsMoney : formatFieldAsMoney,
		formatTextAsMoney : formatTextAsMoney,
		stripNonNumericalCharacters : stripNonNumericalCharacters
	};
});

define('ValidatorContainer', ['jQuery', 'Utilities', 'PageHelper', 'Formatting'], function ($, Utilities, PageHelper, Formatting) {
	var Validator = new function () {
		var logClassName = "Validator.";
		
		function iLog(Place, Message, Type, Silent) {
			Log.Add(logClassName + Place, Message, Type, Silent);
		}
		function GetErrors(html) {
			try {
				iLog("GetErrors", "Called");
				
				var errors = new Array();
				var radios = new Array();
				var ser = Utilities.Serialize(html);
				$(html).find(".component:has(>span.required)").each(function () {
					var ref = $(this).attr("ref");
					var span = $(this).find(">span");
					var inp;
					var em = null;
					switch (ref) {
					case "EditorText":
						inp = $(this).find("input");
						if (Utilities.Trim(inp.val()).length == 0)
							em = "Field '" + span.text() + "' must be entered. Click to fix.";
						break;
					case "EditorMemo":
						inp = $(this).find("textarea");
						if (Utilities.Trim(inp.val()).length == 0)
							em = "Text field '" + span.text() + "' must be entered. Click to fix.";
						break;
					case "EditorDropDown":
						inp = $(this).find("select");
						if (inp.val() == "-1")
							em = "An option '" + span.text() + " must be selected. Click to fix.";
						break;
					case "EditorRadio":
						inp = $(this).find("input");
						var name = inp.attr("name");
						if ($.inArray(name, radios) == -1 && ser.indexOf(name + "=") == -1) {
							radios.push(name);
							var s = "";
							$('[name=' + name + ']').parent().find('span').each(function() {
								s += $(this).text() + ', ';
							});
							em = "At least one option (" + s.slice(0, s.length -2) + ") must be selected. Click to fix.";
						}
						break;
					case "EditorCheckBox":
						inp = $(this).find("input");
						if (!inp[0].checked)
							em = "Check box '" + span.text() + "' must be selected. Click to fix.";
						break;
					} //<-- end switch statement
					
					if (em != null && !inp.attr("disabled") && !inp.attr("readonly") && inp.is(':visible')) {
						var ctrl = PageHelper.GetEditorComponent(this);
						ctrl.ErrorStatus(true);
						var err = new ValidationError(em, ctrl);
						errors.push(err);
					}
				});
				
				return errors;
			} catch (err) {
				iLog("GetErrors", err, Log.Type.Error);
			}
		}
		function ErrorTable(errors) {
			try {
				iLog("ErrorTable", "Called");
				
				var ol = $("<ol class='ValidationErrors'/>");
				for (var i = 0; i < errors.length; i++) {
					var li = $("<li/>");
					li.text(errors[i].Message);
					li.data("elementObj", errors[i].Control.GetControl());
					li.bind("click", function() {
						var ctrl = $(this).data("elementObj");
						Global.ScrollToElement(ctrl, 500, function() {
							var obj = PageHelper.GetEditorComponent(ctrl);
							if (obj.SetFocus)
								obj.SetFocus();
						});
					});
					ol.append(li);
				}
				return ol;
			} catch (err) {
				iLog("ErrorTable", err, Log.Type.Error);
			}
		}
		function ShowErrors(table, html) {
			try {
				iLog("ShowErrors", "Called");
				
				var c = $(html).find(".ValidationContainer");
				if (!c.length)
					c = $(".ValidationContainer");
				if (!c.length) {
					iLog("ShowErrors", "ValidationContainer could not be found", Log.Type.Warning);
					return;
				}
				
				// Show it in the last container
				var ctrl = PageHelper.GetEditorComponent(c[c.length - 1]);
				ctrl.Show(table);
				Global.ScrollToElement(ctrl.GetControl());
			} catch (err) {
				iLog("ShowErrors", err, Log.Type.Error);
			}
		}
		function HideErrors() {
			try {
				iLog("HideErrors", "Called");
				
				$(".ValidationContainer").each(function () {
					var ctrl = PageHelper.GetEditorComponent(this);
					ctrl.Hide();
				});
			} catch (err) {
				iLog("HideErrors", err, Log.Type.Error);
			}
		}
		
		return {
		
			Validate : function (html, noDisplay ) {
				try {
					iLog("Validate", "Called");
					
					var errors = GetErrors(html);
					if (errors.length) {
						var eFn = CustomScript.onValidationErrors || MP.Events.onValidationErrors || $.noop;
					    eFn(errors);
					} else {
						HideErrors();
						return true;
					}
						
					if (!noDisplay) {
						var table = ErrorTable(errors);
						ShowErrors(table, html);
					}
					return false;
				} catch (err) {
					iLog("Validate", err, Log.Type.Error);
				}
			}
		};
	};
	function ValidationError(message, control) {
		this.Message = message;
		this.Control = control;
	}
	
	Validator.Filters = (function () {
		function Convert(Value, dtype) {
			dtype = dtype ? dtype.toUpperCase() : "STRING";

			switch (dtype) {
			case "DATE":
				try {
					return new Date(Value).getTime();
				} catch (err) {
					throw "Could not convert '" + Value + "' to a date";
				}
				break;
			case "FLOAT":
			case "MONEY":
				try {
					var val = Value.replace(/[^0-9\.-]/g, ""); // replace any non-numeric characters
					return parseFloat(val);
				} catch (err) {
					throw "Could not convert '" + Value + "' to a floating decimal point number";
				}
				break;
			case "INTEGER":
				try {
					var val = Value.replace(/[^0-9\.-]/g, ""); // replace any non-numeric characters
					return parseInt(val, 10);
				} catch (err) {
					throw "Could not convert '" + Value + "' to an integer";
				}
				break;
			case "STRING":
				return Value;
				break;
			}
		}
		function Display(Value, dtype) {
			dtype = dtype ? dtype.toUpperCase() : "STRING";
			
			switch (dtype) {
			case "DATE":
				var d = new Date(Value);
				return d.toString("MM/dd/yyyy");
				break;
			case "FLOAT":
				var v = Value.toString();
				return isNaN(v) ? '0' : v;
				break;
			case "INTEGER":
				var v = Value.toString();
				return isNaN(v) ? '0' : v;
				break;
			case "MONEY":
				var v = Value.toString();
				return isNaN(v) ? '0' : Utilities.ToMoney(v);
				break;	
			case "STRING":
				return Value;
				break;
			}
		}
		
		return {
		
			DATE : {
				name : 'Date',
				filter : function (Value, dtype, param) {
					var val = Value.replace(/[^0-9]/g, "/"); // replace any separators with /
					val = Utilities.ReplaceAll(val, "//", "/"); // get rid of all double pipes
					param = param || "MM/dd/yyyy";
					
					if (val.indexOf("/") == -1) {
						switch (val.length) {
						case 1: // 6 - 4/6/03
							var d = new Date().moveToFirstDayOfMonth().addDays(parseInt(val) - 1);
							val = d.toString(param);
							break;
						case 2: // 26 - 2/6/03 or 4/26/03
							var d = new Date(),
								i = parseInt(val) - 1,
								t = d.getDate() - 1;
							if (i <= t)
								d = d.moveToFirstDayOfMonth().addDays(i);
							else
								d.set({month: parseInt(val.charAt(0)) - 1, day: parseInt(val.charAt(1))});
							val = d.toString(param);
							break;
						case 3: // 113 - 1103 - 1/1/03
							val = val.insert([2], "0");
							val = val.insert([1, 2], "/");
							break;
						case 4: // 1103 - 1/1/03
							val = val.insert([1, 2], "/");
							break;
						case 5: // 31103 - 3/11/03
							val = val.insert([1, 3], "/");
							break;
						case 6: // 111103 - 11/11/03
							val = val.insert([2, 4], "/");
							break;
						case 7: // 1112003 - 1/11/2003
							val = val.insert([1, 3], "/");
							break;
						case 8: // 11112003 - 11/11/2003
							val = val.insert([2, 4], "/");
							break;
						default:
							throw "The date could not be formatted";
						}
					}
					var p = param != "MM/dd/yyyy" ? param : null;
					if (Utilities.IsDate(val, p)) {
						var d = new Date.parse(val);
						return d.toString(param);
					} else
						throw "The date must be a valid date in '" + param.toUpperCase() + "' format";
				}
			},
			EMAIL : {
				name : 'Email address',
				filter : function (Value, dtype, param) {
					var e = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;
					if (e.test(Value))
						return Value;
					else
						throw "The email address is invalid";
				}
			},
			EMAILS : {
				name : 'Email address list',
				filter : function (Value, dtype, param) {
					var v = Value.replace(/ /g, '').replace(/,/g, ';');
					var e = /^(([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4}))((;(([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})))*)(;{0,1})$/;
					if (e.test(v))
						return v;
					else
						throw "The email address list is invalid";
				}
			},
			EQUAL : {
				name : 'Equal-to',
				filter : function (Value, dtype, param) {
					var v = Convert(Value, dtype);
					var p = Convert(param, dtype);
					if (v == p)
						return Value;
					else
						throw "The values are not equal";
				}
			},
			FLOAT : {
				name : 'Floating-point number',
				filter : function (Value, dtype, param) {
					var err = "Only floating decimal point numbers are accepted";
					var v = Value.replace(/[^0-9\.-]/g, ""); // replace any non-numeric characters
					if (v.length == 0)
						throw err;
				
					var fl = Convert(v, "FLOAT");
					if (isNaN(fl))
						throw err;
		
					//param: blank = default 2 digits, 3 = # of digits, or { "digits": 3, "trailingZeros": true/false }
					var pObj = Utilities.ConvertToJSONObject(param, 'digits');
					var res = fl.toFixed(pObj.digits || 2);
					if (!/(0|false)/i.test(pObj.trailingZeros))
						return res;
					else
						return parseFloat(res);
					
					/*
					var err = "Only floating decimal point numbers are accepted";
					var v = Value.replace(/[^0-9\.-]/g, ""); // replace any non-numeric characters
					if (v.length == 0)
						throw err;
					
					var fl = Convert(v, "FLOAT");
					if (isNaN(fl))
						throw err;
					
					return fl.toFixed(param || 2);
					*/
				}
			},
			GREATERTHAN : {
				name : 'Greater-than',
				filter : function (Value, dtype, param) {
					var v = Convert(Value, dtype);
					var p = Convert(param, dtype);
					if (v > p)
						return Value;
					else
						throw Display(v, dtype) + " must be greater than " + Display(p, dtype);
				}
			},
			GREATERTHANEQUALS : {
				name : 'Greater-than-or-equal-to',
				filter : function (Value, dtype, param) {
					var v = Convert(Value, dtype);
					var p = Convert(param, dtype);
					if (v >= p)
						return Value;
					else
						throw Display(v, dtype) + " must be greater than or equal to " + Display(p, dtype);
				}
			},
			INTEGER : {
				name : 'Integer',
				filter : function (Value, dtype, param) {
					var err = "Only integer values are accepted";
					
					var v = Value.replace(/[^0-9\.-]/g, ""); // replace any non-numeric characters
					if (v.length == 0)
						throw err;
					
					var fl = Convert(v, "INTEGER");
					if (isNaN(fl))
						throw err;
					
					return fl.toString();
				}
			},
			LESSTHAN : {
				name : 'Less-than',
				filter : function (Value, dtype, param) {
					var v = Convert(Value, dtype);
					var p = Convert(param, dtype);
					if (v < p)
						return Value;
					else
						throw Display(v, dtype) + " must be less than " + Display(p, dtype);
				}
			},
			LESSTHANEQUALS : {
				name : 'Less-than-or-equal-to',
				filter : function (Value, dtype, param) {
					var v = Convert(Value, dtype);
					var p = Convert(param, dtype);
					if (v <= p)
						return Value;
					else
						throw Display(v, dtype) + " must be less than or equal to " + Display(p, dtype);
				}
			},
			PHONE : {
				name : 'Phone number',
				filter : function (Value, dtype, param) {
					Value = Value.replace(/x/g, "|"); // extensions will almost always contain the letter x, so replace x with |
					Value = Value.replace(/[^0-9|]/g, "");
					var ext = "";
					var i = Value.lastIndexOf("|");
					if (i > -1) {
						ext = Value.substring(i + 1);
						Value = Value.substring(0, i);
					}
					switch (Value.length) {
					case 7:
						Value = Value.substring(0, 3) + "-" + Value.substring(3);
						break;
					case 10:
						Value = "(" + Value.substring(0, 3) + ") " + Value.substring(3, 6) + "-" + Value.substring(6);
						break;
					case 11:
						Value = Value.substring(0, 1) + " (" + Value.substring(1, 4) + ") " + Value.substring(4, 7) + "-" + Value.substring(7);
						break;
					default:
						throw "The phone number is invalid";
					}
					if (ext.length > 0)
						Value += " x " + ext;
					return Value;
				}
			},
			SSN : {
				name : 'Social security number',
				filter : function (Value, dtype, param) {
					var val = Value.replace(/[^0-9]/g, ""); // remove any non-numeric characters
					if (val.length == 9)
						val = val.substring(0, 3) + "-" + val.substring(3, 5) + "-" + val.substring(5);
					var _exp = /^[0-9]{3}[\- ]?[0-9]{2}[\- ]?[0-9]{4}$/;
					if (_exp.test(val))
						return val;
					else
						throw "The social security number is invalid";
				}
			},
			FEIN : {
				name : 'Federal employer ID',
				filter : function (Value, dtype, param) {
					var val = Value.replace(/[^0-9]/g, ""); // remove any non-numeric characters
					if (val.length == 9)
						val = val.substring(0, 2) + "-" + val.substring(2);
					var _exp = /^[0-9]{2}[\- ]?[0-9]{7}$/;
					if (_exp.test(val))
						return val;
					else
						throw "The federal employer identification number is invalid";
				}
			},
			STATE : {
				name : 'State postal code',
				filter : function (Value, dtype, param) {
					Value = Value.toUpperCase();
					if (Value == "INT")
						return Value;
					var _exp = /[A-Z]{2}/g;
					if (!_exp.test(Value))
						throw "The state code must be two letters";
					var states = "AL AK AZ AR CA CO CT DC DE FL GA HI ID IL IN IA KS KY LA ME MD MA MI MN MS MO MT NE NV NH NJ NM NY NC ND OH OK OR PA RI SC SD TN TX UT VT VA WA WV WI WY PR VI GU";
					_exp = new RegExp(Value, "g");
					if (states.search(_exp) > -1)
						return Value;
					else
						throw "The state code is invalid";
				}
			},
			TIME : {
				name : 'Time',
				filter : function (Value, dtype, param) {
					var val = Value.toUpperCase();
					val = val.replace(/[^0-9AM:PM]/g, "");
					var end = null;
					if (val.indexOf("AM") > -1)
						end = "AM";
					else if (val.indexOf("PM") > -1)
						end = "PM";
					if (end == null)
						throw "Times must include AM or PM";
					val = val.replace(/\s/g, "");
					// expression does not end with /g so that only the first match is returned, or null if not found
					var _exp = /\d{1,2}:\d{2}/;
					var ma = val.match(_exp);
					if (ma == null)
						throw "Times must be formatted HH:MM AM/PM";
					if (typeof ma == "object")
						ma = ma[0];
					var s = ma.split(":");
					var h = parseInt(s[0], 10);
					var m = parseInt(s[1], 10);
					if (h > 12)
						throw "The hour must be less than or equal to 12";
					if (h == 0)
						throw "The hour must be greater than 0";
					if (m > 59)
						throw "The minute must be less than 60";
					if (m < 10)
						m = "0" + m.toString();
					return h + ":" + m + " " + end;
				}
			},
			ZIPCODE : {
				name : 'ZIP code',
				filter : function (Value, dtype, param) {
					var val = Value.replace(/[^0-9]/g, ""); // replace any non-numeric characters
					switch (val.length) {
					case 5:
						return val;
						break;
					case 9:
						return val.substring(0, 5) + "-" + val.substring(5);
						break;
					default:
						throw "The ZIP code must be 5 or 9 digits for zip + 4 codes";
					}
				}
			},
			PASSWORD : {
				name : 'Password',
				filter : function (Value, dtype, param) {
					return Value;
				}
			},
			MONEY : {
				name : 'Monetary value (money)',
				filter : {
					attach : function ($element, dtype, param) {
						var v1 = Formatting.formatFieldAsMoney($element);
						var v2 = Formatting.stripNonNumericalCharacters(v1);
						$element.data('submit-value', v2);
						
						$element.bind('focus.money-filter', function () {
							var v1 = $element.val();
							var v2 = Formatting.stripNonNumericalCharacters(v1);
							if (v1 != v2)
								$element.val(v2);
							$element.data('submit-value', v2);
						});
						$element.bind('blur.money-filter', function () {
							var v1 = Formatting.formatFieldAsMoney($element);
							var v2 = Formatting.stripNonNumericalCharacters(v1);
							$element.data('submit-value', v2);
						});
					},
					detach : function ($element, dtype, param) {
						$element.unbind('.money-filter');
					}
				}
			},
			CUSTOMEXPRESSION : {
				name : 'Custom expression',
				filter : function (Value, dtype, param) {
					//param: ^[A-z]+$ or {"pattern": "^[A-z]+$", "modifiers": "ig", "message": "Only letters allowed!"}
					var ptr = param,
						mdf = '',
						msg = '',
						obj = Utilities.ConvertToJSONObject(param, 'pattern');
					if (obj) {
						ptr = obj.pattern;
						mdf = obj.modifiers;
						msg = obj.message;
					}
					if (!ptr)
						return Value;
						
					var exp = new RegExp(ptr, mdf);
					if (exp.test(Value))
						return Value;
					else
						throw msg || "The information is formatted incorrectly";
				}
			},
			CUSTOMFUNCTION : {
				name : 'Custom function',
				filter : function (Value, dtype, param) {
					if (param.indexOf("()") == -1)
						throw 'Call "' + param + '" with no parameters!';
					
					var val = Value.replace(/"/g, '\\"');
					var fn = param.replace('()', '("' + val + '", "' + dtype + '")');
					
					return eval(fn);
				}
			}
		};
	}());
	
	return Validator;
});

define('AjaxTab', ['jQuery'], function ($) {
	//A placeholder for all bottom tabs
	var AjaxTab = new function (undefined) {
		try {

			/* PRIVATE PROPERTIES */
			var logClassName = "AjaxTab.",
				_ajaxDiv = null,
				_ajaxTab,
				_location,
				_wrapper,
				_cmdDiv = null,
				_resDiv = null,
				_itemId = 0,
				_lastRequest = "",			// the last request sent to stingray
				_lastResponse = "",			// the last response sent from stingray
				_config,
				self = this;
			
			/* PRIVATE METHODS */

			function iLog(Place, Message, Type, Silent) {
				Log.Add(logClassName + Place, Message, Type, Silent);
			}
			function Clear() {
				try {
					_itemId = 0;
					
					_cmdDiv.find("div").remove();
					_resDiv.find("div").remove();
				} catch (err) {
					iLog("Clear", err, Log.Type.Error);
				}
			}
			// Sets different background of clicked Ajax item
			function SetBackground(div) {
				try {
					iLog("SetBackground", "Called");
					
					var id = $(div).attr("iID");
					_cmdDiv.find("div[iID='" + id + "']").css("background-color", "#ddd");
					_resDiv.find("div[iID='" + id + "']").css("background-color", "#ddd");
				} catch (err) {
					iLog("SetBackground", err, Log.Type.Error);
				}
			}
			// Resets all Commands/Responses Ajax backgrounds
			function ResetBackgrounds() {
				try {
					iLog("ResetBackgrounds", "Called");
					
					_cmdDiv.find("div").css("background-color", "#fff");
					_resDiv.find("div").css("background-color", "#fff");
				} catch (err) {
					iLog("ResetBackgrounds", err, Log.Type.Error);
				}
			}
			// Remove the oldest records to preserve system resources
			function EnsureLimit() {
				if (_itemId > 10 && (_itemId % 5) == 0) {
					_cmdDiv.find("div:lt(5)").remove();
					_resDiv.find("div:lt(5)").remove();
				}
			}
			function InitConfig() {
				_config = MP.Tools.Config.Editor.tabs.ajax;
				if (!_config.size) {
					_config.size = {
						width: 600,
						height: 400
					};
				};
			}
			function UpdateButtons() {
				if (AjaxTab.Enabled)
					_ajaxDiv.dialog( "option", "title", "Ajax viewer");
				else
					_ajaxDiv.dialog( "option", "title", "Ajax viewer - Disabled");
				
				var bp = $(".ui-dialog-buttonpane", _ajaxDiv.parent());
				var FindBtn = function(caption) {
					return $("button:contains(" + caption + ")", bp);
				};
				
				if (AjaxTab.Enabled)
					FindBtn('Enable').html("Disable");
				else
					FindBtn('Disable').html("Enable");
				
				if (_config.pinned)
					FindBtn('Pin').html("Unpin");
				else
					FindBtn('Unpin').html("Pin");
				
				if (_location == _ajaxTab)
					FindBtn('Tab View').html("View Here");
				else
					FindBtn('View Here').html("Tab View");
			}

			return {
			
				/* PUBLIC PROPERTIES */
				Enabled : false,
				Initialized : false,

				/* PUBLIC METHODS */
				
				// Adds new item into Commands Ajax tab
				AddCommand : function (data) {
					try {
						_lastRequest = data;
						
						// To preserve performance do not do anything if disabled or hidden
						if (!this.Enabled || !_wrapper.is(':visible'))
							return;

						EnsureLimit();
						_itemId++;
						var time = "<span class='time'>[" + _itemId + "] " + Utilities.GetFormattedTime() + "</span> <br/>";
						var div = $("<div/>");
						div.attr("iID", _itemId);
						div.text(data);
						div.prepend(time);
						div.addClass("item");
						div.click(function () {
							ResetBackgrounds();
							SetBackground(this);
						});
						_cmdDiv.append(div);
					} catch (err) {
						iLog("AddCommand", err, Log.Type.Error, true);
					}
				},
				// Adds new item into Responses Ajax tab
				AddResponse : function (data, msg) {
					try {
						_lastResponse = data;
						
						// To preserve performance do not do anything if disabled or hidden
						if (!this.Enabled || !_wrapper.is(':visible'))
							return;
						
						var code = $(data).find("stingray>errorcode").text();
						if (code == "0101")
							data = "An Empty Response. No Callback Executed.";
						else {
							data = Utilities.GetXmlString(data);
							if (msg)
								data = msg + '\n' + data;
						};

						var time = "<span class='time'>[" + _itemId + "] " + Utilities.GetFormattedTime() + "</span> <br/>";
						var div = $("<div/>");
						div.attr("iID", _itemId);
						div.text(data);
						div.prepend(time);
						div.addClass("item");
						div.click(function () {
							ResetBackgrounds();
							SetBackground(this);
						});
						_resDiv.append(div);
					} catch (err) {
						iLog("AddResponse", err, Log.Type.Error, true);
					}
				},
				ClearTab : function () {
					if (!this.Initialized)
						return;

					iLog("ClearTab", "Called");
					Clear();
				},
				Show : function (activate) {
					if (!this.Initialized)
						return;
					
					_ajaxDiv.dialog("open");
					if (activate && !this.Enabled)
						this.Switch();
				},
				Hide : function () {
					if (this.Initialized)
						_ajaxDiv.dialog("close");
				},
				Switch : function () {
					this.Enabled = !this.Enabled;
					
					UpdateButtons();
					
					if (_itemId == 0) {
						this.AddCommand(_lastRequest);
						this.AddResponse(_lastResponse);
					};
				},		
				Pin : function (value) {
					if (value == undefined)
						_config.pinned = !_config.pinned;
					else
						_config.pinned = value;
					
					UpdateButtons();
					
					if (_config.pinned) {
						$(window).bind('scroll.pinAjaxDiv', function () {
							var p = _ajaxDiv.parent();
							if (p.is(":visible"))
								p.css('top', (_ajaxDiv.data('lastTop') + $(document).scrollTop()) + "px");
						});
					} else {
						$(window).unbind('scroll.pinAjaxDiv');
					}
				},
				MoveTo : function (value) {
					if (!value)
						value = (_location == _ajaxDiv) ? 'tab' : 'float';
					else
						value = value.toLowerCase();
					_config.viewStyle = value;
					
					var div = _wrapper.detach();
					var msg = 'This view is inactive. You can either <a class="activateViewLink">activate this view</a> or <a class="goToViewLink">go to the other view</a>.';
					
					if (value == 'tab') {
						_location = _ajaxTab;
						this.Hide();
						_ajaxDiv.html(msg);
						_ajaxDiv.find('.activateViewLink').bind('click', function() {
							AjaxTab.MoveTo("float");
						});
						_ajaxDiv.find('.goToViewLink').bind('click', function() {
							AjaxTab.Hide();
							Global.ScrollToElement($('#AjaxLink'), 500);
						});
						_ajaxTab.html('');
						div.appendTo(_ajaxTab);
						if (this.Initialized)
							Global.ScrollToElement($('#AjaxLink'), 500);
					} else {
						_location = _ajaxDiv;
						_ajaxTab.html(msg);
						_ajaxTab.find('.activateViewLink').bind('click', function() {
							AjaxTab.MoveTo("tab");
						});
						_ajaxTab.find('.goToViewLink').bind('click', function() {
							AjaxTab.Show();
							Global.ScrollToElement(_ajaxDiv.parent(), 500);
						});
						_ajaxDiv.html('');
						div.appendTo(_ajaxDiv);
					}
					
					UpdateButtons();
				},
				Initialize : function () {
					try {
						if (!MP.Tools.Config.ajaxEnabled || this.Initialized)
							return;					
						iLog("Initialize", "Called");
						
						InitConfig();
						
						// This dialog is being reused and so should be created only once!
						_ajaxTab = $('#AjaxTab');
						_ajaxDiv = $('#AjaxDiv');
						if (!_ajaxDiv.length)
							_ajaxDiv = $('<div id="AjaxDiv" style="text-align: left;"><div class="toolWrapper"><div id="Commands"></div><div id="Responses"></div></div></div>');
							
						_cmdDiv = _ajaxDiv.find("#Commands");
						_resDiv = _ajaxDiv.find("#Responses");
						_wrapper = _ajaxDiv.find(".toolWrapper");
						_location = _ajaxDiv;

						var btns = {
							'Clear' : function () {
								AjaxTab.ClearTab();
							},
							'Enable' : function () {
								AjaxTab.Switch();
							},
							'Pin' : function () {
								AjaxTab.Pin();
							},
							'Tab View' : function () {
								AjaxTab.MoveTo();
							}
						};
						_ajaxDiv.dialog({
							width : _config.size.width,
							height : _config.size.height,
							position : [_config.position.left, _config.position.top],
							minWidth : 300,
							minHeight : 200,
							autoOpen : false,
							closeOnEscape : false,
							modal : false,
							buttons : btns,
							dialogClass : "aboveSpinner",
							resizeStart: function() {
								Global.DisableHighlightingInChrome(true);
							},
							resizeStop: function() {
								Global.DisableHighlightingInChrome(false);
							},
							dragStart: function() {
								Global.DisableHighlightingInChrome(true);
							},
							dragStop: function(event, ui) {
								Global.DisableHighlightingInChrome(false);
								Global.UpdateLastPosition(_ajaxDiv, ui);
							},
							open: function(event) {
								UpdateButtons();
								
								if (_ajaxDiv.data('lastLeft') && _ajaxDiv.data('lastTop')) {
									_ajaxDiv.dialog("option", {
										position: [_ajaxDiv.data('lastLeft'), _ajaxDiv.data('lastTop')]
									});
								} else {
									Global.UpdateLastPosition(_ajaxDiv);
								}
							}
						});

						this.MoveTo(_config.viewStyle);
						this.Pin(_config.pinned || false);
						this.Initialized = true;
					} catch (err) {
						iLog("Initialize", err, Log.Type.Error);
					}
				}
			};
		
		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	};
	
	return AjaxTab;
});

/*
 Classes and functions to handle ReqList
*/
define('ReqList', ['jQuery', 'Utilities'], function ($, Utilities) {
	var ReqList = new function (undefined) {
		try {

			/* PRIVATE PROPERTIES */
			var logClassName = "ReqList.",
				_reqDiv = null,
				_reqTab,
				_location,
				_wrapper,
				_reqTable = null,
				_reqID = 0,
				_lastReqList = "",			// the last RL sent from stingray
				_lastVrmName = "",
				_lastVrmPg = null,
				_initialRL,
				_config;
			
			function iLog(Place, Message, Type, Silent) {
				Log.Add(logClassName + Place, Message, Type, Silent);
			}
			function Entry(Name, Value) {
				this.Name = Name;
				this.Value = Value;
			}
			function FormatEntry(ent) {
				_reqID++;
				
				var le = $("<tr/>");
				le.append("<td class='index'>" + _reqID + "</td>");
				le.append("<td class='name'>" + ent.Name + "</td>");
				if (ent.Name == 'VRM-PG')
					le.append("<td class='wpValue'>" + ent.Value + "</td>");
				else {
					le.append("<td class='value'><code class='ReqList'/></td>");
					le.find("code").text(ent.Value);
				};

				return le;
			}
			function Clear() {
				_reqID = 0;
				_lastVrmPg = null;
				if (_reqTable)
					_reqTable.empty().remove();
				_reqTable = $('<table class="ReqList"><tr><th>ID</th><th>Name</th><th>Value</th></tr></table>');
				_wrapper.append(_reqTable);
			}
			// Shows the entire ReqList in HTML table			
			function Display(rlNode, vrmName, xml) {
				try {
					if (!rlNode)
						return false;
					iLog("Display", "Called");
					
					// Cache last valid RL
					if (_initialRL) {
						_lastReqList = xml;
						_lastVrmName = vrmName;
					};
						
					// To preserve performance do not do anything if disabled or hidden
					if (!ReqList.Enabled || !_wrapper.is(':visible'))
						return false;

					if (_initialRL) {
						Clear();
						_lastVrmPg = ReqList.Add('VRM-PG', vrmName);
					} else {
						if (!_config.showAll)
							return false;
						
						ReqList.Add('VRM-PG', vrmName);
					};
					
					var s = $(rlNode).text();
					var regex = /\|{2}/g;
					var arr = s.split(regex);
					for (var i = 0; i < arr.length; i++) {
						var m = arr[i];
						var b = m.indexOf("=");
						ReqList.Add(m.substring(0, b), m.substring(b + 1));
					};
					ReqList.Add('', '');
					ReqList.Add('', '');
					EnsureLimit();
					
					return true;
				} catch (err) {
					iLog("Display", err, Log.Type.Error);
				}
			}
			// Remove the oldest records to preserve system resources
			function EnsureLimit() {
				var cnt = _reqTable.find("tr").length;
				if (cnt > 1000) {
					var i = cnt - 1000;
					_reqTable.find("tr:gt(0):lt(" + i.toString() + ")").empty().remove();
				}
			}
			function InitConfig() {
				_config = MP.Tools.Config.Editor.tabs.reqList;
			}
			function UpdateButtons() {
				if (ReqList.Enabled)
					_reqDiv.dialog( "option", "title", "ReqList viewer");
				else
					_reqDiv.dialog( "option", "title", "ReqList viewer - Disabled");
				
				var bp = $(".ui-dialog-buttonpane", _reqDiv.parent());
				var FindBtn = function(caption) {
					return $("button:contains(" + caption + ")", bp);
				};
				
				if (ReqList.Enabled)
					FindBtn('Enable').html("Disable");
				else
					FindBtn('Disable').html("Enable");
				
				if (_config.pinned)
					FindBtn('Pin').html("Unpin");
				else
					FindBtn('Unpin').html("Pin");
			
				if (_location == _reqTab)
					FindBtn('Tab View').html("View Here");
				else
					FindBtn('View Here').html("Tab View");
				
				if (_config.showAll)
					FindBtn('Show All').html("Show 1st");
				else
					FindBtn('Show 1st').html("Show All");
			}

			return {
			
				Enabled : false,
				Initialized : false,
				
				// Gets the HTML of the Table element
				GetList : function () {
					if (_lastReqList)
						return Utilities.GetXmlString(_lastReqList);
					else
						return "No ReqList";
				},
				// Loads RL from xml - The XML of the entire response which may or may not contain a RL
				Load : function (xml) {
					try {
						if (!this.Initialized || !xml)
							return;
						iLog("Load", "Called");
						
						var sr = $(xml).find("stingray");
						var vrm = sr.find("vrmname").text();
						var rl = sr.find("reqlist");
						var cb = sr.find("callback").text();
						var sts = sr.find("status").text();
						_initialRL = !((cb == 0) && (sts != "error"));
						
						if (Display(rl, vrm, xml))
							this.AutoFilter();
					} catch (err) {
						iLog("Load", err, Log.Type.Error, true);
					}
				},
				Add : function (name, value) {
					try {
						if (!this.Initialized)
							return null;
						
						var e = new Entry(name, value);
						var fe = FormatEntry(e);
						_reqTable.append(fe);
						return fe;
					} catch (err) {
						iLog("Add", err, Log.Type.Error);
					}
				},
				ClearTab : function () {
					if (!this.Initialized)
						return;
					iLog("ClearTab", "Called");
					
					Clear();
				},
				Show : function (activate) {
					if (!this.Initialized)
						return;
					
					_reqDiv.dialog("open");
					if (activate && !this.Enabled)
						this.Switch();
				},
				Hide : function () {
					if (!this.Initialized)
						return;
					
					_reqDiv.dialog("close");
				},
				Switch : function () {
					this.Enabled = !this.Enabled;
					
					UpdateButtons();
					
					if (_reqID == 0)
						this.Load(_lastReqList);
				},		
				Pin : function (value) {
					if (value == undefined)
						_config.pinned = !_config.pinned;
					else
						_config.pinned = value;
					
					UpdateButtons();
					
					if (_config.pinned) {
						$(window).bind('scroll.pinReqListDiv', function () {
							var p = _reqDiv.parent();
							if (p.is(":visible"))
								p.css('top', (_reqDiv.data('lastTop') + $(document).scrollTop()) + "px");
						});
					} else {
						$(window).unbind('scroll.pinReqListDiv');
					}
				},
				MoveTo : function (value) {
					if (!value)
						value = (_location == _reqDiv) ? 'tab' : 'float';
					else
						value = value.toLowerCase();
					_config.viewStyle = value;
					
					var div = _wrapper.detach();
					var msg = 'This view is inactive. You can either <a class="activateViewLink">activate this view</a> or <a class="goToViewLink">go to the other view</a>.';
					
					if (value == 'tab') {
						_location = _reqTab;
						this.Hide();
						_reqDiv.html(msg);
						_reqDiv.find('.activateViewLink').bind('click', function() {
							ReqList.MoveTo("float");
						});
						_reqDiv.find('.goToViewLink').bind('click', function() {
							ReqList.Hide();
							Global.ScrollToElement($('#ReqListLink'), 500);
						});
						_reqTab.html('');
						div.appendTo(_reqTab);
						if (this.Initialized)
							Global.ScrollToElement($('#ReqListLink'), 500);
					} else {
						_location = _reqDiv;
						_reqTab.html(msg);
						_reqTab.find('.activateViewLink').bind('click', function() {
							ReqList.MoveTo("tab");
						});
						_reqTab.find('.goToViewLink').bind('click', function() {
							ReqList.Show();
							Global.ScrollToElement(_reqDiv.parent(), 500);
						});
						_reqDiv.html('');
						div.appendTo(_reqDiv);
					}
					
					UpdateButtons();
				},
				ShowWhat : function (value) {
					if (value == undefined)
						_config.showAll = !_config.showAll;
					else
						_config.showAll = value;
					
					UpdateButtons();
				},	
				Initialize : function () {
					try {
						if (!MP.Tools.Config.reqlistEnabled || this.Initialized)
							return;
						iLog("Initialize", "Called");

						InitConfig();

						// This dialog is being reused and so should be created only once!
						_reqTab = $('#ReqListTab');
						_reqDiv = $('#ReqListDiv');
						if (!_reqDiv.length)
							_reqDiv = $('<div id="ReqListDiv"><div class="toolWrapper"></div></div>');

						_wrapper = _reqDiv.find(".toolWrapper");
						_location = _reqDiv;
						
						var btns = {
							'Clear' : function () {
								ReqList.ClearTab();
							},
							'Enable' : function () {
								ReqList.Switch();
							},
							'Pin' : function () {
								ReqList.Pin();
							},
							'Tab View' : function () {
								ReqList.MoveTo();
							},
							'Show All' : function () {
								ReqList.ShowWhat();
							}
						};
						_reqDiv.dialog({
							width : _config.size.width,
							height : _config.size.height,
							position : [_config.position.left, _config.position.top],
							minWidth : 380,
							minHeight : 200,
							autoOpen : false,
							closeOnEscape : false,
							modal : false,
							buttons : btns,
							dialogClass : "aboveSpinner",
							resizeStart: function() {
								Global.DisableHighlightingInChrome(true);
							},
							resizeStop: function() {
								Global.DisableHighlightingInChrome(false);
							},
							dragStart: function() {
								Global.DisableHighlightingInChrome(true);
							},
							dragStop: function( event, ui ) {
								Global.DisableHighlightingInChrome(false);
								Global.UpdateLastPosition(_reqDiv, ui);
							},
							open: function( event ) {
								UpdateButtons();
								
								if (_reqDiv.data('lastLeft') && _reqDiv.data('lastTop')) {
									_reqDiv.dialog("option", {
										position: [_reqDiv.data('lastLeft'), _reqDiv.data('lastTop')]
									});
								} else {
									Global.UpdateLastPosition(_reqDiv);
								}
							}
						});

						_reqDiv.find('#edReqListFilter')
							.val(_config.filter)
							.keypress(function(event) {
								if (event.which == 13) {
									var v = event.target.value;
									_config.filter = v;
									ReqList.FilterBy(v);
								};
							});
						
						Clear();
						
						this.MoveTo(_config.viewStyle);
						this.Pin(_config.pinned || false);
						this.Initialized = true;
					} catch (err) {
						iLog("Initialize", err, MP.Types.Log.Error);
					}
				},
				AutoFilter : function () {
					var s = $("#edReqListFilter").val();
					if (s)
						this.FilterBy(s);
				},
				FilterBy : function (nameList) {
					try {
						nameList = Utilities.RemoveWhiteSpaces(nameList);
						nameList = $.trim(nameList);
						iLog("FilterBy", "Called: " + nameList);
						
						var rows = _reqTable.find("tr td.name").parent();
						if (!nameList) {
							rows.show();
						} else {
							var arr = nameList.split(" ");								
							for (var r = 0; r < rows.length; r++) {
								var tr = $(rows[r]);
								var name = tr.find("td.name").text();
								var found = name == 'VRM-PG';

								if (!found) {
									$.each(arr, function (idx, itm) {
										var re = new RegExp(itm, "i");
										if (name.search(re) > -1) {
											found = true;
											return;
										};
									});
								};
								if (found)
									tr.show()
								else
									tr.hide();
							};
						};
					} catch (err) {
						iLog("FilterBy", err, Log.Type.Error);
					}
				}
			};
		
		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	};
	
	return ReqList;
});

/*
 WatchLists with dumped reqlist changes on set watchpoints
*/
define('WatchList', ['jQuery', 'Utilities'], function ($, Utilities) {
	var WatchList = new function (undefined) {
		try {

			/* PRIVATE PROPERTIES */
			var logClassName = "WatchList.",
				_reqDiv = null,
				_reqTab,
				_location,
				_wrapper,
				_reqTable = null,
				_reqID = 0,
				_lastReqList = "",			// the last WL sent from stingray
				_lastVrmName = "",
				_config;
			
			function iLog(Place, Message, Type, Silent) {
				Log.Add(logClassName + Place, Message, Type, Silent);
			}
			function Entry(name, value, newBP) {
				this.NewBP = newBP;
				this.Name = name;
				this.Value = value;
			}
			function FormatEntry(ent) {
				var le = $("<tr/>");
				if (ent.NewBP) {
					_reqID = 0;
					le.append("<td class='wpIndex'></td>");
					le.append("<td class='wpName'></td>");
					le.append("<td class='wpValue'>" + ent.Value + "</td>");
				} else {
					_reqID++;
					le.append("<td class='index'>" + _reqID + "</td>");
					le.append("<td class='name'>" + ent.Name + "</td>");
					le.append("<td class='value'><code class='ReqList'/></td>");
					le.find("code").text(ent.Value);
				};
				return le;
			}
			function Clear() {
				_reqID = 0;
				if (_reqTable)
					_reqTable.empty().remove();
				_reqTable = $('<table class="ReqList"><tr><th>ID</th><th>Name</th><th>Value</th></tr></table>');
				_wrapper.append(_reqTable);
			}
			function Add(name, value, newBP) {
				try {
					var e = new Entry(name, value, newBP);
					_reqTable.append(FormatEntry(e));
				} catch (err) {
					iLog("Add", err, Log.Type.Error);
				}
			}
			function Display(wlNode, vrmName, xml) {
				try {
					if (!wlNode)
						return false;
					iLog("Display", "Called");
					
					var s = $(wlNode).text();
					if (!s)
						return false;
					var arr = jsonParse(s);
					if (arr.length == 0)
						return false;

					// Cache last valid WL
					_lastReqList = xml;
					_lastVrmName = vrmName;

					// To preserve performance do not do anything if disabled or hidden
					if (!WatchList.Enabled || !_wrapper.is(':visible'))
						return false;

					Clear();
					for (var i = 0; i < arr.length; i++) {
						var bp = arr[i];						
						Add("", bp.n, true);
						
						for (var y = 0; y < bp.v.length; y++) {
							var rl = bp.v[y];
							Add(rl.n, rl.v, false);
						};
					};
					return true;
				} catch (err) {
					iLog("Display", err, Log.Type.Error);
				}
			}
			function InitConfig() {
				_config = MP.Tools.Config.Editor.tabs.watchList;
				if (!_config.size) {
					_config.size = {
						width: 600,
						height: 400
					};
				};
			}
			function UpdateButtons() {
				if (WatchList.Enabled)
					_reqDiv.dialog( "option", "title", "WatchList viewer");
				else
					_reqDiv.dialog( "option", "title", "WatchList viewer - Disabled");
				
				var bp = $(".ui-dialog-buttonpane", _reqDiv.parent());
				var FindBtn = function(caption) {
					return $("button:contains(" + caption + ")", bp);
				};
				
				if (WatchList.Enabled)
					FindBtn('Enable').html("Disable");
				else
					FindBtn('Disable').html("Enable");
				
				if (_config.pinned)
					FindBtn('Pin').html("Unpin");
				else
					FindBtn('Unpin').html("Pin");
			
				if (_location == _reqTab)
					FindBtn('Tab View').html("View Here");
				else
					FindBtn('View Here').html("Tab View");
			}

			return {
			
				Enabled : false,
				Initialized : false,
				
				// Gets the HTML of the Table element
				GetList : function () {
					if (_lastReqList)
						return Utilities.GetXmlString(_lastReqList);
					else
						return "No WatchList";
				},
				// Loads WL from xml - The XML of the entire response which may or may not contain a WL
				Load : function (xml) {
					try {
						if (!this.Initialized || !xml)
							return;
						iLog("Load", "Called");
						
						var sr = $(xml).find("stingray");
						var vrm = sr.find("vrmname").text();
						var wl = sr.find("watchlist");
						
						if (Display(wl, vrm, xml))
							this.AutoFilter();
					} catch (err) {
						iLog("Load", err, Log.Type.Error, true);
					}
				},
				ClearTab : function () {
					if (!this.Initialized)
						return;
					iLog("ClearTab", "Called");
					
					Clear();
				},
				Show : function (activate) {
					if (!this.Initialized)
						return;
					
					_reqDiv.dialog("open");
					if (activate && !this.Enabled)
						this.Switch();
				},
				Hide : function () {
					if (this.Initialized)
						_reqDiv.dialog("close");
				},
				Switch : function () {
					this.Enabled = !this.Enabled;
					
					UpdateButtons();
					
					if (_reqID == 0)
						this.Load(_lastReqList);
				},		
				Pin : function (value) {
					if (value == undefined)
						_config.pinned = !_config.pinned;
					else
						_config.pinned = value;
					
					UpdateButtons();
					
					if (_config.pinned) {
						$(window).bind('scroll.pinWatchListDiv', function () {
							var p = _reqDiv.parent();
							if (p.is(":visible"))
								p.css('top', (_reqDiv.data('lastTop') + $(document).scrollTop()) + "px");
						});
					} else {
						$(window).unbind('scroll.pinWatchListDiv');
					}
				},
				MoveTo : function (value) {
					if (!value)
						value = (_location == _reqDiv) ? 'tab' : 'float';
					else
						value = value.toLowerCase();
					_config.viewStyle = value;
					
					var div = _wrapper.detach();
					var msg = 'This view is inactive. You can either <a class="activateViewLink">activate this view</a> or <a class="goToViewLink">go to the other view</a>.';
					
					if (value == 'tab') {
						_location = _reqTab;
						this.Hide();
						_reqDiv.html(msg);
						_reqDiv.find('.activateViewLink').bind('click', function() {
							WatchList.MoveTo("float");
						});
						_reqDiv.find('.goToViewLink').bind('click', function() {
							WatchList.Hide();
							Global.ScrollToElement($('#WatchListLink'), 500);
						});
						_reqTab.html('');
						div.appendTo(_reqTab);
						if (this.Initialized)
							Global.ScrollToElement($('#WatchListLink'), 500);
					} else {
						_location = _reqDiv;
						_reqTab.html(msg);
						_reqTab.find('.activateViewLink').bind('click', function() {
							WatchList.MoveTo("tab");
						});
						_reqTab.find('.goToViewLink').bind('click', function() {
							WatchList.Show();
							Global.ScrollToElement(_reqDiv.parent(), 500);
						});
						_reqDiv.html('');
						div.appendTo(_reqDiv);
					}
					
					UpdateButtons();
				},
				Initialize : function () {
					try {
						if (!MP.Tools.Config.watchlistEnabled || this.Initialized)
							return;
						iLog("Initialize", "Called");

						InitConfig();
						
						// This dialog is being reused and so should be created only once!
						_reqTab = $('#WatchListTab');
						_reqDiv = $('#WatchListDiv');
						if (!_reqDiv.length)
							_reqDiv = $('<div id="WatchListDiv"><div class="toolWrapper"></div></div>');

						_wrapper = _reqDiv.find(".toolWrapper");
						_location = _reqDiv;
						
						var btns = {
							'Clear' : function () {
								WatchList.ClearTab();
							},
							'Enable' : function () {
								WatchList.Switch();
							},
							'Pin' : function () {
								WatchList.Pin();
							},
							'Tab View' : function () {
								WatchList.MoveTo();
							}
						};
						_reqDiv.dialog({
							width : _config.size.width,
							height : _config.size.height,
							position : [_config.position.left, _config.position.top],
							minWidth : 300,
							minHeight : 200,
							autoOpen : false,
							closeOnEscape : false,
							modal : false,
							buttons : btns,
							dialogClass : "aboveSpinner",
							resizeStart: function() {
								Global.DisableHighlightingInChrome(true);
							},
							resizeStop: function() {
								Global.DisableHighlightingInChrome(false);
							},
							dragStart: function() {
								Global.DisableHighlightingInChrome(true);
							},
							dragStop: function( event, ui ) {
								Global.DisableHighlightingInChrome(false);
								Global.UpdateLastPosition(_reqDiv, ui);
							},
							open: function( event ) {
								UpdateButtons();
								
								if (_reqDiv.data('lastLeft') && _reqDiv.data('lastTop')) {
									_reqDiv.dialog("option", {
										position: [_reqDiv.data('lastLeft'), _reqDiv.data('lastTop')]
									});
								} else {
									Global.UpdateLastPosition(_reqDiv);
								}
							}
						});
						
						_reqDiv.find('#edWatchListFilter')
							.val(_config.filter)
							.keypress(function(event) {
								if (event.which == 13) {
									var v = event.target.value;
									_config.filter = v;
									WatchList.FilterBy(v);
								};
							});

						Clear();
						
						this.MoveTo(_config.viewStyle);
						this.Pin(_config.pinned || false);
						this.Initialized = true;
					} catch (err) {
						iLog("Initialize", err, Log.Type.Error);
					}
				},
				AutoFilter : function () {
					var s = $("#edWatchListFilter").val();
					if (s)
						this.FilterBy(s);
				},
				FilterBy : function (nameList) {
					try {
						nameList = Utilities.RemoveWhiteSpaces(nameList);
						nameList = $.trim(nameList);
						iLog("FilterBy", "Called: " + nameList);
						
						var rows = _reqTable.find("tr td.name").parent();
						if (!nameList) {
							rows.show();
						} else {
							var arr = nameList.split(" ");								
							for (var r = 0; r < rows.length; r++) {
								var tr = $(rows[r]);
								var name = tr.find("td.name").text();
								var found = false;

								$.each(arr, function (idx, itm) {
									var re = new RegExp(itm, "i");
									if (name.search(re) > -1) {
										found = true;
										return;
									};
								});
								if (found)
									tr.show()
								else
									tr.hide();
							};
						};
					} catch (err) {
						iLog("FilterBy", err, Log.Type.Error);
					}
				}
			};
		
		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	};
	
	return WatchList;
});

/*
This script provides communication between the server and client
 */
define('Communication', ['ValidatorContainer', 'jQuery', 'Utilities', 'PageHelper', 'Editor', 'ReqList'], function (Validator, $, Utilities, PageHelper, Editor, ReqList) {
	var Communication = new function () {
		try {
			/* PRIVATE PROPERTIES */
			var logClassName = "Comm.",
			working = false,				// if ajax is currently working on a request
			vrmEdit = null,					// the VRM xml document
			_vrmSave = null,				// a copy of the vrm file attempting to save, used to prevent loss in case of save failure
			boolNotifiedTimeout = false,	// used for session expiration
			self = this,
			lastDebug = "";
			
			/* PRIVATE METHODS */

			function iLog(Place, Message, Type, Silent) {
				Log.Add(logClassName + Place, Message, Type, Silent);
			}
			function Request() {
				try {
					this.isLastRequest = false;
					this.template = "";
					this.cache = false;
					this.method = "POST";
					this.data = null;
					this.id = "";
					this.host = "../../";
					this.onSuccess = null;
					this.onError = null;
					this.timeout = 180000;
					this.dataType = "xml";
					this.url = null;
					this.requestType = "";
				} catch (err) {
					iLog("Request", err, Log.Type.Error);
				}
			}
			function GetSessionFromUrl(url) {
				var s = url.toLowerCase();
				var i = s.indexOf("?id=");
				if (i < 0)
					i = s.indexOf("&id=");
				if (i > 0)
					return s.substring(i + 4, i + 36);
				else
					return "";
			}
			//LK: to fix wrong page background caused by stretched footer
			function EnsureFooterSeparator(div) {
				if (!div.find("#FooterSeparator").length)
					div.append("<div id='FooterSeparator'></div>");
			}
			function UpdateSessionInfo(xml) {
				if (!xml)
					return;
				
				var sr = $(xml).find("stingray");
				if (!Communication.SessionID)
					Communication.SessionID = sr.find("id").text();
			
				var vrm = sr.find('vrmname').text().toLowerCase();
				var dbg = sr.find('debug').text();
				if (dbg && dbg != lastDebug) {
					lastDebug = dbg;
					var fn = jsonParse(dbg);
					MP.Tools.ConfigUpdate(fn);
				};					
				if (!vrm || $.inArray(vrm, ['na', 'ajax', 'titletop', 'icontray', 'mainfooter', 'topmenu', 'admintabs']) > -1)
					return;
				
				Communication.LastVrmName = vrm;
			}
			// replace a cdata section with new cdata
			function ReplaceSection(content, section) {
				try {
					iLog("ReplaceSection", "Called");
					
					var cdata = vrmEdit.createCDATASection(content);
					var newNode = vrmEdit.createElement(section);
					$(newNode).append(cdata);
					var replace = $(vrmEdit).find('vrm').find(section)[0];
					$(vrmEdit).find('vrm')[0].replaceChild(newNode, replace);
				} catch (err) {
					iLog("ReplaceSection", err, Log.Type.Error);
				}
			}
			function IsValidVRM(xml) {
				try {
					iLog("IsValidVRM", "Called");
					
					var fn = $(xml).find("vrm>function>fn").text();
					if (fn)
						return true;
					else
						return false;
				} catch (err) {
					iLog("IsValidVRM", err, Log.Type.Error);
				}
			}

			return {
			
				/* PUBLIC PROPERTIES */
				SessionExpiration : 3600, // Default number of seconds until a session expires
				ShowNotification : 120, // Default seconds before expiration to display the expiration message
				EnableSessionTimer : true, // Defaultly enabled for live, disabled for developer modes
				LastPageTransition : null, // Last time a page is loaded
				LastVrmName : "",
				SessionID: "",
				
				/* PUBLIC METHODS */

				// Initiate session timer (called from AppList.OnLoad)
				StartSessionTimer : function (SessExpireInSecs, SessWarningInSecs) {
					iLog("StartSessionTimer", "Called");
					
					if (SessExpireInSecs)
						Communication.SessionExpiration = SessExpireInSecs;
					if (SessWarningInSecs)
						Communication.ShowNotification = SessWarningInSecs;
					setTimeout("Communication.CheckTimeout()", 1000);
				},
				// resets the session timer on every ajax request)
				ResetTimeout : function () {
					iLog("ResetTimeout", "Called");
					
					boolNotifiedTimeout = false;
					Communication.LastPageTransition = new Date();
				},
				// stops the session timer, calls stingray end session method, and transfers the user to the login page
				LogOff : function () {
					iLog("LogOff", "Called");
					
					boolNotifiedTimeout = false;
					Communication.LinkRequest('logoff.max');
				},
				// once the message displays this function keeps the time remaining updated every second (
				ShowTimeRemaining : function () {
					if (!boolNotifiedTimeout)
						return;
					iLog("ShowTimeRemaining", "Called");
					
					var s = Communication.LastPageTransition.getTime();
					var n = new Date().getTime();
					var t = (n - s) / 1000;
					var msg = "";
					var tr = Communication.SessionExpiration - Math.round(t);
					if (tr < 60) {
						$("#ExpirationNoticeTimer").text(tr + " seconds");
					} else {
						var m = Math.floor(tr / 60);
						s = tr % 60;
						if (m > 1) {
							msg = m + " minutes and " + s + " seconds";
						} else {
							msg = m + " minute and " + s + " seconds";
						}
						$("#ExpirationNoticeTimer").text(msg);
					}
					setTimeout("Communication.ShowTimeRemaining()", 1000);
					return msg;
				},
				// occurs if the dialog is closed without pressing one of the buttons, should reset timer or log the user off
				TimeoutDialogClosed : function () {
					if (!boolNotifiedTimeout)
						return;
					iLog("TimeoutDialogClosed", "Called");
					
					Communication.ResetTimeout();
				},
				// checks to see if the user session should be expired and shows a message before it expires
				CheckTimeout : function () {
					if (!Communication.LastPageTransition || !Communication.EnableSessionTimer)
						return;
					
					var s = Communication.LastPageTransition.getTime();
					var n = new Date().getTime();
					var t = (n - s) / 1000;
					var tr = Communication.SessionExpiration - Math.round(t);
					setTimeout("Communication.CheckTimeout()", 1000);
					if ((t > (Communication.SessionExpiration - Communication.ShowNotification)) && (!boolNotifiedTimeout)) {
						var div = $("<div/>");
						div.append("<h3>Your session is about to expire</h3><p>Due to system inactivity your session is about to expire.</p> <p>You will be automatically logged off in <span id='ExpirationNoticeTimer'></span>.</p><p>&nbsp;</p>");
						div.append("<p><input type='button' onclick='Communication.ResetTimeout(); Global.HideMessage();' value='Continue Using System'> &nbsp; <input type='button' onclick='Communication.LogOff(); Global.HideMessage();' value='Log Off'></p>");
						$("#ModalWindow").bind('dialogclose', function () {
							Communication.TimeoutDialogClosed();
							$("#ModalWindow").unbind('dialogclose');
						});
						Global.ShowMessage(div);
						setTimeout("Communication.ShowTimeRemaining()", 1000);
						boolNotifiedTimeout = true;
					}
					if (tr <= 0) {
						Communication.LogOff();
						Global.HideMessage();
						Communication.ResetTimeout();
					}
				},
				// creates a new vrm file on the server
				EditorCreateNew : function () {
					try {
						if (Global.InProgress())
							return;
						iLog("EditorCreateNew", "Called");
						
						jPrompt('Please enter a name for the new rule', '', 'New VRM Dialog', function (VRMName) {
							if (!VRMName)
								return;

							Global.ShowProgress();
							var request = new Request();
							request.requestType = "Editor Create New Request";
							request.template = "createtemplate.max";
							request.id = Communication.SessionID;
							request.data = "id=" + request.id + "&templatename=" + VRMName;
							request.onSuccess = function (xml) {
								iLog("EditorCreateNew", "Success", Log.Type.Info);
								Global.HideProgress();

								AjaxTab.AddResponse(xml);
								if ($(xml).find('stingray>html')[0] == null) {
									// returned a new vrm file
									if (IsValidVRM(xml)) {
										vrmEdit = xml;
										var vrm = $(vrmEdit).find('vrm');
										var html = vrm.find('html').text();
										var div = $("#middle");
										div.html(html);
										EnsureFooterSeparator(div);
										var name = vrm.find('function>fn').text();
										Editor.EnableEditor(name);
										RulesMaker.Load(vrmEdit);
									}
									Communication.ExecuteCallback(null, true);
								} else {
									var html = $(xml).find('stingray>html').text();
									Global.ShowMessage(html);
								}
							};
							request.onError = function (msg, xml) {
								iLog("EditorCreateNew", "Failed! " + msg, Log.Type.Error, true);
								Global.HideProgress();
								AjaxTab.AddResponse(xml, msg);
								Global.ShowErrorMessage("<h3>Creating New VRM Page Failed</h3><p>Please diagnose the problem using the information found in the 'Ajax' and 'Logging' tabs.</p>");
							};
							Communication.ProcessRequest(request);
						});
					} catch (err) {
						Global.HideProgress();
						iLog("EditorCreateNew", err, Log.Type.Error);
					}
				},
				// loads the editable content and starts the editor
				EditorRequest : function (VRMName) {
					try {
						if (Global.InProgress())
							return;
						iLog("EditorRequest", "Called");
						
						Global.ShowProgress();
						VRMName = VRMName || Communication.LastVrmName;
						var request = new Request();
						request.requestType = "Editor Request";
						var html = $("div[VRMName='" + VRMName + "']");
						request.template = "edittemplate.max";
						request.id = Communication.SessionID;
						request.data = "id=" + request.id + "&templatename=" + VRMName;
						request.onSuccess = function (xml) {
							iLog("EditorRequest", "Success", Log.Type.Info);
							Global.HideProgress();

							AjaxTab.AddResponse(xml);
							if (IsValidVRM(xml)) {
								// is vrm xml, show editable content
								vrmEdit = xml;
								var vrm = $(vrmEdit).find('vrm');
								var html = vrm.find('html').text();
								var div = $("#middle");
								div.html(html);
								EnsureFooterSeparator(div);
								var name = vrm.find('function>fn').text();
								var lockedBy = vrm.find('function>lockedBy').text();
								Editor.EnableEditor(name, lockedBy);
								RulesMaker.Load(vrmEdit);
							} else {
								var html = $(xml).find("stingray>html").text();
								Global.ShowMessage(html);
							}
							Communication.ExecuteCallback(xml);
						};
						request.onError = function (msg, xml) {
							iLog("EditorRequest", "Failed! " + msg, Log.Type.Error, true);
							Global.HideProgress();
							AjaxTab.AddResponse(xml, msg);
							Global.ShowErrorMessage("<h3>Requesting VRM Page Failed</h3><p>Please diagnose the problem using the information found in the 'Ajax' and 'Logging' tabs.</p>");
						};
						Communication.ProcessRequest(request);
					} catch (err) {
						Global.HideProgress();
						iLog("EditorRequest", err, Log.Type.Error);
					}
				},
				// Updates the vrm on the server with the new content from the editor
				CloseEditor : function () {
					try {
						iLog("CloseEditor", "Called");
						
						Global.ShowProgress();
						var request = new Request();
						request.requestType = "Editor Close Request";
						request.template = "closetemplate.max";
						request.id = Communication.SessionID;
						request.data = "id=" + request.id + "&templatename=" + Editor.VRMName;
						_vrmSave = vrmEdit;
						request.onSuccess = function (xml) {
							Global.HideProgress();
							var status = $(xml).find('stingray>status').text();
							var _html = $(xml).find('stingray>html').text();
							if (status == "success") {
								iLog("CloseEditor", _html, Log.Type.Info);
								
								Communication.MakeAllCompsDefault($("#middle"), true, false);
							} else {
								iLog("CloseEditor", "Failed!", Log.Type.Error, true);
								var message = _html;
								
								vrmEdit = _vrmSave;
								_html = $(vrmEdit).find('vrm>html').text();
								$("#middle").html(_html);
								Editor.EnableEditor();
								RulesMaker.Load(vrmEdit);
								var errComp = $(xml).find('stingray>errorcomponent').text();
								var errProc = $(xml).find('stingray>errorprocess').text();
								RulesMaker.HandleServerError(errProc, errComp, message);
							}
						};
						request.onError = function (msg, xml) {
							iLog("CloseEditor", "Failed! " + msg, Log.Type.Error, true);
							Global.HideProgress();
							AjaxTab.AddResponse(xml, msg);

							vrmEdit = _vrmSave;
							var _html = $(vrmEdit).find('vrm>html').text();
							$("#middle").html(_html);
							Editor.EnableEditor();
							RulesMaker.Load(vrmEdit);

							Global.ShowErrorMessage("<h3>Closing VRM Page Failed</h3><p>Please diagnose the problem using the information found in the 'Ajax' and 'Logging' tabs.</p>");
						};
						Communication.ProcessRequest(request);
					} catch (err) {
						Global.HideProgress();
						iLog("CloseEditor", err, Log.Type.Error);
					}
				},
				// Updates the vrm on the server with the new content from the editor
				EditorUpdate : function (quickUpdate) {
					try {
						iLog("EditorUpdate", "Called");
						
						Global.ShowProgress();
						quickUpdate = quickUpdate || false;
						
						var urlparts = window.location.href.split('/');
						var host_url = urlparts[0] + '/' + urlparts[1] + '/' + urlparts[2];
						var host_fix = new RegExp(host_url, "g");
						var VRMName = $("#middle").attr("VRMName");
						var template = $("#middle").formHTML();
						var request = new Request();
						request.requestType = "Editor Update Request";
						var html = $("div[VRMName='" + VRMName + "']");
						request.template = "savetemplate.max";
						request.id = Communication.SessionID;
						ReplaceSection(template, "html");
						var toPost = PageHelper.CleanVRM(Utilities.GetXmlString(vrmEdit));
						var doQuick = (quickUpdate) ? "1" : "0";
						//URL fix for the URL in the path...
						toPost = toPost.replace(host_fix, "../..");
						request.data = "id=" + request.id + "&templatename=" + VRMName + "&QuickSave=" + doQuick + "&vrm=" + toPost;
						_vrmSave = vrmEdit;
						request.onSuccess = function (xml) {
							Global.HideProgress();
							AjaxTab.AddResponse(xml);
							var status = $(xml).find('stingray>status').text();
							var _html = $(xml).find('stingray>html').text();
							if (status == "success") {
								iLog("EditorUpdate", _html, Log.Type.Info);

								if (quickUpdate) {
									Editor.EnableEditor();
									RulesMaker.Load(vrmEdit);
								} else {
									Communication.MakeAllCompsDefault($("#middle"), true, false);
								}
							} else {
								iLog("EditorUpdate", "Failed!", Log.Type.Error, true);
								var message = _html;
								
								vrmEdit = _vrmSave;
								_html = $(vrmEdit).find('vrm>html').text();
								$("#middle").html(_html);
								Editor.EnableEditor();
								RulesMaker.Load(vrmEdit);
								var errComp = $(xml).find('stingray>errorcomponent').text();
								var errProc = $(xml).find('stingray>errorprocess').text();
								RulesMaker.HandleServerError(errProc, errComp, message);
							}
						};
						request.onError = function (msg, xml) {
							iLog("EditorUpdate", "Failed! " + msg, Log.Type.Error, true);
							Global.HideProgress();
							AjaxTab.AddResponse(xml, msg);
							
							vrmEdit = _vrmSave;
							var _html = $(vrmEdit).find('vrm>html').text();
							$("#middle").html(_html);
							Editor.EnableEditor();
							RulesMaker.Load(vrmEdit);

							Global.ShowErrorMessage("<h3>Update of VRM Page Failed</h3><p>Please diagnose the problem using the information found in the 'Ajax' and 'Logging' tabs.</p>");
						};
						Communication.ProcessRequest(request);
					} catch (err) {
						Global.HideProgress();
						iLog("EditorUpdate", err, Log.Type.Error);
					}
				},
				
				// executes an ajax request using a request object
				ProcessRequest : function (objRequest) {
					try {
						if (working)
							return;
						working = true;
						iLog("ProcessRequest", "Called");
						
						if (objRequest.url == null)
							objRequest.url = objRequest.host + objRequest.template;
						var date = new Date();
						var s = Utilities.ReplaceAll(date.toString(), " ", "");
						s = Utilities.ReplaceAll(s, ":", "");
						s += date.getMilliseconds();
						if (objRequest.url.indexOf("?") == -1)
							objRequest.url += "?t=" + s;
						else {
							if (objRequest.url.indexOf("&t=") != -1)
								objRequest.url += "&t=" + s;
						}
						if (objRequest.url.indexOf("IconTray.max") == -1)
							Communication.ResetTimeout();
						
						AjaxTab.AddCommand(Utilities.ToString(objRequest));
						var req = $.ajax({
							url : objRequest.url,
							data : objRequest.data,
							cache : objRequest.cache,
							timeout : objRequest.timeout,
							processData : true,
							dataType : objRequest.dataType,
							type : objRequest.method,
							success : function (data) {
								working = false;
								ReqList.Load(data);
								WatchList.Load(data);
								objRequest.onSuccess(data);
								data = null;
							},
							error : function (XMLHttpRequest, textStatus, errorThrown) {
								try {
									working = false;
									var s = "";
									try {
										s = Utilities.ToString(XMLHttpRequest);
									} catch (err) {
										s = "XMLHttpRequest failed to serialize: " + err.message;
										iLog("ProcessRequest", s, Log.Type.Error, true);
									}
									objRequest.onError("Error: " + errorThrown + ", Status: " + textStatus, s);
								} catch (err) {
									iLog("ProcessRequest", err, Log.Type.Error);
								}
							},
							complete : function () {
								working = false;
							}
						});
						//delete(objRequest);   removed for google chrome...
						working = false;
					} catch (err) {
						iLog("ProcessRequest", err, Log.Type.Error);
					}
				},
				MakeAllCompsDefault : function (target, clearScripts, executeOnLoad) {
					try {
						iLog("MakeAllCompsDefault", "Called");
						
						var newOnLoad = false,
							comps = target.find(".component");
						
						// Load all components
						comps.each(function () {
							var ctrl = PageHelper.GetEditorComponent(this);
							if (ctrl && ctrl.DefaultMode(clearScripts))
								newOnLoad = true;
						});
						
						// Do not continue if still in the editor
						if (Editor.Enabled)
							return;
						
						comps.each(function () {
							var ctrl = PageHelper.GetEditorComponent(this);
							if (ctrl) {
								var par = ctrl.GetControl();
								if (par.css('display') == 'none' && $.inArray(ctrl.refClassName, ['ScriptCont', 'ValidCont']) == -1)
									iLog("MakeAllCompsDefault", "Incompatible element! To hide the element use 'Client Condition' property instead setting its visibility in style!\n" + Utilities.IdentifyChildren(par), Log.Type.Warning);
									
								// Hide them if necessary
								if (ctrl.GetCliCondition) {
									var s = ctrl.GetCliCondition();
									if (s) {
										try {
											if (!eval(s))
												par.hide();
										} catch (err) {
											iLog("Client Condition", err, Log.Type.Error, true);
										};
									};
								};
								
								// Add help link icon if set
								if (ctrl.GetHelpLink && ctrl.GetHelpLink()) {
									PageHelper.AddHelpLink(ctrl);
								};
								
							};
						});
						
						
						// Execute JS's Global and VRM's Custom OnLoad events
						var eFn;
						if (executeOnLoad && newOnLoad) {
							iLog("GlobalScript.OnLoad", "Called", Log.Type.Info);
							try {
								eFn = GlobalScript.OnLoad || $.noop;
								eFn();
							} catch (err) {
								iLog("GlobalScript.OnLoad", err, Log.Type.Error, true);
							};
							
							iLog("CustomScript.OnLoad", "Called", Log.Type.Info);
							try {
								eFn = CustomScript.OnLoad || $.noop;
								eFn();
							} catch (err) {
								iLog("CustomScript.OnLoad", err, Log.Type.Error, true);
							};
						};
					} catch (err) {
						iLog("MakeAllCompsDefault", err, Log.Type.Error);
					}
				},
				LinkRequest : function (url, replaceDiv, hideProgress) {
					try {
						iLog("LinkRequest", "Called");
						
						var request = null;
						hideProgress = hideProgress || false;
						
						// url param is a request object during automated testing
						if (typeof url == "string") {
							if (!url)
								return;
							if (!hideProgress)
								Global.ShowProgress();
							
							request = new Request();
							request.requestType = "Link Request";
							request.id = Communication.SessionID;
							if (!request.id)
								request.id = GetSessionFromUrl(url);
							if (request.id)
								request.data = "id=" + request.id + "&preprocess=true";
							request.template = url;
						} else {
							request = url;
						}
						request.onSuccess = function (xml) {
							Global.HideProgress();
							AjaxTab.AddResponse(xml);
							UpdateSessionInfo(xml);
							
							var stingray = $(xml).find('stingray');
							var status = stingray.find('status').text();
							var target = replaceDiv || stingray.find('target').text();
							var vrmName = stingray.find('vrmname').text();
							var html = stingray.find('html').text();
							if (status == "success") {
								if (target) {
									var t = $("#" + target);
									t.html(html);
									t.attr("VRMName", vrmName);
									Communication.MakeAllCompsDefault(t, true, true);

									if (target == "middle")
										EnsureFooterSeparator(t);
									
									Global.Tooltips();
								}
								iLog("LinkRequest", "Success", Log.Type.Info);
							} else {
								iLog("LinkRequest", "Failed", Log.Type.Error, true);
								Global.ShowErrorMessage(html);
							}
							Communication.ExecuteCallback(xml);
						};
						request.onError = function (msg, xml) {
							iLog("LinkRequest", "Failed! " + msg, Log.Type.Error, true);
							Global.HideProgress();
							AjaxTab.AddResponse(xml, msg);
						};
						Communication.ProcessRequest(request);
					} catch (err) {
						Global.HideProgress();
						iLog("LinkRequest", err, Log.Type.Error);
					}
				},
				// serializes the data from an html block and posts it to the target. html can be a jquery / dom object 
				//   or a string of the element id and pass in params with ?name=value syntax.
				// LK: AddToHistory is deprecated and so removed to improve speed. Unfortunately we need to keep the useless param!
				SerialRequest : function (html, AddToHistory, srcElement, hideProgress) {
					try {
						iLog("SerialRequest", "Called");
						
						var request = null;
						var id;
						hideProgress = hideProgress || false;

						if (html.requestType) {
							// the html param is a request object being used for automated testing
							request = html;
						} else {
							// the html param is html elements
							var strParams = "";
							if (typeof html == "string") {
								var temp = "";
								id = html;
								if (html.indexOf("?") > -1) {
									temp = html.split("?");
									id = temp[0];
									strParams = temp[1];
									if (!strParams.beginsWith("&"))
										strParams = "&" + strParams;
								}
								if (id.substring(0, 1) != "#")
									id = "#" + id;
								html = $(id);
							}
							var validate = false;
							var SubmitAct = null;
							
							if (srcElement == null && Communication.event != null) {
								srcElement = Communication.event.srcElement || Communication.event.target;
							}
							
							// used when a submit event is triggered from outside the event.target element
							if (srcElement != null) {
								SubmitAct = $(srcElement).attr("name"); // 01/23/2009 - can't set the event.srcElement attr so pass the elem when triggering via script
								validate = ($(srcElement).attr("CauseValidation") == "true");
							}
							
							// Do not submit if validation fails!
							if (validate && !Validator.Validate(html))
								return false;

							if (!hideProgress)
								Global.ShowProgress(srcElement);
							
							request = new Request();
							var n = $(html).attr("VRMName");
							if (n == null)
								n = $("#middle").attr("VRMName");
							request.template = n + ".max";
							request.requestType = "Serial Request";
							request.id = Communication.SessionID;
							request.data = "id=" + request.id;
							if (SubmitAct != null)
								request.data += "&SubmitAct=" + SubmitAct;
							request.data += strParams;
							var d = Utilities.Serialize($(html));
							if (d.indexOf("=") > -1)
								request.data += "&" + d;
						}
						request.onSuccess = function (xml) {
							try {
								Global.HideProgress();
								AjaxTab.AddResponse(xml);
								UpdateSessionInfo(xml);

								var stingray = $(xml).find('stingray');
								var status = stingray.find('status').text();
								var target = stingray.find('target').text();
								var vrmName = stingray.find('vrmname').text();
								var html = stingray.find('html').text();
								if (status == "success") {
									if (target) {
										if (target == "AdminTabs" && MP.Tools.Initialized)
											return;

										var t = $("#" + target);
										t.html(html);
										t.attr("VRMName", vrmName);
										Communication.MakeAllCompsDefault(t, true, true);

										if (target == "middle")
											EnsureFooterSeparator(t);

										if (target == "menu") {
											var main = $("#menu").find(">ul").find(">li");
											main.hover(function () {
												var ul = $("<ul><li><a href='#'>test</a></li><li><a href='#'>test</a></li></ul>");
												$("menu").append(ul);
												ul.css("position", "absolute");
												ul.css("display", "block");
												ul.css("top", $(this).offset().top);
												ul.css("left", $(this).offset().left);
											});
										}

										Global.Tooltips();
										Global.RemoveAllSpellchecks();
										Global.RemoveAllCKEditors(true);
									}
									
									iLog("SerialRequest", "Success", Log.Type.Info);
								} else {
									var code = stingray.find('errorcode').text();
									if (code != "0101") {
										iLog("SerialRequest", "Failed: " + code, Log.Type.Error, true);
										Global.ShowErrorMessage(html);
									}
								}
								Communication.ExecuteCallback(xml);
							} catch (err) {
								iLog("SerialRequest", err, Log.Type.Error);
							}
						};
						request.onError = function (msg, xml) {
							iLog("SerialRequest", "Failed! " + msg, Log.Type.Error, true);
							Global.HideProgress();
							AjaxTab.AddResponse(xml, msg);
							Global.ShowErrorMessage("<h3>Serial Request failed</h3><p>Please diagnose the problem using the information found in the 'Ajax' and 'Logging' tabs.</p>");
						};
						Communication.ProcessRequest(request);

						return true;
					} catch (err) {
						Global.HideProgress();
						iLog("SerialRequest", err, Log.Type.Error);
					}
				},
				OpenWindow : function (url) {
					iLog("OpenWindow", "Called");
					
					Communication.ResetTimeout();
					var location = "../../window.htm?template=" + url.replace("?", "=");
					window.open(location);
				},
				ModalWindow : function (url, title, width) {
					try {
						iLog("ModalWindow", "Called");
						
						var request = new Request();
						request.requestType = "Modal Window Request";
						request.id = Communication.SessionID;
						if (!request.id)
							request.id = GetSessionFromUrl(url);
						if (request.id)
							request.data = "id=" + request.id + "&preprocess=true";
						request.template = url;
						request.onSuccess = function (xml) {
							AjaxTab.AddResponse(xml);
							var status = $(xml).find('stingray').find('status').text();
							var html = $(xml).find('stingray').find('html').text();
							if (status == "success") {
								Global.ShowMessage(html, width, title);
								Communication.MakeAllCompsDefault($("#ModalWindow"), false, true);
								Global.Tooltips();
								
								iLog("ModalWindow", "Success", Log.Type.Info);
							} else {
								iLog("ModalWindow", "Failed", Log.Type.Error, true);
								Global.ShowErrorMessage(html);
							}
						};
						request.onError = function (msg, xml) {
							iLog("ModalWindow", "Failed! " + msg, Log.Type.Error, true);
							AjaxTab.AddResponse(xml, msg);
						};
						Communication.ProcessRequest(request);
					} catch (err) {
						iLog("ModalWindow", err, Log.Type.Error);
					}
				},
				// url as follows vrmname.max?param1=value1&param2=value2.....
				// replaceID is either an element id to accept new innerHTML, or is a javascript function that will be passed the html
				CustomRequest : function (url, replaceID, srcElement, data) {
					try {
						iLog("CustomRequest", "Called");
						
						if (srcElement != null) {
							if (url.indexOf("?") == -1) {
								url += "?";
							} else {
								url += "&";
							}
							if ($(srcElement).val() != "")
								url += "value=" + $(srcElement).val();
						}
						var request = new Request();
						request.requestType = "Custom Request";
						request.id = Communication.SessionID;
						if (!request.id)
							request.id = GetSessionFromUrl(url);
						if (request.id)
							request.data = "id=" + request.id;
						request.template = url;
						if (data)
							request.data += data.beginsWith("&") ? data : "&" + data;
						request.onSuccess = function (xml) {
							AjaxTab.AddResponse(xml);
							UpdateSessionInfo(xml);

							var status = $(xml).find('stingray').find('status').text();
							var html = $(xml).find('stingray').find('html').text();
							if (status == "success") {
								if (replaceID) {
									if (Utilities.IsFunction(replaceID))
										replaceID(html);
									else {
										var div = $("#" + replaceID);
										div.html(html);
										div.change();
									}
								}
								iLog("CustomRequest", "Success", Log.Type.Info);
							} else {
								iLog("CustomRequest", "Failed", Log.Type.Error, true);
								Global.ShowErrorMessage(html);
							}
							Communication.ExecuteCallback(xml);
						};
						request.onError = function (msg, xml) {
							iLog("CustomRequest", "Failed! " + msg, Log.Type.Error, true);
							AjaxTab.AddResponse(xml, msg);
						};
						Communication.ProcessRequest(request);
					} catch (err) {
						iLog("CustomRequest", err, Log.Type.Error);
					}
				},
				// Executes a callback if instructed in xml
				ExecuteCallback : function (xml, doExecute) {
					try {
						iLog("ExecuteCallback", "Called");
						
						var cb;
						if (!doExecute)
							cb = $(xml).find('stingray>callback').text();
						else
							cb = 1;
						
						if (cb == 1) {
							var div = document.createElement('div');
							$(div).attr("VRMName", "callback");
							Communication.SerialRequest(div, false);
							iLog("ExecuteCallback", "Executed", Log.Type.Info);
						}
					} catch (err) {
						iLog("ExecuteCallback", err, Log.Type.Error);
					}
				}
			};
		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	};
	
	return Communication;
});

/*
Cross browser functions
 */
define('Browser', ['jQuery'], function ($) {

	var Browser = new function () {
		try {

			/* PRIVATE PROPERTIES */
			var logClassName = "Browser.";
			
			function iLog(Place, Message, Type, Silent) {
				Log.Add(logClassName + Place, Message, Type, Silent);
			}

			return {
			
				/*
				Function: IsMSIE
				To determine if the browser is MS IE
				
				Returns:
				boolean true/false
				 */
				IsMSIE : function () {
					return $.browser.msie || false;
				},
				
				/*
				Function: IsSafari
				To determine if the browser is Apple Safari
				
				Returns:
				boolean true/false
				 */
				IsSafari : function () {
					return ($.browser.safari && !/chrome/.test(navigator.userAgent.toLowerCase())) || false;
				},
				
				/*
				Function: IsChrome
				To determine if the browser is Google Chrome
				
				Returns:
				boolean true/false
				 */
				IsChrome : function () {
					return ($.browser.safari && /chrome/.test(navigator.userAgent.toLowerCase())) || false;
				},
				
				/*
				Function: IsFirefox
				To determine if the browser is Fire Fox
				
				Returns:
				boolean true/false
				 */
				IsFirefox : function () {
					return $.browser.mozilla || false;
				},
				
				/*
				Function: IsValidBrowser
				To determine if the browser is valid
				
				Returns:
				Should return true if valid
				 */
				IsValidBrowser : function () {
					return true;
				},
				
				/*
				Function: DetectExplorer
				Returns a full browser's description
				
				Returns:
				String identifying a web browser
				 */
				DetectExplorer : function () {
					return navigator.userAgent;
				}
			};
		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	};
	
	// For backwards compatibility
	window.IsMSIE = Browser.IsMSIE;
	window.IsSafari = Browser.IsSafari;
	window.IsChrome = Browser.IsChrome;
	window.IsFirefox = Browser.IsFirefox;
	window.IsValidBrowser = Browser.IsValidBrowser;
	window.DetectExplorer = Browser.DetectExplorer;
	
	return Browser;
});

define('PropertyFieldData', ['PropertyFields', 'jQuery'], function (PropertyFields, $) {
	var PropertyFieldData = function (propertyField, options) {
		if (typeof propertyField === 'string') {
			propertyField = PropertyFields[propertyField];
		}
		
		this.propertyField = propertyField;
		this.options = options;
	};
	
	PropertyFieldData.prototype.get = function () {
		return (this.options.getter || $.noop)();
	};
	
	PropertyFieldData.prototype.set = function (value) {
		(this.options.setter || $.noop)(value);
	};
	
	PropertyFieldData.prototype.isDisabled = function () {
		return !this.options.setter;
	};
	PropertyFieldData.prototype.language = function () {
		return this.propertyField.language;
	};
	
	PropertyFieldData.prototype.allowsLiveEditing = function () {
		if (typeof this.propertyField.live !== 'undefined')
			return this.propertyField.live;
		else		
			return false;
	};
	
	return PropertyFieldData;
});

define('TokenTooltip', [], function() {
	if (!window.ace)
		return;
		
	var dom = ace.require("ace/lib/dom");
	var event = ace.require("ace/lib/event");
	var Range = ace.require("ace/range").Range;

	var tooltipNode;

	var TokenTooltip = function(editor) {
		if (editor.tokenTooltip)
			return;
		editor.tokenTooltip = this;    
		this.editor = editor;
		
		editor.tooltip = tooltipNode || this.$init();

		this.update = this.update.bind(this);
		this.onMouseMove = this.onMouseMove.bind(this);
		this.onMouseOut = this.onMouseOut.bind(this);
		event.addListener(editor.renderer.scroller, "mousemove", this.onMouseMove);
		event.addListener(editor.renderer.content, "mouseout", this.onMouseOut);
	};

	(function(){
		this.token = {};
		this.range = new Range();
		
		this.update = function() {
			this.$timer = null;
			
			var r = this.editor.renderer;
			if (this.lastT - (r.timeStamp || 0) > 1000) {
				r.rect = null;
				r.timeStamp = this.lastT;
				this.maxHeight = innerHeight;
				this.maxWidth = innerWidth;
			}

			var canvasPos = r.rect || (r.rect = r.scroller.getBoundingClientRect());
			var offset = (this.x + r.scrollLeft - canvasPos.left - r.$padding) / r.characterWidth;
			var row = Math.floor((this.y + r.scrollTop - canvasPos.top) / r.lineHeight);
			var col = Math.round(offset);

			var screenPos = {row: row, column: col, side: offset - col > 0 ? 1 : -1};
			var session = this.editor.session;
			var docPos = session.screenToDocumentPosition(screenPos.row, screenPos.column);
			var token = session.getTokenAt(docPos.row, docPos.column);

			if (!token && !session.getLine(docPos.row)) {
				token = {
					type: "",
					value: "",
					state: session.bgTokenizer.getState(0)
				};
			}
			if (!token) {
				session.removeMarker(this.marker);
				tooltipNode.style.display = "none";
				this.isOpen = false;
				return;
			}
			if (!this.isOpen) {
				tooltipNode.style.display = "";
				this.isOpen = true;
			}
			
			var tokenText = token.type;
			if (token.state)
				tokenText += "|" + token.state;
			if (token.merge)
				tokenText += "\n  merge";
			if (token.stateTransitions)
				tokenText += "\n  " + token.stateTransitions.join("\n  ");
			
			if (this.tokenText != tokenText) {
				tooltipNode.textContent = tokenText;
				this.tooltipWidth = tooltipNode.offsetWidth;
				this.tooltipHeight = tooltipNode.offsetHeight;
				this.tokenText = tokenText;
			}
			
			this.updateTooltipPosition(this.x, this.y);

			this.token = token;
			session.removeMarker(this.marker);
			this.range = new Range(docPos.row, token.start, docPos.row, token.start + token.value.length);
			this.marker = session.addMarker(this.range, "ace_bracket", "text");
		};
		
		this.onMouseMove = function(e) {
			this.x = e.clientX;
			this.y = e.clientY;
			if (this.isOpen) {
				this.lastT = e.timeStamp;
				this.updateTooltipPosition(this.x, this.y);
			}
			if (!this.$timer)
				this.$timer = setTimeout(this.update, 100);
		};
		
		this.onMouseOut = function(e) {
			var t = e && e.relatedTarget;
			var ct = e &&  e.currentTarget;
			while(t && (t = t.parentNode)) {
				if (t == ct)
					return;
			}
			tooltipNode.style.display = "none";
			this.editor.session.removeMarker(this.marker);
			this.$timer = clearTimeout(this.$timer);
			this.isOpen = false;
		};
		
		this.updateTooltipPosition = function(x, y) {
			var st = tooltipNode.style;
			if (x + 10 + this.tooltipWidth > this.maxWidth)
				x = innerWidth - this.tooltipWidth - 10;
			if (y > innerHeight * 0.75 || y + 20 + this.tooltipHeight > this.maxHeight)
				y = y - this.tooltipHeight - 30;
			
			st.left = x + 10 + "px";
			st.top = y + 20 + "px";
		};

		this.$init = function() {
			tooltipNode = document.documentElement.appendChild(dom.createElement("div"));
			var st = tooltipNode.style;
			st.position = "fixed";
			st.display = "none";
			st.background = "lightyellow";
			st.borderRadius = "";
			st.border = "1px solid gray";
			st.padding = "1px";
			st.zIndex = 2001;
			st.fontFamily = "monospace";
			st.whiteSpace = "pre-line";
			return tooltipNode;
		};

		this.destroy = function() {
			this.onMouseOut();
			event.removeListener(this.editor.renderer.scroller, "mousemove", this.onMouseMove);
			event.removeListener(this.editor.renderer.content, "mouseout", this.onMouseOut);
			delete this.editor.tokenTooltip;    
		};

	}).call(TokenTooltip.prototype);

	return TokenTooltip;
});

define('PropertyEditorFactory', ['PropertyFieldData', 'jQuery', 'TokenTooltip'], function (PropertyFieldData, $, TokenTooltip) {
    var aceEditors = [];
	var sizeHintCss = {
		small : {
			width : 100
		},
		medium : {
			width : 250,
			height: '1.3em'
		},
		wide : {
			width : '96%',
			height: '1.3em'
		},
		large : {
			width : '96%',
			height: '15em'
		}
	};
	
	var PropertyEditorFactory = {
		DestroyAceEditors : function () {
			$.each(aceEditors, function (i, ae) {
				ae.destroy();
				ae = null;
			});
			aceEditors = [];
		},
		ResizeAceEditors : function () {
			$.each(aceEditors, function (i, ae) {
				ae.resize();
			});
		},
		create : function (propertyFieldData) {
			var type = propertyFieldData.propertyField.type;
			var factory = PropertyEditorFactory[type];
			
			if (type === 'create' || typeof factory !== 'function') {
				throw new Error('Bad property type: ' + type);
			}
			
			var editor = factory(propertyFieldData);
			editor.refresh();
			
			return editor;
		},
			
		text : function (propertyFieldData) {
			var sizeHint = propertyFieldData.propertyField.sizeHint;
			
			if (!Object.prototype.hasOwnProperty.call(sizeHintCss, sizeHint))
				sizeHint = 'medium';

			var $div = $('<div class="noWrap"/>');
			var $editor = null;
			var aceEditor = null;
			
			if (sizeHint === 'large' && MP.Tools.AceIsEnabled()) {
				$editor = $('<div/>')
					.appendTo($div);
				
				aceEditor = Global.ConvertToAceEditor($editor, propertyFieldData.language(), false);
				aceEditors.push(aceEditor);
			} else {
				var isTA = sizeHint !== 'small';
				if (isTA)
					$editor = $('<textarea class="ace_textarea"/>');
				else
					$editor = $('<input type="text"/>');

				$editor
					.attr('title', propertyFieldData.propertyField.description || '')
					.attr('disabled', propertyFieldData.isDisabled() ? 'disabled' : '')
					.css(sizeHintCss[sizeHint])
					.appendTo($div);
				
				if (isTA && MP.Tools.AceIsEnabled()) {
					$('<div/>')
						.attr('title', "Switch to advanced editor")
						.addClass("ace_resize")
						.appendTo($div)
						.bind('click', function() {
							$(this).hide();
							aceEditor = Global.ConvertToAceEditor($editor, propertyFieldData.language(), true);
							aceEditors.push(aceEditor);
						});
				};
			};
			
			refresh = function () {
				var v = propertyFieldData.get();
				if (aceEditor)
					aceEditor.setValue(v, -1);
				else
					$editor.val(v);
			};
			save = function () {
				var v;
				if (aceEditor)
					v = aceEditor.getValue();
				else
					v = $editor.val();
				propertyFieldData.set(v);
			};
			
			if (propertyFieldData.allowsLiveEditing()) {
				$editor.bind('keyup change', save);
			};
			
			return {
				$element : $div,
				refresh : refresh,
				save : save
			};
		},
		
		multi : function (propertyFieldData) {
			// This method is a bit complex.  Will clean up later.

			var spec = propertyFieldData.propertyField.data;			
			if (!spec) {
				throw new Error('Property is missing spec: ' + (propertyFieldData.propertyField.name || propertyFieldData.propertyField.label));
			}

			var $table = $('<table/>');
			var $header = $('<thead/>').appendTo($table);
			var $body = $('<tbody/>').appendTo($table);
			var $footer = $('<tfoot/>').appendTo($table);
			
			// Build header
			var $headerRow = $('<tr/>').appendTo($header);
			
			$.each(spec, function (i, specItem) {
				$('<th/>').text(specItem.label).appendTo($headerRow);
			});
			
			// Build inner data
			var items = []; // Set in refresh()
			var itemEditors = []; // [ { item, editor } ]
			
			var buildItemCell = function (specItem, item) {
				var itemPropertyFieldData = new PropertyFieldData(specItem, {
						getter : function () {
							return item[specItem.name];
						},
						setter : function (value) {
							item[specItem.name] = value;
						}
					});
				
				var editor = PropertyEditorFactory.create(itemPropertyFieldData);
				
				itemEditors.push({
					item : item,
					editor : editor
				});
				
				return $('<td/>').append(editor.$element);
			};
			
			var buildItemRow = function (item) {
				var $row = $('<tr/>');
				
				$.each(spec, function (i, specItem) {
					buildItemCell(specItem, item).appendTo($row);
				});
				$row.find('td:last').css('width', '100%');
				
				$('<td><img src="../../images/deleteparam.png" title="Delete"/></td>')
					.css('cursor', 'pointer')
					.one('click', function () {
						// Remove it from items
						var index = $.inArray(item, items);
						items.splice(index, 1);
						
						// Remove it from itemEditors to stop tracking updates
						$.each(itemEditors, function (index, value) {
							if (value && value.item === item)
								itemEditors[index] = null;
						});
						itemEditors = $.grep(itemEditors, function (ed) {
							return ed != null;
						});
						
						var fn = propertyFieldData.options.args.DeleteParam || $.noop;
						fn(index);
						
						$row.remove();
					})
					.appendTo($row);
				
				return $row;
			};
			
			var AddParameter = function(newItem) {
				var item = newItem || {}; // TODO Create using proper constructor (e.g. Filter instead of Object)
				items.push(item);
				
				var fn = propertyFieldData.options.args.AddParam || $.noop;
				fn();
				
				buildItemRow(item).appendTo($body);
			};
			
			// Build footer
			var $addRow = $('<tr/>').appendTo($footer);
			var $addCell = $('<td/>')
				.attr('colspan', spec.length + 1)
				.appendTo($addRow);
			
			// Add button
			$('<img src="../../images/param-add.png" title="Add new" class="paramActions"/>')
				.click(AddParameter)
				.appendTo($addCell);
			
			if (propertyFieldData.propertyField.description == 'Set Query Parameters' && MP.Tools.AceIsEnabled()) {
			
				// Auto link query params
				$('<img src="../../images/param-link.png" title="Generate query parameters" class="paramActions"/>')
					.click(function() {
						var s = aceEditors[0].getValue();
						var params = s.match(/:(\w+)/g);
						var items = GetValidItems();
						
						$.each(params, function (i, attr) {
							var name = attr.replace(':', '');
							var NAME = name.toUpperCase();
							var found = false;
							
							for (var i = 0; i < items.length; i++) {
								if (items[i].Name.toUpperCase() == NAME) {
									found = true;
									break;
								};
							};
							
							if (!found) {
								var newItem = {
									Name: name,
									Type: 'STRING',
									Value: '#S#'
								};
								AddParameter(newItem);
							};
						});
					})
					.appendTo($addCell);
			
				// Validate query
				$('<img src="../../images/query-validate.png" title="Validate query" class="paramActions"/>')
					.click(function() {
						var items = GetValidItems();
						var params = '';
						for (var i = 0; i < items.length; i++)
							params = params + ',' + items[i].Name + '=' + items[i].Type;
						params = '&params=' + encodeURIComponent(params.substr(1));
						
						var query = '&query=' + encodeURIComponent(aceEditors[0].getValue());
						var url = "admintabs.max?action=ValidateQuery";
						var cbFn = function(result) {
							var btns = {
								'Close' : function () {
									$(this).dialog('close');
								}
							};
							Global.ShowMessage(result, 600, 'Query Validator', null, btns);
						};
						
						// Send to the server
						Communication.CustomRequest(url, cbFn, null, query + params);
						
					})
					.appendTo($addCell);
			};
			
			var refresh = function () {
				items = $.extend(true, [], propertyFieldData.get()); // Deep clone
				itemEditors = [];
				
				$body.empty();
				
				$.each(items, function (i, item) {
					buildItemRow(item).appendTo($body);
				});
			};
			
			var GetValidItems = function () {
				// Save child properties
				$.each(itemEditors, function (index, value) {
					if (value && value.editor)
						value.editor.save();
				});
				// Remove invalid items
				var validItems = $.grep(items, function (item) {
					return item !== null;
				});
				return validItems;
			};
			
			var save = function () {
				var items = GetValidItems();
				propertyFieldData.set(items);
			};
			
			return {
				$element : $table,
				refresh : refresh,
				save : save
			};
		},
		
		checkbox : function (propertyFieldData) {
			var $editor = $('<input/>')
				.attr('title', propertyFieldData.propertyField.description || '')
				.attr('type', 'checkbox');
			
			var refresh = function () {
				// IE is buggy and won't check a checkbox properly unless
				// it is added to the DOM.  This UGLY HACK "ensures" it's
				// in the DOM before refreshing.
				setTimeout(function () {
					$editor.attr('checked', propertyFieldData.get() ? 'checked' : '');
				}, 0);
			};
			
			var save = function () {
				propertyFieldData.set($editor.is(':checked'));
			};
			
			if (propertyFieldData.allowsLiveEditing()) {
				$editor.bind('change', function () {
					save();
				});
			}
			
			return {
				$element : $editor,
				refresh : refresh,
				save : save
			};
		},
		
		select : function (propertyFieldData) {
			var $select = $('<select/>')
				.attr('title', propertyFieldData.propertyField.description || '')
				.append(Utilities.ConvertToOptions(propertyFieldData.propertyField.data || []));
			
			var refresh = function () {
				$select.val(propertyFieldData.get());
			};
			
			var save = function () {
				propertyFieldData.set($select.val());
			};
			
			if (propertyFieldData.allowsLiveEditing()) {
				$select.bind('keydown keyup keypress change', function () {
					save();
				});
			}
			
			return {
				$element : $select,
				refresh : refresh,
				save : save
			};
		},

		csf : function (propertyFieldData) {
			var fncs = MP.Tools.Config.ScriptFunctions;
			var $div = $('<div/>');
			var items = []; // Set in refresh()
			var fnArr = [];
			var fnArrBackup = [];
			var id = 0;

			// fn.type = Nil, String, Char, Boolean, Byte, Integer, Double, Currency, Extended, TStringList, TDate, TTime, TDateTime
			// fn.cat = Nil, Var, Const, Procedure, Function, Record, Object, Array

			var getValueByName = function (name) {
				if (fnArr instanceof Array) {
					var itm = $.grep(fnArr, function(e){ return e.Name == name; });
					if (itm.length > 0)
						return itm[0].Value;
					else
						return '';
				} else
					return '';
			};
			
			var inputSize = function(fn) {
				if ($.inArray(fn.cat, ['record', 'object', 'array']) > -1)
					return 'large';
				else				
					return 'wide';
			};
			
			var addInput = function(fn, desc) {
				var $p = $('<p/>').appendTo($div);
				fn.value = getValueByName(fn.name);
				$p.append('<label>' + desc + '</label></br>');
				id++;

				var item = {
					ID   : 'csf-' + fn.name + '-' + id.toString(),
					Name : fn.name,
					Value: fn.value,
					Input: null,
					Language: ''
				};
				items.push(item);
				
				if (fn.cat == 'procedure')
					return;
					
				var is = inputSize(fn);
				var isTA = is == 'large';
				if (isTA)
					var ed = $('<textarea class="ace_textarea"/>');
				else
					var ed = $('<input type="text" class="ace_input"/>');
				ed.attr('id', item.ID)
					.attr('title', fn.label || '')
					.val(fn.value)
					.css(sizeHintCss[is])
					.appendTo($p);
				item.Input = ed;

				if (MP.Tools.AceIsEnabled()) {
					$('<div/>')
						.attr('title', "Switch to advanced editor")
						.addClass("ace_resize")
						.appendTo($p)
						.bind('click', function() {
							$(this).hide();
							var ae = Global.ConvertToAceEditor(ed, item.Language, true);
							aceEditors.push(ae);
							item.Input = ae;
						});
				};
			};
			
			var deleteFunction = function () {
				$div.find('p').remove();
				items = [];
				id = 0;
				// Done in callback setter
				//var delFn = propertyFieldData.options.args.DeleteParam || $.noop; delFn();
			};
			
			var updateItems = function () {
				$.each(items, function (i, itm) {
					if (itm.Input && itm.Input.getValue)
						itm.Value = itm.Input.getValue();
					else
						itm.Value = $('#' + itm.ID).val();
				});
			};
			
			var makeProperties = function (fnName) {
				try {
					fnName = fnName || fnArr[0].Name;
					
					var fn = null;
					$.each(fncs, function (idx, elm) {
						if (elm.name == fnName) {
							fn = elm;
							return;
						};
					});
					if (!fn)
						throw "Unknown function " + fnName + "!";

					deleteFunction();
					$select.val(fnName);

					// Add function declaration
					var s = fn.type ? '<br><br>return: ' + fn.type + ';' : '';
					addInput(fn, fn.def + '<br><br>' + fn.label + s);
					fnArr.splice(0, 1);
					
					// Add property declarations
					$.each(fn.params, function (idx, elm) {
						addInput(elm, elm.pass + ' ' + elm.name + ': ' + elm.type + ';');
					});
				} catch (err) {
					iLog("makePropertis", err, Log.Type.Error);
				}
			};
			
			var makeOptions = function () {
				var makeOption = function (data) {
					return $('<option/>')
					.attr('value', data.name)
					.attr('title', data.def + '\n\n' + data.label)
					.text(data.name);
				};
				
				var $options = $([]);
				$.each(fncs, function (idx, elm) {
					$options = $options.add(makeOption(elm));
				});
				
				return $options;
			};
			
			var $select = $('<select/>')
				.attr('title', propertyFieldData.propertyField.description || '')
				.append(makeOptions())
				.appendTo($div)
				.change(function() {
					// Deep clone
					fnArr = $.extend(true, [], fnArrBackup);
					makeProperties($(this).val());
				});

			var refresh = function () {
				// Deep clone
				fnArr = $.extend(true, [], propertyFieldData.get()); 
				fnArrBackup = $.extend(true, [], fnArr);
				makeProperties();
			};
			
			var save = function () {
				updateItems();
				propertyFieldData.set(items);
			};
			
			if (propertyFieldData.allowsLiveEditing()) {
				$select.bind('keydown keyup keypress change', function () {
					save();
				});
			};
			
			return {
				$element : $div,
				refresh : refresh,
				save : save
			};
		}
	};
	
	return PropertyEditorFactory;
});

define('RuleXML', ['jQuery'], function ($) {
	var RuleXML = new function () {

		/* PRIVATE PROPERTIES */
		var logClassName = "RuleXML.";
		var _xml = null;

		/* PRIVATE METHODS */

		function iLog(Place, Message, Type, Silent) {
			Log.Add(logClassName + Place, Message, Type, Silent);
		}		
		
		return {
			/* PUBLIC PROPERTIES */
			CurrentProcess : "",

			/* PUBLIC METHODS */

			AddComponent : function (xmlNode) {
				try {
					iLog("AddComponent", "Called");
					
					$(_xml).find("vrm>" + this.CurrentProcess).append(xmlNode);
				} catch (err) {
					iLog("AddComponent", err, Log.Type.Error);
				}
			},
			AppendXML : function (xmlNodes) {
				try {
					var proc = $(_xml).find("vrm>" + this.CurrentProcess);
					proc.append(xmlNodes);
				} catch (err) {
					iLog("AppendXML", err, Log.Type.Error);
				}
			},
			GetComponent : function (ID) {
				try {
					if (typeof ID != "number")
						ID = parseInt(ID, 10);
					var ret = "";
					$(_xml).find("vrm>" + this.CurrentProcess + ">c").each(function () {
						if (parseInt($(this).find(">n").text(), 10) == ID) {
							ret = Utilities.GetXmlString(this);
						}
					});
					return ret;
				} catch (err) {
					iLog("GetComponent", err, Log.Type.Error);
				}
			},
			DeleteComponent : function (ID) {
				try {
					iLog("DeleteComponent", "Called");
					
					var toRemove = null;
					$(_xml).find("vrm>" + this.CurrentProcess + ">c").each(function () {
						if ($(this).find(">n").text() == ID) // flag the component for removal
							toRemove = this;
						$(this).find("j").each(function () { // clear any references to the component
							if ($(this).text() == ID)
								$(this).text("");
						});
					});
					if (toRemove != null)
						toRemove.parentNode.removeChild(toRemove);
				} catch (err) {
					iLog("DeleteComponent", err, Log.Type.Error);
				}
			},
			Load : function (xml) {
				try {
					iLog("Load", "Called");
					
					_xml = xml;
				} catch (err) {
					iLog("Load", err, Log.Type.Error);
				}
			},
			// gets the component that links to the component specified
			GetFromComponent : function (ID) {
				try {
					if (typeof ID != "number")
						ID = parseInt(ID, 10);
					var ctrl = null;
					$(_xml).find("vrm>" + this.CurrentProcess + ">c").each(function () {
						var _compID = parseInt($(this).find("n").text(), 10);
						$(this).find("j").each(function () {
							var j = $(this).text();
							if (j == ID.toString())
								ctrl = RuleStorage.GetComponent(_compID);
						});
					});
					return ctrl;
				} catch (err) {
					iLog("GetFromComponent", err, Log.Type.Error);
				}
			},
			GetNewElement : function (nodeName) {
				try {
					return _xml.createElement(nodeName);
				} catch (err) {
					iLog("GetNewElement", err, Log.Type.Error);
				}
			},
			GetNewCDATA : function (strContent) {
				try {
					strContent = strContent || '';
					return _xml.createCDATASection(strContent);
				} catch (err) {
					iLog("GetNewCDATA", err, Log.Type.Error);
				}
			},
			ReplaceCDATA : function (elem, value) {
				try {
					var parentNode = $(elem)[0].parentNode;
					var n = $(elem)[0].nodeName;
					var cdata = RuleXML.GetNewCDATA(value);
					var newElem = RuleXML.GetNewElement(n);
					$(newElem).append(cdata);
					parentNode.replaceChild(newElem, $(elem)[0]);
				} catch (err) {
					iLog("ReplaceCDATA", err, Log.Type.Error);
				}
			},
			GetNextComponentNumber : function () {
				try {
					var _id = -1;
					var zeroFound = false;
					$(_xml).find('vrm>' + this.CurrentProcess + '>c').each(function () {
						var comp = $(this).find(">n").text();
						if (comp == '0')
							zeroFound = true;
						if (parseInt(comp, 10) > _id)
							_id = parseInt(comp, 10);
					});
					if (!zeroFound)
						return 0;
					return _id + 1;
				} catch (err) {
					iLog("GetNextComponentNumber", err, Log.Type.Error);
				}
			},
			GetVRM : function () {
				return _xml;
			},
			GetFunctionXML : function () {
				try {
					return $(_xml).find("vrm>function");
				} catch (err) {
					iLog("GetFunctionXML", err, Log.Type.Error);
				}
			},
			GetPostProcessXML : function () {
				try {
					return $(_xml).find("vrm>postproc");
				} catch (err) {
					iLog("GetPostProcessXML", err, Log.Type.Error);
				}
			},
			GetPreProcessXML : function () {
				try {
					return $(_xml).find("vrm>preproc");
				} catch (err) {
					iLog("GetPreProcessXML", err, Log.Type.Error);
				}
			},
			SetPostProcessXML : function (xmlNode) {
				try {
					$(_xml).find('vrm>postproc').text($(xmlNode).text());
				} catch (err) {
					iLog("SetPostProcessXML", err, Log.Type.Error);
				}
			},
			SetPreProcessXML : function (xmlNode) {
				try {
					$(_xml).find('vrm>preproc').text($(xmlNode).text());
				} catch (err) {
					iLog("SetPreProcessXML", err, Log.Type.Error);
				}
			}
		};
	};
	
	return RuleXML;
});

// Classes and functions to handle menus
define('ContextMenuItems', ['jQuery'], function ($) {
	function ContextMenuItems() {
		var rootUL = $("<ul/>");
		
		function EnsureUL(li) {
			var ul = li.find('>ul');
			if (ul.length == 0)
				ul = $("<ul/>");
			li.append(ul);
			
			return ul;
		}

		// Adds a menu item to the ContextMenu
		this.Add = function (caption, callback, item) {
			var li = $("<li/>");
			li.text(caption);
			
			if (callback)
				li.click(function () { callback(); });
			
			if (item) {
				var ul = EnsureUL(item);
				ul.append(li);
			} else {
				rootUL.append(li);
			}
			
			return li;
		};

		// Reference of the entire menu with all its items
		this.GetHTML = function () {
			return rootUL;
		};
	}
	
	return ContextMenuItems;
});

define('ContextMenu', ['jQuery', 'Storage'], function ($, Storage) {
	var ContextMenu = new function () {

		/* PRIVATE PROPERTIES */
		var logClassName = "ContMenu.";
		var contextMenus = new Storage();
		var _div = $("<div class='contextMenu'></div>");
		var _isVisible = false;
		var self = this;

		/* PRIVATE METHODS */

		function iLog(Place, Message, Type, Silent) {
			Log.Add(logClassName + Place, Message, Type, Silent);
		}		
		function Menu(selector, getMenuCallback, nme) {
			var _name = nme;
			var _selector = selector;
			var _callback = getMenuCallback;
			
			this.Name = function () {
				return _name;
			};
			this.Attach = function () {
				$(_selector)
					.each(function () {
						this.oncontextmenu = function (e) {
							ContextMenu.Show(_callback, e || window.event);
							return false;
						}
					});
			};
			this.Detach = function () {
				$(_selector)
					.each(function () {
						this.oncontextmenu = null;
					});
			};
		}
		
		return {
			Initialized : false,
			Enabled : true,
			EventComponent : null,
			OffsetX : 0,
			OffsetY : 0,
			ScrollX : 0,
			ScrollY : 0,
			ClientX : 0,
			ClientY : 0,

			Initialize : function () {
				try {
					if (this.Initialized)
						return;
					iLog("Initialize", "Called");

					$("body").append(_div);
					$("body").bind("click.contextMenu", function () {
						ContextMenu.Hide();
					});
					
					this.Initialized = true;
				} catch (err) {
					iLog("Initialize", err, Log.Type.Error);
				}
			},
			Add : function (strSelector, getMenuCallback, nme) {
				try {
					iLog("Add", "Called");

					nme = nme || strSelector;
					var menu = new Menu(strSelector, getMenuCallback, nme);
					contextMenus.AddComponent(menu, nme);
					menu.Attach();
				} catch (err) {
					iLog("Add", err, Log.Type.Error);
				}
			},
			Refresh : function () {
				try {
					iLog("Refresh", "Called");
					
					var menus = contextMenus.GetItemArray();
					for (var i = 0; i < menus.length; i++) {
						var menu = menus[i];
						menu.Attach();
					}
				} catch (err) {
					iLog("Refresh", err, Log.Type.Error);
				}
			},
			Remove : function (nme) {
				try {
					iLog("Remove", "Called");
					
					var menu = contextMenus.GetComponent(nme);
					if (menu) {
						menu.Detach();
						contextMenus.Remove(nme);
					}
				} catch (err) {
					iLog("Remove", err, Log.Type.Error);
				}
			},
			RemoveAll : function () {
				try {
					iLog("RemoveAll", "Called");
					
					var menus = contextMenus.GetItemArray();
					for (var i = 0; i < menus.length; i++) {
						var menu = menus[i];
						menu.Detach();
					}
					contextMenus.Reset();
				} catch (err) {
					iLog("RemoveAll", err, Log.Type.Error);
				}
			},
			Detach : function (nme) {
				try {
					iLog("Detach", "Called");
					
					var menu = contextMenus.GetComponent(nme);
					if (menu) {
						menu.Detach();
					}
				} catch (err) {
					iLog("Remove", err, Log.Type.Error);
				}
			},
			DetachAll : function () {
				try {
					iLog("DetachAll", "Called");
					
					var menus = contextMenus.GetItemArray();
					for (var i = 0; i < menus.length; i++) {
						var menu = menus[i];
						menu.Detach();
					}
				} catch (err) {
					iLog("DetachAll", err, Log.Type.Error);
				}
			},
			Attach : function (nme) {
				try {
					iLog("Attach", "Called");
					
					var menu = contextMenus.GetComponent(nme);
					if (menu) {
						menu.Attach();
					}
				} catch (err) {
					iLog("Remove", err, Log.Type.Error);
				}
			},
			AttachAll : function () {
				try {
					iLog("AttachAll", "Called");
					
					var menus = contextMenus.GetItemArray();
					for (var i = 0; i < menus.length; i++) {
						var menu = menus[i];
						menu.Attach();
					}
				} catch (err) {
					iLog("AttachAll", err, Log.Type.Error);
				}
			},
			Hide : function () {
				if (!_isVisible)
					return;
				iLog("Hide", "Called");

				_div.css("display", "none");
				_isVisible = false;
			},
			Show : function (menuCallback, evt) {
				try {
					this.Hide();
					iLog("Show", "Called");

					var html = menuCallback();
					if (html == null)
						return false;
					
					evt = evt || window.event;
					this.ScrollX = document.body.scrollLeft ? document.body.scrollLeft : document.documentElement.scrollLeft;
					this.ScrollY = document.body.scrollTop ? document.body.scrollTop : document.documentElement.scrollTop;
					this.ClientX = evt.clientX;
					this.ClientY = evt.clientY;
					this.EventComponent = evt.target != null ? evt.target : evt.srcElement;
					
					if (evt.offsetX && evt.offsetY) {
						this.OffsetX = evt.offsetX;
						this.OffsetY = evt.offsetY;
					} else {
						var pos = $(this.EventComponent).offset();
						this.OffsetX = Utilities.ToNumber(evt.pageX - pos.left);
						this.OffsetY = Utilities.ToNumber(evt.pageY - pos.top);
					}
					
					// if disabled do not stop event propagation!!!
					if (!this.Enabled)
						return false;

					_div.css("left", this.ClientX + this.ScrollX + 'px');
					_div.css("top", this.ClientY + this.ScrollY + 'px');
					_div.html(html);
					_div.css("display", "block");
					_isVisible = true;
					
					return true;
				} catch (err) {
					iLog("Show", err, Log.Type.Error);
				}
			}
		};
	};
	
	return ContextMenu;
});

define('PropertyEd', ['PropertyEditorFactory', 'PropertyFields', 'PropertyFieldData', 'jQuery', 'Communication', 'Editor', 'RuleXML', 'ContextMenu', 'PageHelper'], function (PropertyEditorFactory, PropertyFields, PropertyFieldData, $, Communication, Editor, RuleXML, ContextMenu, PageHelper) {
	// This needs ctor/#show logic to be refactored
	
	var PropertyEd = function (undefined) {
		this.reset();

		this._div = $('<div id="PropertyDlg"/>');
		this._table = $('<table/>')
			.appendTo(this._div)
			.addClass('PropertyEditorTable');

		var self = this,
			_config;
		
		var InitConfig = function() {
			if (_config)
				return;
			
			_config = MP.Tools.Config.Editor.property;
		};
		var Pin = function(value) {
			if (value == undefined)
				_config.pinned = !_config.pinned;
			else
				_config.pinned = value;
			
			UpdateButtons();
			
			if (_config.pinned) {
				$(window).bind('scroll.pinPropertyDiv', function () {
					var p = self._div.parent();
					if (p.is(":visible"))
						p.css('top', (self._div.data('lastTop') + $(document).scrollTop()) + "px");
				});
			} else {
				$(window).unbind('scroll.pinPropertyDiv');
			}
		};
		var UpdateButtons = function() {
			var bp = $(".ui-dialog-buttonpane", self._div.parent());
			var FindBtn = function(caption) {
				return $("button:contains(" + caption + ")", bp);
			};
			
			if (_config.pinned)
				FindBtn('Pin').html("Unpin");
			else
				FindBtn('Unpin').html("Pin");
		};
		
		var buttons = {
			'Cancel' : function () {
				self.revertAndClose();
			},
			'Delete' : function () {
				self.saveAndClose();
				
				// XXX TEMPORARY XXX
				if (self.deleteCallback) {
					self.deleteCallback.call(null);
				}
			},
			'Pin' : function () {
				Pin();
			}
		};
		
		this._div.dialog({
			minWidth : 470,
			minHeight : 250,
			width : 650,
			autoOpen : false,
			closeOnEscape : true,
			modal : false,
			buttons : buttons,
			resizeStart: function() {
				Global.DisableHighlightingInChrome(true);
			},
			resizeStop: function() {
				Global.DisableHighlightingInChrome(false);
				PropertyEditorFactory.ResizeAceEditors();
			},
			dragStart: function() {
				Global.DisableHighlightingInChrome(true);
			},
			dragStop: function(event, ui) {
				Global.DisableHighlightingInChrome(false);
				Global.UpdateLastPosition(self._div, ui);
			},
			open: function( event, ui ) {
				UpdateButtons();
				
				if (self._div.data('lastLeft') && self._div.data('lastTop')) {
					self._div.dialog("option", {
						position: [self._div.data('lastLeft'), self._div.data('lastTop')]
					});
				} else {
					Global.UpdateLastPosition(self._div, ui);
				}
			},
			close : function () {
				self.save();				
				self.reset();
			}
		});
		
		InitConfig();
		Pin(_config.pinned || false);
	};
	
	PropertyEd.prototype.iLog = function (Place, Message, Type, Silent) {
		Log.Add("PropEditor.P." + Place, Message, Type, Silent);
	};
	PropertyEd.prototype.reset = function () {
		this.iLog("Reset", "Called");
		
		this.editors = [];
		this.properties = [];
		this.originalValues = [];
		PropertyEditorFactory.DestroyAceEditors();
	};
	PropertyEd.prototype.show = function (properties, deleteCallback, title) {
		this.iLog("Show", "Called");
		
		this.reset();
		this.properties = properties.slice(0); // Clone
		this.deleteCallback = deleteCallback; // XXX TEMPORARY XXX
		
		var self = this;
		var $table = this._table.empty();
		var $body = $('<tbody/>').appendTo($table);		
		var editors = this.editors = $.map(this.properties, function (propertyFieldData) {
				return PropertyEditorFactory.create(propertyFieldData);
			});
		
		// jQuery is RETARDED and removes falsy values from the output when
		// using $.map or $.fn.map, so we do things the old fashion way
		// (i.e. the way which will annoy you because I am annoyed)
		this.originalValues = (function (properties) {
			var ret = [];
			$.each(properties, function (i, propertyFieldData) {
				ret.push(propertyFieldData.get());
			});
			return ret;
		}(properties));
		
		$.each(this.properties, function (i, propertyFieldData) {
			var propertyField = propertyFieldData.propertyField;
			var $header = $('<th/>')
				.text(propertyField.label)
				.addClass('PropertyEditorName');
			var $editor = $('<td/>')
				.append(editors[i].$element)
				.addClass('PropertyEditorValue');
			
			if (editors[i].$element.attr('title').match(/The name of the component/g)) {
				var currentElement = editors[i].$element;
				// save old name before changes on focus
				$(currentElement).bind('focus', function () {
					$(this).attr('oldname', $(this).val());
				});
				
				// check for names uniqueness on blur
				$(currentElement).bind('change', function () {
					var self = $(this);

					if (!self.val()) {
						self.val(self.attr('oldname'));
						jAlert('Component name cannot be blank!', 'Name Warning', function() {
							self.focus();
							self.select();
						});
						return false;
					}
					
					var arr = [];
					$('input[type!="radio"]').each(function () {
						if ($(this).attr('id'))
							arr.push($(this).attr('id'));
					});					
					$('select').each(function () {
						if ($(this).attr('id'))
							arr.push($(this).attr('id'));
					});
					
					if ($.inArray(self.val(), arr) > -1) {
						var nn = self.val();
						self.val(self.attr('oldname'));
						jAlert('Component of name <b>' + nn + '</b> already exists!<br>Please eneter another name.', 'Name Warning', function() {
							self.focus();
							self.select();
						});
						return false;
					}
				});
			}
			
			$editor.find('textarea').removeAttr('disabled');
			$('<tr/>').append($header, $editor).appendTo($body);
		});
		
		// Update title and position of the dialog
		var e = self._div;

		e.dialog('option', 'title', title || 'Editor');
		e.dialog('open');
		
		var w = $(window);
		var wTop = w.scrollTop();
		var wBtm = wTop + w.height();
		var eTop = e.offset().top;
		var eBtm = eTop + e.height();

		if ((eTop < wTop) || (eBtm > wBtm))
			e.dialog( "option", "position", ['center', 'center'] );
	};	
	PropertyEd.prototype.save = function () {
		if (this.editors.length == 0)
			return;
		this.iLog("Save", "Called");
		
		// Update all properties
		$(this.editors).each(function (i, editor) {
			editor.save();
		});
		// Visually update the script component
		var ctrl = RulesMaker.GetCurrentComponent();
		if (ctrl) {
			ctrl.Icon.UpdateHint();
			ctrl.UpdateWatchpoint();
		};
	};	
	PropertyEd.prototype.revertAndClose = function () {
		this.iLog("RevertAndClose", "Called");
		
		this.revertChanges();
		this.saveAndClose();
	};	
	PropertyEd.prototype.saveAndClose = function () {
		this.iLog("SaveAndClose", "Called");
		
		this._div.dialog('close');
	};	
	PropertyEd.prototype.revertChanges = function () {
		this.iLog("RevertChanges", "Called");
		
		var originalValues = this.originalValues;
		
		$(this.properties).each(function (i, propertyFieldData) {
			propertyFieldData.set(originalValues[i]);
		});
		
		$(this.editors).each(function (i, editor) {
			editor.refresh();
		});
	};	
	PropertyEd.prototype.exit = function () {
		this.iLog("Exit", "Called");
		
		var self = this;
		var LeaveEditor = function() {
			self.revertAndClose();
			Editor.DisableEditor();
			RulesMaker.Disable();
			ContextMenu.RemoveAll();
			Communication.CloseEditor();
		};
		
		if (Editor.LockedBy)
			LeaveEditor();
		else {
			jConfirm('Are you sure you want to exit without saving?', 'Confirm Exit', function(answer) {
				if (answer)
					LeaveEditor();
			});
		};
	};	
	PropertyEd.prototype.ValidatePage = function (saveFn) {
		this.iLog("ValidatePage", "Called");
			
		// CHECKS MISSING TOOLTIPS
		var arr = PageHelper.FindFieldsWithNoTooltips();
		if (!arr.length) {
			saveFn();
			return;
		};
		var s = arr.join("<br>");
		jConfirm('This page has ' + arr.length + ' field/s with no tooltips!<br>This will most likely result in QA rejection!<p><b>' + s + '</b><p>Save anyway?', 'Save Warning', function(answer) {
			if (answer)
				saveFn();
		});
	};
	PropertyEd.prototype.savePageQuick = function () {
		this.iLog("SavePageQuick", "Called");
		
		var self = this;
		function doSave() {
			self.saveAndClose();
			Editor.DisableEditor();
			Communication.EditorUpdate(true);
		};
		this.ValidatePage(doSave);
	};
	PropertyEd.prototype.savePage = function () {		
		this.iLog("SavePage", "Called");

		var self = this;
		function doSave() {
			self.saveAndClose();
			Editor.DisableEditor();
			RulesMaker.Disable();
			ContextMenu.RemoveAll();
			Communication.EditorUpdate(false);
		};
		this.ValidatePage(doSave);
	};

	PropertyEd.iLog = function (Place, Message, Type, Silent) {
		Log.Add("PropEditor." + Place, Message, Type, Silent);
	};

	// TODO KILL WITH A FIRE
	PropertyEd.Property = function (propertyField, getter, setter, args) {
		// XXX TEMPORARY XXX
		return new PropertyFieldData(propertyField, {
			getter : getter,
			setter : setter,
			args : args
		});
	};	
	PropertyEd.GetInstance = function () {
		if (this.editor) {
			var ed = this.editor;
			ed.save();
		} else {
			var ed = new PropertyEd();
		}		
		this.editor = ed;		
		return ed;
	};	
	PropertyEd.Show = function () {
		this.iLog("Show", "Called");
		
		var ed = this.GetInstance();
		ed.show.apply(ed, arguments);
		return ed;
	};	
	PropertyEd.Hide = function () {
		var ed = this.GetInstance();
		ed.saveAndClose();
		return ed;
	};
	PropertyEd.Disable = function () {
		this.iLog("Disable", "Called");
		
		this.GetInstance().exit();
	};
	PropertyEd.Save = function () {
		if (!Editor.Enabled || Editor.LockedBy || Global.InProgress())
			return;
		this.iLog("Save", "Called");
		
		this.GetInstance().savePage();
	};
	PropertyEd.QuickSave = function () {
		if (!Editor.Enabled || Editor.LockedBy || Global.InProgress())
			return;
		this.iLog("QuickSave", "Called");
		
		this.GetInstance().savePageQuick();
	};

	return PropertyEd;
});

define('Global', ['Editor', 'ReqList', 'jQuery', 'Log', 'PageHelper'], function (Editor, ReqList, $, Log, PageHelper) {
	var Global = new function () {
		try {
			/* PRIVATE PROPERTIES */
			var logClassName = "Global.";
			var ProgressBar = null;
			
			/* PRIVATE METHODS */

			function iLog(Place, Message, Type, Silent) {
				Log.Add(logClassName + Place, Message, Type, Silent);
			}
			function UpdateRuleSet(RuleSet, ColorData) {
				if (!RuleSet || !RuleSet.selectorText)
					return;
				
				//LK: Fixes a bug when passed Color Data object becomes again plain JSON string! Weird.
				if (Utilities.IsObject(ColorData))
					var cd = ColorData;
				else
					var cd = jsonParse(ColorData);

				var cssRule = RuleSet.selectorText.toLowerCase().replace(/'/g, '"');
				var cssStyle = RuleSet.style;

				switch (cssRule) {
				case "body":
					cssStyle.backgroundColor = cd.BodyBackground;
					break;
				case "h1, h2, h3":
				case "h1":
				case "h2":
				case "h3":
					cssStyle.color = cd.HTagColor;
					break;
				case "a":
				case "a:visited":
				case "a, a:visited":
				case ".validationerrors li":
					cssStyle.color = cd.Anchor;
					break;
				case "a:hover":
				case ".validationerrors li:hover":
					cssStyle.color = cd.AnchorHover;
					break;
				case ".sdata":
				case ".sheader":
				case "#shell":
					cssStyle.backgroundColor = cd.Shell;
					break;
				case "#bottom":
					cssStyle.backgroundColor = cd.FootColor;
					break;
				case ".required":
					cssStyle.color = cd.Required;
					break;
				case ".notrequired":
					cssStyle.color = cd.NotRequired;
					break;
				case 'input, select, textarea':
				case '.editortext span':
				case '.editormemospan':
				case '.memospelldiv':
					cssStyle.backgroundColor = cd.InputBackground;
					break;
				case 'input[type="button"]':
					cssStyle.backgroundColor = cd.ButtonBackground;
					break;
				case ".staticcontainer h3, .dynamiccontainer h3, .validationcontainer h3, .scriptingcontainer h3":
				case ".staticcontainer h3":
				case ".dynamiccontainer h3":
				case ".validationcontainer h3":
				case ".scriptingcontainer h3":
					cssStyle.color = cd.ContainerHeadTextColor;
					cssStyle.backgroundColor = cd.ContainerHeadBackgroundColor;
					break;
				case ".editorlabel label.pagetitle":
					cssStyle.color = cd.PageTitle;
					break;
				case ".tablemaster tr":
				case ".tablemastersm tr":
				case ".ac_odd":
					cssStyle.backgroundColor = cd.TableRowColor;
					break;
				case ".tablemaster tr.even":
				case ".tablemastersm tr.even":
				case ".ac_results":
					cssStyle.backgroundColor = cd.TableAlternateRowColor;
					break;
				case ".tablemaster thead tr":
				case ".tablemastersm thead tr":
					cssStyle.backgroundColor = cd.TableHeadColor;
					break;
				case "#menu":
				case "#menu ul ul ul a":
					cssStyle.backgroundColor = cd.MenuBackgroundColor;
					break;
				case "#menu a":
					cssStyle.backgroundColor = cd.MenuBackgroundColor;
					cssStyle.color = cd.MenuTextColor;
					cssStyle.borderColor = cd.MenuBorderColorTop + ' ' + cd.MenuBorderColorRight + ' ' + cd.MenuBorderColorBottom + ' ' + cd.MenuBorderColorLeft;
					break;
				case "#menu a:hover":
					cssStyle.color = cd.MenuHoverColor;
					break;
				case "#menu ul ul a":
					cssStyle.backgroundColor = cd.MenuBackgroundColor;
					cssStyle.borderColor = cd.MenuDropdownBorderColor;
					break;
				}
			}
			
			return {
				/* PUBLIC PROPERTIES */
				DisableTooltips : false,
				WorkflowTimerInitialized: false,
				FadingHelpLinks: false,

				/* PUBLIC METHODS */
				Version : function () {
					return MP.StingrayJsVersion;
				},
				ShowBarcodeDlg : function () {
					jPrompt('Scan a barcode while the cursor is in this edit box\nWARNING: Any unsaved changes on current page will be lost!', '', 'Barcode Scanner', function(bc) {
						if (bc)
							Communication.LinkRequest('BarCode.max?' + $.param({'BC' : bc}));
					});
				},
				SetRequiredForAllElements : function (isRequired, commaList) {
					try {
						var arr = commaList.split(',');
						for (var i = 0; i < arr.length; i++) {
							Global.GetControl($.trim(arr[i])).SetRequired(isRequired);
						};
					} catch (err) {
						iLog("SetRequiredForAllElements", err, Log.Type.Error);
					}
				},
				// Fix GUI of already Spellchecked fields
				RemoveAllSpellchecks : function () {
					try {
						if (!window.livespell)
							return;
							
						livespell.spellingProviders = [];
					} catch (err) {
						iLog("RemoveAllSpellchecks", err, Log.Type.Error);
					}
				},
				// Add Spellcheck to a field
				AddSpellcheck : function (obj) {
					try {
						if (!window.$Spelling) {
							jAlert('Spellcheck module not loaded!');
							return;
						};

						var div = $(obj).parent();
						div.children('span').hide();
						$Spelling.SpellCheckAsYouType(div.children('textarea'));
						div.removeClass('EditorMemo').addClass('MemoSpellDiv');
						div.children('.livespell_textarea').css({
							'width' : '100%',
							'height' : '100%'
						});
					} catch (err) {
						iLog("AddSpellcheck", err, Log.Type.Error);
					}
				},
				MakeCKEditorFromMemo : function(id, width, height) {
					try {
						var ed = CKEDITOR.instances[id];
						if (ed)
							ed.destroy(true);
							
						var cfg = {
							width : width + 2,
							height : height - 38,
							toolbarStartupExpanded : false,
							removePlugins: 'elementspath',
							//skin : 'office2003',
							toolbar :
							[
								{ name: 'document', items : [ 'Source','-','Maximize','Print' ] },
								{ name: 'clipboard', items : [ 'Cut','Copy','Paste','PasteText','-','Undo','Redo' ] },
								{ name: 'editing', items : [ 'Find','Replace' ] },
								{ name: 'insert', items : [ 'Table','HorizontalRule','Smiley','SpecialChar' ] },
								{ name: 'basicstyles', items : [ 'Bold','Italic','Underline','Strike','Subscript','Superscript','-','RemoveFormat' ] },
								{ name: 'paragraph', items : [ 'NumberedList','BulletedList','-','Outdent','Indent','-','JustifyLeft','JustifyCenter','JustifyRight','JustifyBlock' ] },
								{ name: 'links', items : [ 'Link','Unlink' ] },
								{ name: 'styles', items : [ 'Styles','Format','Font','FontSize' ] },
								{ name: 'colors', items : [ 'TextColor','BGColor' ] }
							]
						};
						
						CKEDITOR.config.resize_enabled = false;
						CKEDITOR.config.resize_minWidth = 50;
						CKEDITOR.config.resize_minHeight = 50;
						CKEDITOR.replace(id, cfg);
					} catch (err) {
						iLog("MakeCKEditorFromMemo", err, Log.Type.Error);
					}
				},
				GetCKEditorDataByID : function(id) {
					try {
						var ed = CKEDITOR.instances[id];
						if (ed) {
							return ed.getData();
						} else
							return "";
					} catch (err) {
						iLog("GetCKEditorDataByID", err, Log.Type.Error);
					}
				},
				RemoveAllCKEditors : function(onlyNotExisting) {
					try {
						for(var i in CKEDITOR.instances) {
							var ed = CKEDITOR.instances[i];
							var b = (!onlyNotExisting || $('#' + ed.name).length == 0);
							if (b)
								ed.destroy(true);
						}
					} catch (err) {
						iLog("RemoveAllCKEditors", err, Log.Type.Error);
					}
				},
				ConvertToAceEditor : function (element, language, focusAfter) {
					language = language || 'text';
					
					var cfg = MP.Tools.Config.Editor.ace;
					var parent, ae, el;
					if ((element.is("textarea") || element.is("input")) && element.is(":visible")) {
						element.hide();	//.resizable('destroy')
						
						parent = element.parent();
						el = $('<div/>')
							.appendTo(parent);
						el = el.get(0);
						ae = ace.edit(el);
						ae.session.setValue(element.val());
					} else {
						parent = element.parent();
						el = element.get(0);
						ae = ace.edit(el);
					};
					ae.session.setMode("ace/mode/" + language);
					ae.session.setUseWrapMode(cfg.wordWrap);
					ae.setFontSize(14);
					
					var themes = ["chrome", "clouds", "crimson_editor", "dawn", "dreamweaver", "eclipse", "github",
						"solarized_light", "textmate", "tomorrow", "xcode", "clouds_midnight", "cobalt", "idle_fingers", "kr_theme", "merbivore",
						"merbivore_soft", "mono_industrial", "monokai", "pastel_on_dark", "solarized_dark", "tomorrow_night", "tomorrow_night_blue",
						"tomorrow_night_bright", "tomorrow_night_eighties", "twilight", "vibrant_ink", "ambiance", "chaos"];
					var languages = ["text", "sql", "javascript", "pascal", "xml", "json", "html", "css"];
					var help =
						'F11  -  Toggle full screen\n' +
						'Alt-W  -  Toggle word wrap\n' +
						'Tab  -  Indent selection\n' +
						'Shift-Tab  -  Outdent selection\n' +
						'Alt-S  -  Remove doubled single quotes\n' +
						'Alt-D  -  Double single quotes\n' +
						'Ctrl-/  -  Toggle comment\n' +
						'Ctrl-L  -  Go to line number\n' +
						'Alt-L  -  Toggle fold\n' +
						'Alt-0  -  Fold all\n' +
						'Alt-Shift-0  -  Unfold all\n' +
						'Ctrl-F  -  Find\n' +
						'Ctrl-H  -  Replace\n' +
						'Ctrl-K  -  Find next\n' +
						'Ctrl-Shift-K  -  Find previous\n' +
						'Ctrl-P  -  Jump to matching end\n' +
						'Ctrl-Shift-P  -  Select to matching end\n' +
						'Ctrl-U  -  To uppercase\n' +
						'Ctrl-Shift-U  -  To lowercase\n' +
						'Ctrl-D  -  Remove line\n' +
						'Ctrl-Shift-D  -  Duplicate selection\n' +
						'Ctrl-Alt-S  -  Sort selected lines\n' +
						'Alt-Shift-Up  -  Copy lines up\n' +
						'Alt-Up  -  Move lines up\n' +
						'Alt-Shift-Down  -  Copy lines down\n' +
						'Alt-Down  -  Move lines down\n' +
						'Ctrl-[  -  Outdent line\n' +
						'Ctrl-]  -  Indent line\n' +
						'Ctrl-Up  -  Scroll up\n' +
						'Ctrl-Down  -  Scroll down\n' +
						'Ctrl-A  -  Select all\n' +
						'Alt-mouse  -  Select rectangle\n' +
						'Ctrl-Alt-E  -  Toggle recording\n' +
						'Ctrl-Shift-E  -  Replay macro';
					
					var aceFoot = $('<div/>')
						.addClass("noWrap")
						.appendTo(parent);
					
					$('<select/>')
						.attr('title', "Change editor theme")
						.addClass("ace_selector")
						.append(Utilities.ConvertToOptions(themes))
						.appendTo(aceFoot)
						.change(function() {
							var sel = $(this).val();
							cfg.theme = sel;
							ae.setTheme("ace/theme/" + sel);
						})
						.val(cfg.theme || themes[0])
						.change();
					
					$('<select/>')
						.attr('title', "Change editor language")
						.addClass("ace_selector")
						.append(Utilities.ConvertToOptions(languages))
						.appendTo(aceFoot)
						.change(function() {
							var sel = $(this).val().toLowerCase();
							ae.session.setMode("ace/mode/" + sel);
						})
						.val(language || languages[0]);
					
					$('<div/>')
						.attr('title', help)
						.addClass("ace_help")
						.appendTo(aceFoot);
					
					if (cfg.codeTips)
						ae.tokenTooltip = new TokenTooltip(ae);

					// Delay focus to prevent wrong page scroll
					if (focusAfter) {
						setTimeout(function() {
							ae.focus();
						}, 50);
					};
					
					return ae;
				},
				GetCookie : function (name) {
					try {
						var i, arr, c, x, y;
						arr = document.cookie.split("; ");
						for (i = 0; i < arr.length; i++) {
							c = arr[i];
							x = c.substr(0, c.indexOf("="));
							x = x.replace(/^\s+|\s+$/g, "");
							if (x == name) {
								y = c.substr(c.indexOf("=") + 1);
								y = unescape(y);
								return y;
							}
						}
					} catch (err) {
						iLog("GetCookie", err, Log.Type.Error, true);
					}
					return "";
				},
				SetCookie : function (name, value) {
					try {
						var exdate = new Date();
						exdate.setDate(exdate.getDate() + 1);
						document.cookie = name + "=" + escape(value) + "; expires=" + exdate.toUTCString();
					} catch (err) {
						iLog("SetCookie", err, Log.Type.Error);
					}
				},
				SetClipboard : function (str) {
					try {
						window.clipboardData.setData('text', str);
					} catch (err) {
						iLog("SetClipboard", err, Log.Type.Error);
					}
				},
				GetClipboard : function () {
					try {
						return window.clipboardData.getData('text');
					} catch (err) {
						iLog("GetClipboard", err, Log.Type.Error);
					}
					return "";
				},
				
				CheckWorkflow : function (param) {
					if (param == null && Global.WorkflowTimerInitialized == true)
						return;
					
					Communication.CustomRequest("IconTray.max?action=workflow", function (IconColor) {
						if (IconColor != "none")
							$("#WorkflowIcon").attr("src", "../../images/32px-Crystal_Clear_app_access_" + IconColor + ".png");
						else {
							$("#WorkflowIcon").css("display", "none");
							return;
						}
					}, null);
					
					Global.WorkflowTimerInitialized = true;
					
					// check status again in 5 minutes
					setTimeout("Global.CheckWorkflow(true)", 5 * 60 * 1000);
				},				
				
				// Disable or Enable tooltips globally
				Tooltips : function (boolShow) {
					try {
						if (boolShow == undefined)
							boolShow = Global.DisableTooltips;
						else
							Global.DisableTooltips = boolShow;
						
						if (boolShow) {
							$("*[oldtitle]").each(function () {
								$(this).attr("title", $(this).attr("oldtitle"));
								$(this).removeAttr("oldtitle");
							});
						} else {
							$("*[title]").each(function () {
								$(this).attr("oldtitle", $(this).attr("title"));
								$(this).removeAttr("title");
							});
						}
					} catch (err) {
						iLog("Tooltips", err, Log.Type.Error);
					}
				},
				
				// returns a template component or array of components matching the id passed in
				GetControl : function (ctrlID) {
					try {
						
						//var inpt = $("#" + ctrlID); - won't return two objects with same id such as radio buttons
						var inpt = $("*[name='" + ctrlID + "']");
						var arr = new Array();
						
						inpt.each(function () {
							var ctrl = $(this).parents(".component");
							if (ctrl.length > 0) // prevents problems where the same id is used on a non-control element (hack)
								arr.push(PageHelper.GetEditorComponent(ctrl[0]));
						});
						
						if (arr.length == 1)
							return arr[0];
						
						return arr;
						
					} catch (err) {
						iLog("GetControl", err, Log.Type.Error);
					}
				},
				MakeReadOnly : function (div) {
					try {
						var sel = null;
						if ((typeof div == null) || (typeof div == 'undefined') || div == '') sel = $( '#middle' );
						else sel=$( div );						
						inp = sel.find( ":checkbox, :radio, select" ).attr( "disabled", true );
						inp = sel.find( ":text, textarea" ).attr( "readonly", true );
					} catch (err) {
						iLog("MakeReadOnly", err, Log.Type.Error);
					}
				},
				
				InProgress : function () {
					return ProgressBar && ProgressBar.is(":visible");
				},
				ShowProgress : function (blurInput) {
					try {
						if (blurInput)
							$(blurInput).blur();
						if (!ProgressBar)
							ProgressBar = $('<div id="spinnerOverlay"></div>').appendTo('body');
						ProgressBar.show();
					} catch (err) {
						iLog("ShowProgress", err, Log.Type.Error);
					}
				},
				HideProgress : function () {
					try {
						if (ProgressBar)
							ProgressBar.hide();
					} catch (err) {
						iLog("HideProgress", err, Log.Type.Error);
					}
				},
				
				HideMessage : function () {
					try {
						$("#ModalWindow").dialog("close");
					} catch (err) {
						iLog("HideMessage", err, Log.Type.Error);
					}
				},
				ShowErrorMessage : function (html, title, buttons) {
					this.ShowMessage(html, 800, title || 'Error', null, buttons);
				},
				ShowMessage : function (html, width, title, opacity, buttons) {
					try {
						var $window = $('#ModalWindow');
						var showNextMessage = function ($window) {
							var msg = $window.data('message-queue').shift();							
							if (!msg)
								return;
							
							$window.dialog('option', 'width', msg.width);
							$window.dialog('option', 'title', msg.title);
							$window.dialog('option', 'overlay', {
								opacity : msg.opacity,
								background : msg.color
							});
							$window.dialog('option', 'buttons', msg.buttons);
							$window.dialog('close'); // Needed to get around jQuery UI bug (is it a bug?)
							$window.html($('<div/>').html(msg.html));
							$window.dialog('open');
							$window.data('current-message', msg);
						};
						
						if (!$window.attr("dialoginit")) {
							$window.css("display", "block");
							$window.dialog({
								modal   : true,
								autoOpen: false
							});
							$window.attr("dialoginit", "true");							
							$window.data('message-queue', []);							
							$window.bind('dialogclose', function () {
								showNextMessage($window);
							});
						}
						
						$window.data('message-queue').push({
							html   : html,
							width  : width || 960,
							title  : title || '',
							opacity: opacity || .5,
							color  : '#000',
							buttons: buttons || {}
						});
						
						showNextMessage($window);
					} catch (err) {
						iLog("ShowMessage", err, Log.Type.Error);
					}
				},
				ReloadStyles : function (jsonColorStr, cssFilesCSV) {
					if (!jsonColorStr)
						return;
					
					cssFilesCSV = cssFilesCSV || 'global.css,custom.css,tablewalker.css';
					var cssFilesArr = cssFilesCSV.split(',');
					var cd = jsonParse(jsonColorStr);
					var mozilla = Browser.IsFirefox() || Browser.IsChrome() || Browser.IsSafari();
					var sheets = document.styleSheets.length;
					
					for (var i = 0; i < sheets; i++) {
						for (var k = 0; k < cssFilesArr.length; k++) {
							var re = new RegExp(cssFilesArr[k] + '$', 'i');
							try {
								var name = document.styleSheets[i].href;
								if (name && name.match(re)) {
									if (mozilla)
										var rules = document.styleSheets[i].cssRules;
									else
										var rules = document.styleSheets[i].rules;
									
									if (rules) {
										for (var j = 0; j < rules.length; j++)
											UpdateRuleSet(rules[j], cd);
									}
									break;
								}
							} catch (err) {
								Log.Add('ReloadStyles', err, Log.Type.Error);
							}
						}
					}
				},
				ScrollToElement : function (element, speed, onComplete) {
					speed = speed || 1000;
					$('html, body').animate({
						scrollTop: element.offset().top
					}, speed, onComplete);
				},
				// Content highlighting fix during dragging and resizing in Chrome!
				DisableHighlightingInChrome : function (disable) {
					if (!Browser.IsChrome())
						return;
					
					if (disable)
						$(document).disableSelection();
					else
						$(document).enableSelection();
				},
				UpdateLastPosition : function (div, ui) {
					var doc = $(document);
					var pos = (ui && ui.position) ? ui.position : div.parent().offset();
					
					div.data('lastTop', Utilities.ToNumber(pos.top - doc.scrollTop()));
					div.data('lastLeft', Utilities.ToNumber(pos.left - doc.scrollLeft()));
				}
			};
			
		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	};
	
	return Global;
});

//LK: Deprecated on 7/10/2013 - should be removed in the future!
function ReloadStyles(jsonColorStr, cssFilesCSV) {
	setTimeout(function () {
		if (MP.Tools.Enabled)
			jAlert('Please update this system to use new improved\nGlobal.ReloadStyles(jsonColorStr, cssFilesCSV);\n For details see JS release notes or contact R&D.');
	}, 5000);
	
	Global.ReloadStyles(jsonColorStr, cssFilesCSV);
}

define('RuleStorage', ['Storage'], function (Storage) {
	// Delegates the storage between preprocess and post process
	var RuleStorage = new function () {
		try {
			var logClassName = "RuleStorage.";
			var PreProcStorage = new Storage();
			var PostProcStorage = new Storage();
			var CurrentStorage = null;

			function iLog(Place, Message, Type, Silent) {
				Log.Add(logClassName + Place, Message, Type, Silent);
			}
			
			this.AddComponent = function (Component, ID) {
				try {
					CurrentStorage.AddComponent(Component, ID);
				} catch (err) {
					iLog("AddComponent", err, Log.Type.Error);
				}
			};
			this.GetComponent = function (ID) {
				try {
					return CurrentStorage.GetComponent(ID);
				} catch (err) {
					iLog("GetComponent", err, Log.Type.Error);
				}
			};
			this.GetCount = function () {
				try {
					return CurrentStorage.GetCount();
				} catch (err) {
					iLog("GetCount", err, Log.Type.Error);
				}
			};
			this.GetCurrentStorage = function () {
				try {
					return CurrentStorage;
				} catch (err) {
					iLog("GetCount", err, Log.Type.Error);
				}
			};
			this.GetItemArray = function () {
				try {
					return CurrentStorage.GetItemArray();
				} catch (err) {
					iLog("GetItemArray", err, Log.Type.Error);
				}
			};
			this.Remove = function (ID) {
				try {
					CurrentStorage.Remove(ID);
				} catch (err) {
					iLog("Remove", err, Log.Type.Error);
				}
			};
			this.Reset = function () {
				try {
					PreProcStorage.Reset();
					PostProcStorage.Reset();
				} catch (err) {
					iLog("Reset", err, Log.Type.Error);
				}
			};
			this.SetCurrentProcess = function (ProcessDivID) {
				if (ProcessDivID == "preproc")
					CurrentStorage = PreProcStorage;
				else
					CurrentStorage = PostProcStorage;
			};
			this.GetStorage = function (ProcessDivID) {
				if (ProcessDivID == "preproc")
					return PreProcStorage;
				else
					return PostProcStorage;
			};
		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	};
	
	return RuleStorage;
});

define('IconMover', ['RuleXML'], function (RuleXML) {
	var IconMover = new function () {
		var logClassName = "IconMover.";
		
		function iLog(Place, Message, Type, Silent) {
			Log.Add(logClassName + Place, Message, Type, Silent);
		}

		return {
		
			Load : function (id) {
				try {
					this.Ctrl = RuleStorage.GetComponent(id);
					this.Ctrl.OldEntry = this.Ctrl.GetIcon().GetEntryPoint();
					this.Ctrl.OldExit = this.Ctrl.GetIcon().GetExitPoint();
					var temp = RuleXML.GetFromComponent(id);
					if (temp != null) {
						this.FromJ1 = (temp.GetJ1() == this.Ctrl.GetID());
						this.From = temp.GetIcon().GetExitPoint();
					}
					if (this.Ctrl.GetJ1() != "") {
						temp = RuleStorage.GetComponent(this.Ctrl.GetJ1());
						this.J1 = temp.GetIcon().GetEntryPoint();
					}
					if ((this.Ctrl.GetJ2 != null) && (this.Ctrl.GetJ2() != "")) {
						temp = RuleStorage.GetComponent(this.Ctrl.GetJ2());
						this.J2 = temp.GetIcon().GetEntryPoint();
					}
				} catch (err) {
					iLog("Load", err, Log.Type.Error);
				}
			},
			MoveSelected : function (x, y) {
				var selected = RulesMaker.GetSelected();
				for (var i = 0; i < selected.length; i++) {
					var ctrl = RuleStorage.GetComponent(selected[i]);
					ctrl.Icon.MoveBy(x, y);
				}
			},
			Reset : function () {
				this.Ctrl = null;
				this.From = null;
				this.FromJ1 = null;
				this.J1 = null;
				this.J2 = null;
				this.Enabled = false;
			},
			Enable : function () {
				this.Enabled = true;
			},
			Refresh : function () {
				try {
					if (!this.Enabled)
						return;
					this.Ctrl.Icon.UpdateComment();
					Graphics.ReDraw();
				} catch (err) {
					iLog("Refresh", err, Log.Type.Error);
				}
			},
			Enabled : false,	// whether the control is enabled
			Ctrl : null,		// a rules maker component
			J1 : null,			// the primary point the control goes to
			J2 : null,			// the secondary point the control goes to
			From : null,		// the point that goes to the control
			FromJ1 : null,
			RefreshRate : 500	// the rate at which the canvas refreshes
		};
	};
	
	return IconMover;
});

define('IconConnector', ['ContextMenu'], function (ContextMenu) {
	var IconConnector = new function (undefined) {

		/* PRIVATE PROPERTIES */
		var logClassName = "IconConn.",
			_keyIsDown,
			_connecting,
			_releaseCount,
			_fromID,
			_toID,
			_fromComp,
			_toComp;
		
		/* PRIVATE METHODS */		
		function iLog(Place, Message, Type, Silent) {
			Log.Add(logClassName + Place, Message, Type, Silent);
		}
		
		return {
			Connecting : function () {
				return _connecting;
			},
			Reset : function () {
				_keyIsDown = false;
				_connecting = false;
				_releaseCount = 0;
				_fromID = null;
				_toID = null;
				if (_fromComp) {
					ContextMenu.Enabled = true;
					_fromComp.HighlightAsConnecting(false);
					_fromComp = null;
				}
				_toComp = null;
			},
			CanvasClicked : function (button) {
				try {
					iLog("CanvasClicked", "Btn=" + button);
					
					if (!_connecting)
						return;
					
					// First component have been clicked
					switch (button) {
					case 1:
						_toID = _fromComp.GetJ1();
						if (!_toID)
							return;
						
						_toComp = RuleStorage.GetComponent(_toID);
						this.DisConnect(_fromComp, _toComp, _fromComp.SetJ1);
						break;
					case 3:
						if (!_fromComp.SetJ2)
							return;
						
						_toID = _fromComp.GetJ2();
						if (!_toID)
							return;
						
						_toComp = RuleStorage.GetComponent(_toID);
						this.DisConnect(_fromComp, _toComp, _fromComp.SetJ2);
						break;
					}

				} catch (err) {
					iLog("CanvasClicked", err, Log.Type.Error);
				}
			},
			IconClicked : function (ID, button) {
				try {
					iLog("IconClicked", "ID=" + ID + ", Btn=" + button);
					
					// Don't do anything without the right key down
					if (!_connecting && !_keyIsDown)
						return;
					
					// Remember the first component clicked
					if (!_connecting && _keyIsDown && ID) {
						_fromID = ID;
						_connecting = true;
						_fromComp = RuleStorage.GetComponent(_fromID);
						_fromComp.HighlightAsConnecting(true);
						ContextMenu.Enabled = false;
						return;
					}
					
					// Ignore clicking on same component
					if (_fromID == ID)
						return;
					
					// Two different components have been clicked
					_toID = ID;
					_toComp = RuleStorage.GetComponent(_toID);
					
					switch (button) {
					case 1:
						if (_fromComp.SetJ1)
							this.Connect(_fromComp, _toComp, _fromComp.SetJ1);
						break;
					case 3:
						if (_fromComp.SetJ2)
							this.Connect(_fromComp, _toComp, _fromComp.SetJ2);
						break;
					}
				} catch (err) {
					iLog("IconClicked", err, Log.Type.Error);
				}
			},
			Connect : function (From, To, Set) {
				iLog("Connect", "From: " + From.GetID() + " To: " + To.GetID());
				
				var toID = To.GetID();
				
				// Disconnect the 2nd connection if it is the same
				if (From.GetJ2) {
					var id, fn;
					if (Set == From.SetJ2) {
						id = From.GetJ1();
						fn = From.SetJ1;
					} else {
						id = From.GetJ2();
						fn = From.SetJ2;
					}
					if (toID == id)
						this.DisConnect(From, To, fn);
				};
					
				Set(toID);
				Graphics.Refresh();
			},
			DisConnect : function (From, To, Set) {
				iLog("Disconnect", "From: " + From.GetID() + " To: " + To.GetID());
				
				Set("");
				Graphics.Refresh();
			},
			KeyDown : function (event) {
				try {
					_keyIsDown = event.which == 16;
				} catch (err) {
					iLog("KeyDown", err, Log.Type.Error);
				}
			},
			KeyUp : function () {
				_keyIsDown = false;
				if (_connecting) {
					_releaseCount++;
					if (_releaseCount > 1)
						IconConnector.Reset();
				}
			}
		};
	};
	
	IconConnector.Reset();
	$(document)
		.bind("keydown", IconConnector.KeyDown)
		.bind("keyup", IconConnector.KeyUp);
			
	return IconConnector;
});

define('RuleIcon', ['IconMover'], function (IconMover) {
	function RuleIcon() {
		try {
			/* PRIVATE PROPERTIES */
			var logClassName = "RuleIcon.";
			var CurrentPositionX;
			var CurrentPositionY;
			var _img = null;
			var _div = null;
			var _container = null;
			var _iconMover = null;
			var _component = null;

			/* PRIVATE METHODS */
			
			function iLog(Place, Message, Type, Silent) {
				var s = "";
				if (_img)
					s = _img.attr("id");
				if (s != "")
					s = s + ".";
				Log.Add(s + logClassName + Place, Message, Type, Silent);
			}
			function AddFeatures() {
				try {
					iLog("AddFeatures", "Called");
					
					_img.draggable({
						containment : "parent",
						grid : [32, 26],
						start : function () {
							Global.DisableHighlightingInChrome(true);
							
							CurrentPositionX = null;
							CurrentPositionY = null;
						},
						stop : function () {
							Global.DisableHighlightingInChrome(false);
							
							var selected = RulesMaker.GetSelected();
							for (var i = 0; i < selected.length; i++) {
								var id = selected[i];
								var ctrl = RuleStorage.GetComponent(id);
								if (ctrl) {
									try {
										var pos = ctrl.Icon.GetImage().position();
										ctrl.SetX(pos.left);
										ctrl.SetY(pos.top);
										ctrl.Icon.UpdateComment();
									} catch (err) {
										iLog("StopDragging", "Failed to update position of ID: " + id + ". Reason: " + err.message, Log.Type.Error, true);
									};
								} else
									iLog("StopDragging", "Cannot locate component ID: " + id, Log.Type.Warning);
							};
							Graphics.Refresh();
						},
						drag : function () {
							var img = $(this);
							var x = img.css("left");
							var y = img.css("top");
							if ((CurrentPositionX == x) && (CurrentPositionY == y))
								return;
							
							if (CurrentPositionX && CurrentPositionY) {
								var diffX = parseInt(x, 10) - parseInt(CurrentPositionX, 10);
								var diffY = parseInt(y, 10) - parseInt(CurrentPositionY, 10);
							} else {
								var diffX = null;
								var diffY = null;
							}

							CurrentPositionX = x;
							CurrentPositionY = y;
							
							var id = _img.attr("id");
							if (!RulesMaker.IsSelected(id)) {
								RulesMaker.ClearSelected();
								RulesMaker.AddSelected(id);
							};
							IconMover.MoveSelected(diffX, diffY);
						}
					});
				} catch (err) {
					iLog("AddFeatures", err, Log.Type.Error);
				}
			}
			function getEntryPoint() {
				try {
					var t = Utilities.ToNumber(_img.css("top"));
					var l = Utilities.ToNumber(_img.css("left"));
					var w = Utilities.ToNumber(_img.width());
					var x = l + parseInt(w / 2, 10);
					var y = t;
					return new Graphics.Point(x, y);
				} catch (err) {
					iLog("getEntryPoint", err, Log.Type.Error);
				}
			}
			function getExitPoint() {
				try {
					var t = Utilities.ToNumber(_img.css("top"));
					var l = Utilities.ToNumber(_img.css("left"));
					var w = Utilities.ToNumber(_img.width());
					var h = Utilities.ToNumber(_img.height());
					var x = l + parseInt(w / 2, 10);
					var y = t + h;
					return new Graphics.Point(x, y);
				} catch (err) {
					iLog("getExitPoint", err, Log.Type.Error);
				}
			}

			/* PUBLIC METHODS */

			this.Load = function (component) {
				try {
					iLog("Load", "Called");
					
					_component = component;
					var id = _component.GetID();
					_div = $("<div class='RuleIconComment' commentid='" + id + "'>");
					
					_img = $("<img/>");
					_img.attr("src", _component.Src);					
					_img.attr("id", id);
					_img.addClass("icon");
					_img.css("top", _component.GetY());
					_img.css("left", _component.GetX());
					_img.css("position", "absolute");
					_img.appendTo('<div/>'); // HACK to corect display in IE!

					AddFeatures();
				} catch (err) {
					iLog("Load", err, Log.Type.Error);
				}
			};
			this.AppendTo = function (Container) {
				try {
					_container = Container;
					_container.append(_img);
					_container.append(_div);

					this.UpdateComment();
					this.UpdateHint();
				} catch (err) {
					iLog("AppendTo", err, Log.Type.Error);
				}
			};
			// removes the image from the canvas
			this.Delete = function () {
				iLog("Delete", "Called");
				
				_container.find("div[commentid='" + _img.attr("id") + "']").remove();
				_img.remove();
			};
			this.GetContainer = function () {
				try {
					return _container;
				} catch (err) {
					iLog("GetContainer", err, Log.Type.Error);
				}
			};
			this.GetEntryPoint = function () {
				try {
					return getEntryPoint();
				} catch (err) {
					iLog("GetEntryPoint", err, Log.Type.Error);
				}
			};
			this.GetExitPoint = function () {
				try {
					return getExitPoint();
				} catch (err) {
					iLog("GetExitPoint", err, Log.Type.Error);
				}
			};
			this.GetImage = function () {
				return _img;
			};
			this.MoveBy = function (x, y) {
				var newX = parseInt(_img.css("left").replace("px", ""), 10) + x;
				var newY = parseInt(_img.css("top").replace("px", ""), 10) + y;
				_img.css("left", newX).css("top", newY);
			};
			this.SetIconMover = function (mover) {
				_iconMover = mover;
			};
			this.UpdateComment = function () {
				try {
					_div.text(_component.GetID() + ": " + _component.GetComment());
					_div.css("top", _img.css("top")).css("left", _img.css("left"));
				} catch (err) {
					iLog("UpdateComment", err, Log.Type.Error);
				}
			};
			this.UpdateHint = function () {
				try {
					_img.attr("title", _component.GetFormatedData());
				} catch (err) {
					iLog("UpdateHint", err, Log.Type.Error);
				}
			};

		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	}
	
	return RuleIcon;
});

// This script provides standard functions used by Javascript Control Objects found in the controls.js
define('RuleHelper', ['RuleIcon'], function (RuleIcon) {
	// Building componentTypes isn't safe, but if we don't do it this way we will encounter circular dependency issues (because many components depend upon RuleHelper). Oh well
	var componentTypeIncludes = {
		'CSF' : 'rules/component/CompiledScriptFunction',
		'SCRIPT' : 'rules/component/Script',
		'SQLTRN' : 'rules/component/SqlTrn',
		'ERROR' : 'rules/component/Error',
		'EXTERNAL' : 'rules/component/External',
		'IF' : 'rules/component/If',
		'INSERTUPDATEQUERY' : 'rules/component/InsertUpdateQuery',
		'MATH' : 'rules/component/Math',
		'SELECTQUERY' : 'rules/component/SelectQuery',
		'SET' : 'rules/component/Set',
		'TEMPLATE' : 'rules/component/Template'
	};
	
	var includes = [];
	var types = [];
	var key;	
	for (key in componentTypeIncludes) {
		if (Object.prototype.hasOwnProperty.call(componentTypeIncludes, key)) {
			includes.push(componentTypeIncludes[key]);
			types.push(key);
		}
	}
	
	var componentTypes = {};	
	require(includes, function () {
		for (var i = 0; i < types.length; ++i)
			componentTypes[types[i]] = arguments[i];
	});
	
	var RuleHelper = new function () {
		var logClassName = "RuleHelper.";
		
		try {
			function iLog(Place, Message, Type, Silent) {
				Log.Add(logClassName + Place, Message, Type, Silent);
			}
			function LoadRulesMakerComponent(xmlNode) {
				try {
					var Type = $(xmlNode).find(">t").text();
					Type.toUpperCase();
					var fn = componentTypes[Type];
					var ctrl = new fn();
					ctrl.Load(xmlNode);
					return ctrl;
				} catch (err) {
					iLog("LoadRulesMakerComponent", err, Log.Type.Error);
				}
			}
			
			return {
			
				Search : function (str, caseSensitive) {
					try {
						var proc = ["preproc", "postproc"];
						var rs, arr, ctrl;
						for (var p = 0; p < proc.length; p++) {
							rs = RuleStorage.GetStorage(proc[p]);
							if (str == "")
								iLog("Search", "Clearing", Log.Type.Info);
							else
								iLog("Search", "Searching " + rs.GetCount() + " " + proc[p] + " components for '" + str + "'", Log.Type.Debug);
							arr = rs.GetItemArray();
							for (var i = 0; i < arr.length; i++) {
								ctrl = arr[i];
								if (ctrl.Search)
									ctrl.Search(str, caseSensitive);
								else
									iLog("Search", Utilities.ToString(ctrl), Log.Type.Warning);
							}
						}
					} catch (err) {
						iLog("Search", err, Log.Type.Error);
					}
				},
				LoadComponents : function (xmlNode, divTarget) {
					try {
						iLog("LoadComponents", "Called");
						
						div = $(divTarget);
						div.html('');
						$(xmlNode).find(">c").each(function () {
							var component = LoadRulesMakerComponent(this);
							var Icon = new RuleIcon();
							Icon.Load(component);
							component.SetIcon(Icon);
							Icon.AppendTo(div);
							RuleStorage.AddComponent(component, component.GetID());
							component.UpdateWatchpoint();
						});
					} catch (err) {
						iLog("LoadComponents", err, Log.Type.Error);
					}
				},
				GetComponent : function (ID) {
					var ctrl = GetStoredObject(ID);
				},
				CreateComponent : function (strType) {
					try {
						iLog("CreateComponent", "Called");
						
						var ctrl = null;
						var fn = componentTypes[strType];
						ctrl = new fn();
						if (ctrl == null)
							throw "The component of type '" + strType + "' could not be created!";
						ctrl.Create();
						return ctrl;
					} catch (err) {
						iLog("CreateComponent", err, Log.Type.Error);
					}
				},
				ComponentTypes : componentTypes
			};
		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	};
	
	return RuleHelper;
});

define('Undo', [], function () {
	var Undo = new function () {
	
		var logClassName = "Undo.";
		var _undo = new Array();
		var _redo = new Array();
		
		function iLog(Place, Message, Type, Silent) {
			Log.Add(logClassName + Place, Message, Type, Silent);
		}

		return {
		
			Add : function (undoObject) {
				_undo.push(undoObject);
			},
			CanRedo : function () {
				return _redo.length > 0;
			},
			CanUndo : function () {
				return _undo.length > 0;
			},
			Redo : function () {
				try {
					var obj = _redo.pop();
					if (obj == null)
						return;
					_undo.push(obj);
					obj.Redo();
				} catch (err) {
					iLog("Redo", err, Log.Type.Error);
				}
			},
			Reset : function () {
				_undo.reset();
				_redo.reset();
			},
			Undo : function () {
				try {
					var obj = _undo.pop();
					if (obj == null)
						return;
					_redo.push(obj);
					obj.Undo();
				} catch (err) {
					iLog("Undo", err, Log.Type.Error);
				}
			}
		};
	};
	
	return Undo;
});

define('UndoObject', [], function () {
	function UndoObject() {
	
		var logClassName = "UndoObj.";
		var _undoCallback = null;
		var _undoParameters = null;
		var _redoCallback = null;
		var _redoParameters = null;

		function iLog(Place, Message, Type, Silent) {
			Log.Add(logClassName + Place, Message, Type, Silent);
		}

		this.AddRedo = function (redoCallback, redoParams) {
			_redoCallback = redoCallback;
			_redoParameters = redoParams;
		};
		this.AddUndo = function (undoCallback, undoParams) {
			_undoCallback = undoCallback;
			_undoParameters = undoParams;
		};
		this.Redo = function () {
			try {
				_redoCallback(_redoParameters);
			} catch (err) {
				iLog("Redo", err, Log.Type.Error);
			}
		};
		this.Undo = function () {
			try {
				_undoCallback(_undoParameters);
			} catch (err) {
				iLog("Undo", err, Log.Type.Error);
			}
		};
	}
	
	return UndoObject;
});

define('RulesMaker', ['RuleHelper', 'RuleStorage', 'Utilities', 'RuleXML', 'ContextMenu', 'ContextMenuItems', 'Undo', 'UndoObject', 'Editor'], function (RuleHelper, RuleStorage, Utilities, RuleXML, ContextMenu, ContextMenuItems, Undo, UndoObject, Editor) {
	var RulesMaker = new function () {
		try {
			/* PRIVATE VARIABLES */
			var logClassName = "RulesMaker.";
			var _preProcess = null;
			var _postProcess = null;
			var _currentComponentID = null;
			var selected = new Array();
			var copiedXML = "";
			var ruleToolBar = null;
			var compToolBar = null;
			
			/* PRIVATE METHODS */

			function iLog(Place, Message, Type, Silent) {
				Log.Add(logClassName + Place, Message, Type, Silent);
			}
			function AddFeatures(div) {
				try {
					iLog("AddFeatures", "Called");
				}
				catch (err) {
					iLog("AddFeatures", err, Log.Type.Error);
				}
			}
			function RemoveFeatures(div) {
				try {
					iLog("RemoveFeatures", "Called");
					
					div = $(div);
				} catch (err) {
					iLog("RemoveFeatures", err, Log.Type.Error);
				}
			}
			function NewComponent(strType) {
				return RuleHelper.CreateComponent(strType);
			}
			function InitRuleToolbar() {
				try {
					iLog("InitRuleToolbar", "Called");
					
					ruleToolBar = $('#RuleToolbar');
					ruleToolBar
						.draggable({
							cancel: "img",
							start: function( event, ui ) {
								Global.DisableHighlightingInChrome(true);
							},
							stop: function( event, ui ) {
								Global.DisableHighlightingInChrome(false);
								Global.UpdateLastPosition(ruleToolBar, ui);
							}
						})
						.resizable({
							start: function( event, ui ) {
								Global.DisableHighlightingInChrome(true);
							},
							stop: function( event, ui ) {
								Global.DisableHighlightingInChrome(false);
							}
						})
						.disableSelection()
						.hide();
					
					var cfg = MP.Tools.Config.Editor.toolBars.process;
					ruleToolBar
						.css('left', cfg.position.left + 'px')
						.css('top', cfg.position.top + 'px')
						.data('lastLeft', cfg.position.left)
						.data('lastTop', cfg.position.top);
					if (cfg.width)
						ruleToolBar.css('width', cfg.width + 'px');

					var accept = [];
					ruleToolBar.find("img[ref]").each(function () {
						var ref = $(this).attr("ref");
						var fn = RuleHelper.ComponentTypes[ref];
						var ctrl = new fn();
						$(this)
							.attr("title", ctrl.Title + "\n\n" + ctrl.ToolTip)
							.attr('draggable', false)
							.draggable({
								helper : 'clone',
								start: function() {
									Global.DisableHighlightingInChrome(true);
								},
								stop: function() {
									Global.DisableHighlightingInChrome(false);
								}
							});
						accept.push(ref);
					});

					$("#preproc, #postproc").droppable({
						accept : Utilities.GetAcceptedComponents(accept),
						greedy : true,
						activeClass : 'droppable-active',
						hoverClass : 'droppable-hover',
						drop : function (ev, ui) {
							var pos = {
								left: ui.offset.left - $(this).offset().left,
								top : ui.offset.top - $(this).offset().top
							};
							RulesMaker.AddComponent($(ui.draggable), pos);
						}
					});
					
					$(window).bind('scroll.RuleToolBar', function () {
						if (ruleToolBar.is(":visible"))
							ruleToolBar.css('top', (ruleToolBar.data('lastTop') + $(document).scrollTop()) + "px");
					});
				} catch (err) {
					iLog("InitRuleToolbar", err, Log.Type.Error);
				}
			}
			function InitCompToolbar() {
				try {
					iLog("InitCompToolbar", "Called");
					
					compToolBar = $('#ComponentToolbar');
					compToolBar
						.draggable({
							cancel: "img",
							start: function( event, ui ) {
								Global.DisableHighlightingInChrome(true);
							},
							stop: function( event, ui ) {
								Global.DisableHighlightingInChrome(false);
								Global.UpdateLastPosition(compToolBar, ui);
							}
						})
						.resizable({
							start: function( event, ui ) {
								Global.DisableHighlightingInChrome(true);
							},
							stop: function( event, ui ) {
								Global.DisableHighlightingInChrome(false);
							}
						})
						.disableSelection()
						.hide();
					
					var cfg = MP.Tools.Config.Editor.toolBars.page;
					compToolBar
						.css('left', cfg.position.left + 'px')
						.css('top', cfg.position.top + 'px')
						.data('lastLeft', cfg.position.left)
						.data('lastTop', cfg.position.top);
					if (cfg.width)
						compToolBar.css('width', cfg.width + 'px');

					compToolBar.find("img[ref]").each(function () {
						$(this)
							.attr('draggable', false)
							.draggable({
								helper : 'clone',
								start: function() {
									Global.DisableHighlightingInChrome(true);
								},
								stop: function() {
									Global.DisableHighlightingInChrome(false);
								}
							});
					});
					
					$(window).bind('scroll.CompToolBar', function () {
						if (compToolBar.is(":visible"))
							compToolBar.css('top', (compToolBar.data('lastTop') + $(document).scrollTop()) + "px");
					});
				} catch (err) {
					iLog("InitCompToolbar", err, Log.Type.Error);
				}
			}
			function MakeContextMenu() {
				try {
					var m = new ContextMenuItems();
					var i;
					
					i = m.Add("Copy >");
						m.Add("Quick", function () { RulesMaker.CopyToBrowser(false); }, i);
					if (Browser.IsMSIE())
						m.Add("Clipboard", function () { RulesMaker.CopyToClipboard(false); }, i);
						m.Add("Export", function () { RulesMaker.CopyToTextarea(false); }, i);

					i = m.Add("Cut >");
						m.Add("Quick", function () { RulesMaker.CopyToBrowser(true); }, i);
					if (Browser.IsMSIE())
						m.Add("Clipboard", function () { RulesMaker.CopyToClipboard(true); }, i);
						m.Add("Export", function () { RulesMaker.CopyToTextarea(true); }, i);

					i = m.Add("Paste >");
						m.Add("Quick", function () { RulesMaker.PasteFromBrowser(); }, i);
					if (Browser.IsMSIE())
						m.Add("Clipboard", function () { RulesMaker.PasteFromClipboard(); }, i);
						m.Add("Import", function () { RulesMaker.PasteFromTextarea(); }, i);

					i = m.Add("Select >");
						m.Add("All", function () { RulesMaker.SelectAll(); }, i);
						m.Add("Below", function () { RulesMaker.SelectBelow(); }, i);

					i = m.Add("Component >");
						m.Add("Delete", function () { RulesMaker.DeleteSelected(); }, i);
						m.Add("Disconnect", function () { RulesMaker.DisconnectSelected(); }, i);
						m.Add("Snap to Grid", function () { RulesMaker.SnapToGrid(); }, i);
					
					i = m.Add("Search >");
						m.Add("Search...", function () { Editor.Search(); }, i);
						m.Add("Clear", function () { Editor.ClearSearch(); }, i);

					i = m.Add("Watch Points >");
						m.Add("Set", function () { RulesMaker.SetWatchpoints(true); }, i);
						m.Add("Clear", function () { RulesMaker.SetWatchpoints(false); }, i);
						m.Add("Clear All", function () { RulesMaker.ClearWatchpoints(); }, i);
					
					i = m.Add("File >");
					if (Editor.Enabled && !Editor.LockedBy) {
						m.Add("Quick Save", function () { PropertyEd.QuickSave(); }, i);
						m.Add("Save & Exit", function () { PropertyEd.Save(); }, i);
					};
						m.Add("Exit...", function () { PropertyEd.Disable(); }, i);
					
					return m.GetHTML();

					/*LK: Not working. Dangerous!
					if (Undo.CanUndo())
						m.Add("Undo Last Delete", function () { Undo.Undo(); });
					if (Undo.CanRedo())
						m.Add("Redo", function () { Undo.Redo(); });
					*/
				} catch (err) {
					iLog("MakeContextMenu", err, Log.Type.Error);
				}
			}
			
			return {
				Initialized : false,
				CurrentProcess : "",
				
				/* PUBLIC METHODS */
				DeleteComponent : function () {
					iLog("DeleteComponent", "Called");
					
					if (_currentComponentID == null)
						return;
					var ctrl = RuleStorage.GetComponent(_currentComponentID);
					ctrl.Delete();
					ctrl = null;
					RuleXML.DeleteComponent(_currentComponentID);
					RuleStorage.Remove(_currentComponentID);
					_currentComponentID = null;
					Graphics.Refresh();
				},
				AddComponent : function (Component, Position) {
					try {
						iLog("AddComponent", "Called");
						
						// Make new component
						var Ref = $(Component).attr("ref");
						var ctrl = NewComponent(Ref);
						RuleXML.AddComponent(ctrl.GetNode());

						// Set X/Y
						ctrl.SetX(Utilities.SnapTo(Position.left, 32));
						ctrl.SetY(Utilities.SnapTo(Position.top, 26));

						// Make its icon
						var icon = new RuleIcon();
						icon.Load(ctrl);
						icon.AppendTo($("#" + RuleXML.CurrentProcess));
						ctrl.SetIcon(icon);
						
						RuleStorage.AddComponent(ctrl, ctrl.GetID());
					} catch (err) {
						iLog("AddComponent", err, Log.Type.Error);
					}
				},
				Enable : function () {
					try {
						iLog("Enable", "Called");
						
						AddFeatures(_preProcess);
						AddFeatures(_postProcess);
						if (Editor.Enabled && !Editor.LockedBy) {
							this.ToggleToolbar(ruleToolBar, true);
							this.ToggleToolbar(compToolBar, true);
						};
						//Undo.Reset();
					} catch (err) {
						iLog("Enable", err, Log.Type.Error);
					}
				},
				Disable : function () {
					try {
						iLog("Disable", "Called");
						
						this.ToggleToolbar(ruleToolBar, false);
						this.ToggleToolbar(compToolBar, false);
						RemoveFeatures(_preProcess);
						RemoveFeatures(_postProcess);
						RuleStorage.Reset();
						_preProcess.html("");
						_postProcess.html("");
						Graphics.ClearGraphics();
						//Undo.Reset();
					} catch (err) {
						iLog("Disable", err, Log.Type.Error);
					}
				},
				ToggleToolbar : function (toolBar, show) {
					try {
						iLog("ToggleToolbar", "Called");
						
						if (show)
							toolBar.show();
						else
							toolBar.hide();
					} catch (err) {
						iLog("ToggleToolbar", err, Log.Type.Error);
					}
				},
				GetCurrentComponent : function () {
					return RuleStorage.GetComponent(_currentComponentID);
				},
				HandleServerError : function (process, component, message) {
					try {
						// Switch to the process
						if (process && component) {
							iLog("HandleServerError", "Could not compile " + component, Log.Type.Error, true);
						
							var s = process.toLowerCase();
							s = s.replace(/process/, "proc");
							RulesMaker.ShowProcessTab(s);

							var buttons = null;
							var id = component.split("_").pop();
							var ctrl = RuleStorage.GetComponent(id);
							if (ctrl) {
								ctrl.HighlightAsError(true);
								
								buttons = {
									'Close' : function () {
										$(this).dialog('close');
									},
									'Jump To The Component' : function () {
										$(this).dialog('close');
										if (ctrl)
											Global.ScrollToElement(ctrl.Icon.GetImage(), 1000);
									}
								};
							};
						} else {
							iLog("HandleServerError", message, Log.Type.Error, true);
						};
						
						Global.ShowErrorMessage(message, 'Compile Error', buttons);
					} catch (err) {
						iLog("HandleServerError", err, Log.Type.Error);
					}
				},
				// Sets up the rules maker editor, only call once
				Initialize : function (PreProcessDiv, PostProcessDiv) {
					try {
						if (this.Initialized)
							return;
						iLog("Initialize", "Called");
						
						_preProcess = $(PreProcessDiv);
						_postProcess = $(PostProcessDiv);
						var preID = _preProcess.attr("id");
						var postID = _postProcess.attr("id");
						
						Graphics.Initialize(preID, postID);
						this.ShowProcessTab(preID);
						
						InitRuleToolbar();
						InitCompToolbar();
						
						this.Initialized = true;
					} catch (err) {
						iLog("Initialize", err, Log.Type.Error);
					}
				},
				EnsureSelection : function (id) {
					if (!selected.length)
						this.AddSelected(id);
				},
				SelectThisOnlyIfNotSelected : function (id) {
					if (!this.IsSelected(id)) {
						this.ClearSelected();
						this.AddSelected(id);
					};
				},
				IsSelected : function (id) {
					return (id && $.inArray(id, selected) > -1);
				},
				AddSelected : function (id) {
					if (!id)
						return;
					if (this.IsSelected(id))
						return;
					var ctrl = RuleStorage.GetComponent(id);
					if (!ctrl)
						return;

					ctrl.HighlightAsFound(false);
					ctrl.HighlightAsError(false);
					ctrl.HighlightAsWatchpoint(false);
					ctrl.HighlightAsSelected(true);
					selected.push(id);
				},
				SelectAll : function () {
					try {
						iLog("SelectAll", "Called");
						
						RulesMaker.ClearSelected();
						var arr = RuleStorage.GetItemArray();
						for (var i = 0; i < arr.length; i++)
							RulesMaker.AddSelected(arr[i].GetID());
					} catch (err) {
						iLog("SelectAll", err, Log.Type.Error);
					}
				},
				SelectBelow : function () {
					try {
						iLog("SelectBelow", "Called");
						
						RulesMaker.ClearSelected();
						var arr = RuleStorage.GetItemArray();
						for (var i = 0; i < arr.length; i++) {
							var ctrl = arr[i];
							if (ctrl.GetY() > ContextMenu.OffsetY)
								RulesMaker.AddSelected(ctrl.GetID());
						};
					} catch (err) {
						iLog("SelectBelow", err, Log.Type.Error);
					}
				},
				ClearSelected : function () {
					try {
						iLog("ClearSelected", "Called");
						
						var arr = RuleStorage.GetItemArray();
						for (var i = 0; i < arr.length; i++) {
							var ctrl = arr[i];
							ctrl.HighlightAsSelected(false);
						};
						selected = null;
						selected = [];
					} catch (err) {
						iLog("ClearSelected", err, Log.Type.Error);
					}
				},
				GetSelectedComponentsXmlString : function () {
					try {
						iLog("GetSelectedComponentsXmlString", "Called");
						
						if (selected.length == 0)
							selected.push($(ContextMenu.EventComponent).attr("id"));
						var s = "";
						for (var i = 0; i < selected.length; i++) {
							var id = selected[i];
							s += RuleXML.GetComponent(id);
						}
						return s;
					} catch (err) {
						iLog("GetSelectedComponentsXmlString", err, Log.Type.Error);
					}
				},
				AddComponentsFromXmlString : function (xml) {
					try {
						iLog("AddComponentsFromXmlString", "Called");
						
						xml = Utilities.Trim(xml);
						if (!((xml) && (xml.substring(0, 3) == "<c>") && (xml.substring(xml.length - 4) == "</c>")))
							return;

						copiedXML = xml;
						
						// Find difference between last rule ID and the lowest ID in the xml
						xml = $(Utilities.ParseXML("<str>" + xml + "</str>"));
						var n = xml.find("str>c>n");
						var minID = 10000000;
						n.each(function () {
							var x = parseInt($(this).text(), 10);
							minID = x < minID ? x : minID;
						});

						var factor = RuleXML.GetNextComponentNumber() - minID;						
						var offsetX = ContextMenu.OffsetX;
						var offsetY = ContextMenu.OffsetY;
						var minX = 0, minY = 10000000;
						var newSelects = [];
						
						// Update IDs, Find top most component
						n.each(function () {
							var newID = parseInt($(this).text(), 10) + factor;
							$(this).text(newID);
							newSelects.push(newID);
							
							var par = $(this).parent();
							var elmX = par.find(">x");
							var elmY = par.find(">y");
							var posX = parseInt(elmX.text());
							var posY = parseInt(elmY.text());
							if (posY < minY) {
								minX = posX;
								minY = posY;
							}
						});

						// Update X, Y, Snap to grid, Find lowest Y
						n.each(function () {
							var par = $(this).parent();
							var elmX = par.find(">x");
							var elmY = par.find(">y");
							var posX = parseInt(elmX.text());
							var posY = parseInt(elmY.text());
							var x = posX - minX + offsetX;
							var y = posY - minY + offsetY;
							x = Utilities.SnapTo(x, 32);
							y = Utilities.SnapTo(y, 26);
							elmX.text(x);
							elmY.text(y);
						});
						
						// Update/remove jumps
						xml.find("str>c>j").each(function () {
							var nj;
							var oj = parseInt($(this).text(), 10);
							if (isNaN(oj))
								nj = 0;
							else
								nj = oj + factor;
							if ($.inArray(nj, newSelects) > -1)
								$(this).text(nj);
							else
								$(this).text("");
						});
						
						// Append and select the XML elements
						RuleXML.AppendXML(xml.find("str>c"));
						RulesMaker.Load(RuleXML.GetVRM());
						RulesMaker.ClearSelected();
						for (var i = 0; i < newSelects.length; i++)
							RulesMaker.AddSelected(newSelects[i]);
					} catch (err) {
						iLog("AddComponentsFromXmlString", err, Log.Type.Error);
					}
				},
				CopyToBrowser : function (doCut) {
					try {
						iLog("CopyToBrowser", "Called");
						
						copiedXML = RulesMaker.GetSelectedComponentsXmlString();
						if (copiedXML && doCut)
							RulesMaker.DeleteSelected();
					} catch (err) {
						iLog("CopyToBrowser", err, Log.Type.Error);
					}
				},
				PasteFromBrowser : function () {
					try {
						iLog("PasteFromBrowser", "Called");
						
						RulesMaker.AddComponentsFromXmlString(copiedXML);
					} catch (err) {
						iLog("PasteFromBrowser", err, Log.Type.Error);
					}
				},
				CopyToClipboard : function (doCut) {
					try {
						iLog("CopyToClipboard", "Called");
						
						copiedXML = RulesMaker.GetSelectedComponentsXmlString();
						Global.SetClipboard(copiedXML);
						if (copiedXML && doCut)
							RulesMaker.DeleteSelected();
					} catch (err) {
						iLog("CopyToClipboard", err, Log.Type.Error);
					}
				},
				PasteFromClipboard : function () {
					try {
						iLog("PasteFromClipboard", "Called");
						
						var s = Global.GetClipboard();
						RulesMaker.AddComponentsFromXmlString(s);
					} catch (err) {
						iLog("PasteFromClipboard", err, Log.Type.Error);
					}
				},
				CopyToTextarea : function (doCut) {
					try {
						iLog("CopyToTextarea", "Called");
						
						copiedXML = RulesMaker.GetSelectedComponentsXmlString();
						if (copiedXML && doCut)
							RulesMaker.DeleteSelected();
						Editor.ShowTextareaForm(copiedXML);
					} catch (err) {
						iLog("CopyToTextarea", err, Log.Type.Error);
					}
				},
				PasteFromTextarea : function () {
					try {
						iLog("PasteFromTextarea", "Called");
						
						Editor.ShowTextareaForm('', function (s) {
							RulesMaker.AddComponentsFromXmlString(s);
						});
					} catch (err) {
						iLog("PasteFromTextarea", err, Log.Type.Error);
					}
				},
				DeleteSelected : function () {
					try {
						iLog("DeleteSelected", "Called");
						
						if (!selected.length)
							selected.push($(ContextMenu.EventComponent).attr("id"));
						//var uo = new UndoObject();
						//uo.AddUndo(RulesMaker.Load, RuleXML.GetVRM().xml);
						for (var i = 0; i < selected.length; i++) {
							var id = selected[i];
							var ctrl = RuleStorage.GetComponent(id);
							if (ctrl) {
								ctrl.Delete();
								ctrl = null;
								RuleXML.DeleteComponent(id);
								RuleStorage.Remove(id);
							}
						}
						//uo.AddRedo(RulesMaker.Load, RuleXML.GetVRM().xml);
						//Undo.Add(uo);
						RulesMaker.ClearSelected();
						Graphics.Refresh();
					} catch (err) {
						iLog("DeleteSelected", err, Log.Type.Error);
					}
				},
				DisconnectSelected : function () {
					try {
						iLog("DisconnectSelected", "Called");
						
						if (!selected.length)
							selected.push($(ContextMenu.EventComponent).attr("id"));
						for (var i = 0; i < selected.length; i++) {
							var id = selected[i];
							var ctrl = RuleStorage.GetComponent(id);
							if (ctrl) {
								if (ctrl.SetJ1)
									ctrl.SetJ1('');
								if (ctrl.SetJ2)
									ctrl.SetJ2('');
							}
						}
						Graphics.Refresh();
					} catch (err) {
						iLog("DisconnectSelected", err, Log.Type.Error);
					}
				},
				SnapToGrid : function () {
					try {
						iLog("SnapToGrid", "Called");
						
						if (selected.length == 0)
							selected.push($(ContextMenu.EventComponent).attr("id"));
						for (var i = 0; i < selected.length; i++) {
							var id = selected[i];
							var ctrl = RuleStorage.GetComponent(id);
							if (!ctrl)
								continue;

							var pos1, pos2, offX, offY;

							pos1 = ctrl.GetX();
							pos2 = Utilities.SnapTo(pos1, 32);
							ctrl.SetX(pos2);
							offX = pos2 - pos1;

							pos1 = ctrl.GetY();
							pos2 = Utilities.SnapTo(pos1, 26);
							ctrl.SetY(pos2);
							offY = pos2 - pos1;
							
							ctrl.Icon.MoveBy(offX, offY);
						}
						Graphics.Refresh();
					} catch (err) {
						iLog("SnapToGrid", err, Log.Type.Error);
					}
				},
				SetWatchpoints : function (value) {
					try {
						iLog("SetWatchpoints", "Called");
						
						if (selected.length == 0)
							selected.push($(ContextMenu.EventComponent).attr("id"));
						for (var i = 0; i < selected.length; i++) {
							var id = selected[i];
							var ctrl = RuleStorage.GetComponent(id);
							if (ctrl)
								ctrl.SetWatchpoint(value);
						};
					} catch (err) {
						iLog("SetWatchpoints", err, Log.Type.Error);
					}
				},
				ClearWatchpoints : function () {
					try {
						iLog("ClearWatchpoints", "Called");
						
						var arr = RuleStorage.GetItemArray();
						for (var i = 0; i < arr.length; i++) {
							var ctrl = arr[i];
							ctrl.SetWatchpoint(false);
							ctrl.UpdateWatchpoint();
						};
					} catch (err) {
						iLog("ClearWatchpoints", err, Log.Type.Error);
					}
				},
				AdjustCanvasHeight : function () {
					try {
						iLog("AdjustCanvasHeight", "Called");
						
						var maxY = 0;
						var arr = RuleStorage.GetItemArray();
						for (var i = 0; i < arr.length; i++) {
							var ctrl = arr[i];
							var y = ctrl.GetY();
							maxY = y > maxY ? y : maxY;
						};

						maxY = Utilities.SnapTo(maxY, 100) + 500;
						RulesMaker.SetCanvasHeight(maxY);
					} catch (err) {
						iLog("AdjustCanvasHeight", err, Log.Type.Error);
					}
				},
				GetSelected : function () {
					return selected;
				},
				// called from Communication.EditorRequest passing in the vrm xml document
				Load : function (xml) {
					try {
						iLog("Load", "Called");
						
						if (typeof xml == "string")
							xml = Utilities.ParseXML(xml);
						RuleXML.Load(xml);
						RuleStorage.Reset();

						var origCP = RulesMaker.CurrentProcess || "preproc";
						var workCP;

						RulesMaker.SetCurrentProcess("preproc");
						workCP = RulesMaker.CurrentProcess;
						RuleHelper.LoadComponents(RuleXML.GetPreProcessXML(), _preProcess);
						ContextMenu.Add("#" + workCP, MakeContextMenu, workCP + "canvas");
						RulesMaker.AdjustCanvasHeight();

						RulesMaker.SetCurrentProcess("postproc");
						workCP = RulesMaker.CurrentProcess;
						RuleHelper.LoadComponents(RuleXML.GetPostProcessXML(), _postProcess);
						ContextMenu.Add("#" + workCP, MakeContextMenu, workCP + "canvas");
						RulesMaker.AdjustCanvasHeight();

						RulesMaker.SetCurrentProcess(origCP);
						RulesMaker.Enable();
					} catch (err) {
						iLog("Load", err, Log.Type.Error);
					}
				},
				Save : function () {
					try {
						iLog("Save", "Called");
						
						Communication.EditorUpdate(false);
					} catch (err) {
						iLog("Save", err, Log.Type.Error);
					}
				},
				GetCanvasHeight : function () {
					try {
						iLog("GetCanvasHeight", "Called");
						
						if (RulesMaker.CurrentProcess == "preproc")
							return Utilities.ToNumber(_preProcess.css("height"));
						else
							return Utilities.ToNumber(_postProcess.css("height"));
					} catch (err) {
						iLog("GetCanvasHeight", err, Log.Type.Error);
					}
				},
				SetCanvasHeight : function (newHeight) {
					try {
						iLog("SetCanvasHeight", "Called");
						
						//LK: UI does not supply newHeight so increase it by user config!
						var proc = RulesMaker.CurrentProcess == "preproc" ? _preProcess : _postProcess;
						var height = newHeight || Utilities.ToNumber(proc.css("height")) + MP.Tools.Config.Editor.tabs.process.extendBy;
						proc.css("height", height);
						$("#" + RulesMaker.CurrentProcess + "canvas").css("height", height);

						Graphics.Refresh();
					} catch (err) {
						iLog("SetCanvasHeight", err, Log.Type.Error);
					}
				},
				ShowProcessTab : function (ProcessDivID) {
					var s = ProcessDivID.replace(/proc/, "link");
					$("#" + s).click();
				},
				SetCurrentProcess : function (ProcessDivID) {
					try {
						RulesMaker.CurrentProcess = ProcessDivID;
						RuleXML.CurrentProcess = ProcessDivID;
						Graphics.SetCurrentProcess(ProcessDivID);
						RuleStorage.SetCurrentProcess(ProcessDivID);
					} catch (err) {
						iLog("SetCurrentProcess", err, Log.Type.Error);
					}
				},
				ShowProperties : function (ID) {
					try {
						iLog("ShowProperties", "Called");
						
						var ctrl = RuleStorage.GetComponent(ID);
						if (ctrl == null)
							return;
						var properties = ctrl.GetProperties();
						PropertyEd.Show(properties, this.DeleteComponent, ctrl.Title);
						_currentComponentID = ID;
					} catch (err) {
						iLog("ShowProperties", err, Log.Type.Error);
					}
				},
				RefreshProperties : function () {
					try {
						this.ShowProperties(_currentComponentID);
					} catch (err) {
						iLog("RefreshProperties", err, Log.Type.Error);
					}
				},
				ComplexArgs : function (GetProperties, AddParam, DeleteParam) {
					this.GetProperties = GetProperties;
					this.AddParam = AddParam;
					this.DeleteParam = DeleteParam;
				}
			};
		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	};
	
	return RulesMaker;
});

/*    Copyright 2008-2010 Maximum Processing Inc
 */
define('RuleGraphics', ['IconMover', 'RuleIcon', 'RuleStorage', 'RulesMaker', 'RuleXML'], function (IconMover, RuleIcon, RuleStorage, RuleMaker, RuleXML) {
	var Graphics = new function () {
		
		var logClassName = "Graphics.";
		var _pre = null;
		var _post = null;
		var _canvas = null;
		var Color1 = "#61AEF1";
		var Color2 = "#9B9B9B";
		var isClear = false;
		
		function iLog(Place, Message, Type, Silent) {
			Log.Add(logClassName + Place, Message, Type, Silent);
		}
		function DrawLines(Lines, Color) {
			try {
				isClear = false;
				if (Color != null)
					_canvas.setColor(Color);
				_canvas.setStroke(2);
				var arm = 10;
				var d = arm;
				var tr = 4;
				for (var i = 0; i < Lines.length; i++) {
					var Line = Lines[i];
					if (Line.Color != null)
						_canvas.setColor(Line.Color);
					// A - B
					_canvas.drawLine(Line.Start.X, Line.Start.Y, Line.Start.X, Line.Start.Y + arm);
					var factor = (Line.Stop.X - Line.Start.X) / 2;
					if ((factor == 0) && (Line.Stop.Y <= Line.Start.Y))
						factor = -20;
					// B - C
					_canvas.drawLine(Line.Start.X, Line.Start.Y + arm, Line.Start.X + factor, Line.Start.Y + arm);
					// C - D
					_canvas.drawLine(Line.Start.X + factor, Line.Start.Y + arm, Line.Start.X + factor, Line.Stop.Y - arm);
					// D - E
					_canvas.drawLine(Line.Start.X + factor, Line.Stop.Y - arm, Line.Stop.X, Line.Stop.Y - arm);
					// E - F
					_canvas.drawLine(Line.Stop.X, Line.Stop.Y - arm, Line.Stop.X, Line.Stop.Y);
					// arrows
					var x = [Line.Stop.X, Line.Stop.X - tr, Line.Stop.X + tr, Line.Stop.X];
					var y = [Line.Stop.Y, Line.Stop.Y - tr, Line.Stop.Y - tr, Line.Stop.Y];
					_canvas.fillPolygon(x, y);
				}
			} catch (err) {
				iLog("DrawLines", err, Log.Type.Error);
			}
		}
		function DiagonalDrawLines(Lines, Color) {
			try {
				if (Color != null)
					_canvas.setColor(Color);
				_canvas.setStroke(2);
				var arm = 10;
				var d = arm;
				var tr = 4;
				for (var i = 0; i < Lines.length; i++) {
					var Line = Lines[i];
					if (Line.Color != null)
						_canvas.setColor(Line.Color);
					_canvas.drawLine(Line.Start.X, Line.Start.Y, Line.Start.X, Line.Start.Y + arm);
					// arm down from bottom
					_canvas.drawLine(Line.Start.X, Line.Start.Y + arm, Line.Stop.X, Line.Stop.Y - arm);
					// the main length
					_canvas.drawLine(Line.Stop.X, Line.Stop.Y - arm, Line.Stop.X, Line.Stop.Y - tr);
					// arm up from top
					var x = [Line.Stop.X, Line.Stop.X - tr, Line.Stop.X + tr, Line.Stop.X];
					// arrow
					var y = [Line.Stop.Y, Line.Stop.Y - tr, Line.Stop.Y - tr, Line.Stop.Y];
					// arrow
					_canvas.fillPolygon(x, y);
				}
			} catch (err) {
				iLog("DiagonalDrawLines", err, Log.Type.Error);
			}
		}
		function PrepareCanvas(ContainerID) {
			try {
				var _canvas = new jsGraphics(ContainerID + "canvas");
				_canvas.clear();
				return _canvas;
			} catch (err) {
				iLog("PrepareCanvas", err, Log.Type.Error);
			}
		}
		
		function AlignCanvas(ContainerID) {
			try {
				if (ContainerID == null || ContainerID == "")
					return;
				var _componentDiv = $("#" + ContainerID);
				var _canvasDiv = $("#" + ContainerID + "canvas");
				if (_canvasDiv.height() == null)
					return;
				_componentDiv.css("margin-top", (Utilities.ToNumber(_canvasDiv.height()) * -1));
			} catch (err) {
				iLog("AlignCanvas", err, Log.Type.Error);
			}
		}
		
		function GetLines(Component, Lines) {
			try {
				if (!Component.GetJ1)
					return;
				var j = new Array();
				j[0] = Component.GetJ1();
				if (Component.GetJ2 != null)
					j[1] = Component.GetJ2();
				for (i = 0; i < 2; i++) {
					if (j[i] != "") {
						var called = RuleStorage.GetComponent(parseInt(j[i], 10));
						if (called != null) {
							var start = Component.GetIcon().GetExitPoint();
							var stop = called.GetIcon().GetEntryPoint();
							var color = (i == 0 ? Color1 : Color2);
							Lines[Lines.length] = new Line(start, stop, color);
						}
					}
				}
			} catch (err) {
				iLog("GetLines", err, Log.Type.Error);
			}
		}
		
		function Line(Start, Stop, Color) {
			this.Start = Start;
			this.Stop = Stop;
			this.Color = Color;
		}
		
		return {
		
			ClearGraphics : function () {
				try {
					_pre.clear();
					_post.clear();
					isClear = true;
				} catch (err) {
					iLog("ClearGraphics", err, Log.Type.Error);
				}
			},
			Initialize : function (PreProcessCanvasDivID, PostProcessCanvasDivID) {
				try {
				    iLog("Initialize", "Called");
					
					_pre = PrepareCanvas(PreProcessCanvasDivID);
					_post = PrepareCanvas(PostProcessCanvasDivID);
				} catch (err) {
					iLog("Initialize", err, Log.Type.Error);
				}
			},
			Point : function (X, Y) {
				this.X = X;
				this.Y = Y;
			},
			ReDraw : function () {
				try {
					if (RulesMaker.GetSelected().length > 0) {
						if (!isClear)
							Graphics.ClearGraphics();
						return;
					}
					// draw white between old entry and exit
					var ctrl = IconMover.Ctrl;
					var Lines = new Array();
					var i = 0;
					var c;
					if (IconMover.From != null) {
						c = (IconMover.FromJ1 ? Color1 : Color2);
						Lines[i] = new Line(IconMover.From, ctrl.OldEntry);
						i++;
					}
					if (IconMover.J1 != null) {
						Lines[i] = new Line(ctrl.OldExit, IconMover.J1);
						i++;
					}
					if (IconMover.J2 != null) {
						Lines[i] = new Line(ctrl.OldExit, IconMover.J2);
						i++;
					}
					DrawLines(Lines, "white");
					// reset old points draw the new lines
					ctrl.OldEntry = ctrl.GetIcon().GetEntryPoint();
					ctrl.OldExit = ctrl.GetIcon().GetExitPoint();
					Lines.length = 0;
					i = 0;
					if (IconMover.From != null) {
						c = (IconMover.FromJ1 ? Color1 : Color2);
						Lines[i] = new Line(IconMover.From, ctrl.OldEntry, c);
						i++;
					}
					if (IconMover.J1 != null) {
						Lines[i] = new Line(ctrl.OldExit, IconMover.J1, Color1);
						i++;
					}
					if (IconMover.J2 != null) {
						Lines[i] = new Line(ctrl.OldExit, IconMover.J2, Color2);
						i++;
					}
					DrawLines(Lines);
					_canvas.paint();
				} catch (err) {
					iLog("ReDraw", err, Log.Type.Error);
				}
			},
			Refresh : function () {
				try {
					if (_canvas == null) {
						iLog("Refresh", "Attempting to refresh a null canvas", Log.Type.Warning);
						return;
					}
					if (RuleXML.CurrentProcess == null || RuleXML.CurrentProcess == "")
						return;
					AlignCanvas(RuleXML.CurrentProcess);
					_canvas.clear();
					var Lines = new Array();
					$("#" + RuleXML.CurrentProcess).find(".icon").each(function () {
						var id = $(this).attr("id");
						var ctrl = RuleStorage.GetComponent(id);
						GetLines(ctrl, Lines);
					});
					DrawLines(Lines);
					_canvas.paint();
				} catch (err) {
					iLog("Refresh", err, Log.Type.Error);
				}
			},
			// Called from RulesMaker.SetCurrentProcess method which is called when the pre or post tab is clicked
			SetCurrentProcess : function (CurrentProcessDivID) {
				try {
					if (CurrentProcessDivID == "preproc")
						_canvas = _pre;
					else
						_canvas = _post;
					setTimeout("Graphics.Refresh()", 100);
					// gives the div time to display and refreshes once ready
				} catch (err) {
					iLog("SetCurrentProcess", err, Log.Type.Error);
				}
			}
		};
	};
	
	return Graphics;
});

define('AddressStandardization', ['jQuery', 'Communication'], function ($, Communication) {
	// Hack
	$('head').append(''
		 + '<style>'
		 + '.address-suggestion-dialog {'
		 + '    text-align: left;'
		 + '}'
		 + '.address-suggestion-dialog .suggestions {'
		 + '    margin: 1em 0;'
		 + '}'
		 + '.address-suggestion-dialog .suggestions .suggestion {'
		 + '    border: 1px solid #4444FF;'
		 + '    margin: .5em;'
		 + '    padding: .75em;'
		 + '    float: left;'
		 + '    cursor: pointer;'
		 + '}'
		 + '.address-suggestion-dialog .suggestions .suggestion:hover {'
		 + '    background-color: #E2E2FF;'
		 + '}'
		 + '.address-suggestion-dialog .manual-entry {'
		 + '    margin: 1em .5em 0 .5em;'
		 + '}'
		 + '</style>');
	
	var getControlThingy = function (nameOrElement) {
		if (nameOrElement instanceof $) {
			return nameOrElement;
		} else {
			return $('*[name=' + nameOrElement + ']');
		}
	};
	
	var getAddressElements = function (elements) {
		var newElements = {};
		
		$.each(elements, function (name, nameOrElement) {
			newElements[name] = getControlThingy(nameOrElement);
		});
		
		return newElements;
	};
	
	var getAddressValues = function (elements) {
		elements = getAddressElements(elements);
		
		var addressValues = {};
		
		$.each(elements, function (name, $element) {
			if ($.trim($element.val()).length > 0) {
				addressValues[name] = $element.val();
			}
		});
		
		return addressValues;
	};
	
	var setAddressValues = function (elements, addressValues) {
		elements = getAddressElements(elements);
		
		$.each(elements, function (name, $element) {
			if (addressValues[name]) {
				$element.val(addressValues[name]);
			}
		});
	};
	
	var checkFullAddress = function (elements, callback) {
		elements = getAddressElements(elements);
		
		var addressValues = getAddressValues(elements);
		
		checkAddress(addressValues, function (error, newAddressValues) {
			var focusAddress = function () {
				// Should this logic be here?
				if (elements.Address1) {
					elements.Address1.focus();
				}
			};
			
			if (error) {
				// Bad address
				focusAddress();
				
				return callback(error);
			}
			
			if (newAddressValues) {
				// Suggestion selected
				setAddressValues(elements, newAddressValues);
				
				return callback(null, true);
			} else {
				// Manual entry
				focusAddress();
				
				return callback(null, false);
			}
		});
	};
	
	var checkAddress = function (addressValues, callback) {
		Communication.CustomRequest('ZP4Sugestion.max?' + $.param({
				'AJAX_ACTION' : 'GetZP4',
				'Address_IN' : addressValues.Address1,
				'City_IN' : addressValues.City,
				'State_IN' : addressValues.State,
				'Zip_IN' : addressValues.Zip
			}), function (AjaxResp) {
			var response = jsonParse(AjaxResp);
			
			if (response.Valid == '1') {
				return callback(null, {
					'Address1' : response.Address_OUT,
					'City' : response.City_OUT,
					'State' : response.State_OUT,
					'Zip' : response.Zip_OUT
				});
			}
			
			if (response.SugCnt == '0') {
				return callback('Invalid address');
			}
			
			// Oh my GOD the source data is horrible.  This snippet makes it sane.
			var suggestions = [];
			var i;
			
			for (i = 0; i < response.SugCnt; ++i) {
				suggestions.push({
					'Address1' : response['A_' + i], // Look at this!  LOOK AT IT!!!
					'City' : response['C_' + i],
					'State' : response['S_' + i],
					'Zip' : response['Z_' + i]
				});
			}
			// End retardation correction code
			
			// If the current address matches any suggestion,
			// use that suggestion
			var areAddressesEqual = function (addressValuesA, addressValuesB) {
				// Too lazy to make this prettier
				var properties = ['Address1', 'City', 'State', 'Zip'];
				var i;
				
				for (i = 0; i < properties.length; ++i) {
					if (addressValuesA[properties[i]] !== addressValuesB[properties[i]]) {
						return false;
					}
				}
				
				return true;
			};
			
			var i;
			
			for (i = 0; i < suggestions.length; ++i) {
				if (areAddressesEqual(suggestions[i], addressValues)) {
					return callback(null, suggestions[i]);
				}
			}
			
			var html = '';
			html += '<p>Please select one of the following addresses or change your entered address manually:</p>';
			html += '<div class="suggestions"></div>';
			html += '<p><button class="manual-entry">Change Address Manually</button></p>';
			
			var $dialog = $('<div/>').addClass('address-suggestion-dialog').html(html);
			var $suggestions = $dialog.find('.suggestions');
			var $manualEntryButton = $dialog.find('.manual-entry');
			
			var escapeHtml = function (text) {
				return $('<span/>').text(text).html();
			};
			
			$.each(suggestions, function (index, suggestionData) {
				var $suggestion = $('<address/>')
					.addClass('suggestion')
					.data('suggestion-data', suggestionData)
					.html('');
				
				// This is kinda klunky...  Please rewrite if you know a more elegant way.
				$suggestion
				.append(escapeHtml(suggestionData.Address1))
				.append('<br/>')
				.append(escapeHtml(suggestionData.City))
				.append(', ')
				.append(escapeHtml(suggestionData.State))
				.append(' ')
				.append(escapeHtml(suggestionData.Zip));
				
				$suggestions.append($suggestion);
			});
			
			$('.suggestion', $suggestions).click(function () {
				$dialog.dialog('destroy');
				
				var suggestionData = $(this).data('suggestion-data');
				
				callback(null, suggestionData);
			});
			
			$manualEntryButton.click(function () {
				$dialog.dialog('destroy');
				
				callback(null, null);
			});
			
			$dialog.dialog({
				title : 'Address Suggestions',
				autoOpen : true,
				width : 420
			});
		}, null);
	};
	
	var checkFullAddresses = function (addressValuesArray, callback) {
		if (addressValuesArray.length === 0) {
			return callback(null, true);
		}
		
		var addressValues = addressValuesArray[0];
		
		checkFullAddress(addressValues, function (error, isAddressCorrect) {
			if (error) {
				return callback(error);
			}
			
			if (!isAddressCorrect) {
				return callback(null, false);
			}
			
			checkFullAddresses(addressValuesArray.slice(1), callback);
		});
	};
	
	return {
		checkFullAddress : checkFullAddress,
		checkFullAddresses : checkFullAddresses,
		
		checkAddress : checkAddress,
		
		getAddressValues : getAddressValues,
		setAddressValues : setAddressValues,
		
		getAddressElements : getAddressElements
	};
});

require({
	baseUrl : '/script/',
	paths : {
		'superTable' : 'vendor/superTables'
	}
});

define('main', ['jQuery', 'PageHelper'], function ($, PageHelper) {
	
	// General place to expose classes to the global window object!
	require([
		'MP',
		'Log',
		'Browser',
		'jsonParse',
		'Storage',
		'PropertyEd',
		'Communication',
		'Utilities',
		'Helper',
		'Global',
		'RuleStorage',
		'RulesMaker',
		'RuleIcon',
		'RuleGraphics',
		'AddressStandardization',
		'ValidatorContainer',
		'ReqList',
		'WatchList',
		'AjaxTab',
		'../ckeditor/ckeditor'
	], function () {
		
		// Name of object to add to the window, Flag to change its mutability
		var globals = [
			{'n':'MP', 'f':false},
			{'n':'Log', 'f':true},
			{'n':'Browser', 'f':true},
			{'n':'jsonParse', 'f':false},
			{'n':'Storage', 'f':true},
			{'n':'PropertyEd', 'f':false},
			{'n':'Communication', 'f':true},
			{'n':'Utilities', 'f':true},
			{'n':'Helper', 'f':true},
			{'n':'Global', 'f':true},
			{'n':'RuleStorage', 'f':true},
			{'n':'RulesMaker', 'f':true},
			{'n':'RuleIcon', 'f':true},
			{'n':'Graphics', 'f':false},
			{'n':'AddressStandardization', 'f':false},
			{'n':'Validator', 'f':true},
			{'n':'ReqList', 'f':true},
			{'n':'WatchList', 'f':true},
			{'n':'AjaxTab', 'f':true},
			{'n':'ckeditor', 'f':false}
		];
		
		$.each(arguments, function (index, value) {
			var global = globals[index];
			if (global) {
				window[global.n] = value;
				try {
					if (global.f)
						Object.preventExtensions(value);
				} catch (err) {}
			}
		});

		$(document).ready(function () {
			try {
				//jAlert("Global.document.ready Called");
				
				// show session expired message
				var hrf = location.href;
				if (hrf.indexOf("sessionexpired=true") > -1)
					Global.ShowErrorMessage($("<h3>Your session has expired</h3><p>Due to inactivity on the system your session has expired. Please login to start a new session.</p>"));
				
				$(document).delegate("#TooltipIcon", "click", function () {
					var status = $(this).attr("status") == "0" ? "1" : "0";
					Communication.CustomRequest("IconTray.max?status=" + status + "&action=tooltips", function (html) {
						var h = $(html);
						var t = $("#TooltipIcon");
						t.attr("alt", h.attr("alt"));
						t.attr("status", h.attr("status"));
						t.attr("src", h.attr("src"));
						Global.Tooltips(h.attr("status") == "0" ? false : true);
					}, null);
				});
				
				// Spellcheck
				if (window.$Spelling)
					window.$Spelling.ServerModel = "php";
				
				// GlobalScript: a storage for system variables and functions on global scope. We create it only if GlobalScript in Custom.js does not exist
				if (!window.GlobalScript) {
					window.GlobalScript = {
						Origin: "Internal",
						OnLoad: function() {
							//jAlert(this.Origin);
						}
					};
				};
			} catch (err) {
				Log.Add("Global.document.ready", err, Log.Type.Error);
			}
		});

		// A callback event to execute right after the core is fully loaded into the DOM
		var eFn = MP.Events.onMpCoreLoaded || $.noop;
	    eFn();
	});
});


/*
 BEGIN of HTML Control Objects
*/
define('TransferList', ['TemplateBase', 'Utilities', 'PageHelper', 'Editor'], function (TemplateBase, Utilities, PageHelper, Editor) {
	function TransferList() {
		try {
			this.inheritFrom = TemplateBase;
			this.inheritFrom();
		
			/* PUBLIC PROPERTIES */
			this.NameRequired = true;
			this.refClassName = "TrfList";

			/* PRIVATE PROPERTIES */
			var self = this;
			var control = $("<div ref='TransferList' />"); // this is just a reference element used by storage, not shown on form anywhere
			var _container = null;
			var _list1 = null;
			var _list2 = null;
			var _selLeft = null;
			var _selRight = null;
			var _allLeft = null;
			var _allRight = null;
			var featuresAdded = false;
			
			/* PRIVATE METHODS */
			function iLog(Place, Message, Type, Silent) {
				self.Log(self.refClassName + "." + Place, Message, Type, Silent);
			}
			function AddFeatures() {
				try {
					if (featuresAdded)
						return;
					iLog("AddFeatures", "Called");

					featuresAdded = true;
				} catch (err) {
					iLog("AddFeatures", err, Log.Type.Error);
				}
			}			
			function RemoveFeatures() {
				try {
					if (!featuresAdded)
						return;
					iLog("RemoveFeatures", "Called");
					
					featuresAdded = false;
				} catch (err) {
					iLog("RemoveFeatures", err, Log.Type.Error);
				}
			}			
			
			/* PUBLIC METHODS */
			this.SetFeatures = function (value) {
				featuresAdded = value;
			};
			this.AppendTo = function (ContainerElement) {
				try {
					iLog("AppendTo", "Called");
					
					_container.AppendTo(ContainerElement);
					_container.SetHeight("270");
					
					var ctrl = _container.GetControl();
					var AreaWidth = $(ctrl).parent().css('width');
					if (AreaWidth)
						ctrl.css('width', (parseInt(AreaWidth) - 10) + 'px');
					else
						ctrl.css('width', "840px");
					
					ctrl.attr("transferlist", "");
					// dropdowns
					_list1.AppendTo(ctrl);
					_list2.AppendTo(ctrl);
					var elems = [_list1, _list2];
					for (var i = 0; i < elems.length; i++) {
						switch (i) {
							case 0:	elems[i].SetLeft("5"); break;
							case 1:	elems[i].SetLeft("490"); break;
						}
						elems[i].SetTop("5");
						elems[i].SetWidth("336");
						elems[i].SetMultiSelect(true);
						elems[i].SetSize("12");
						elems[i].SetCaption("List " + (i + 1));
					}
					// buttons
					_selRight.AppendTo(ctrl);
					_selRight.SetLeft("347");
					_selRight.SetTop("15");
					_selRight.SetWidth("126");
					_selRight.SetCaption("Move Selected -->");
					var obj = new Object();
					obj.Name = "click";
					obj.Body = "TransferListHelper.MoveSelectedRight(this)";
					_selRight.SetFunctions([obj]);
					_selLeft.AppendTo(ctrl);
					_selLeft.SetLeft("347");
					_selLeft.SetTop("43");
					_selLeft.SetWidth("126");
					_selLeft.SetCaption("<-- Move Selected");
					obj.Body = "TransferListHelper.MoveSelectedLeft(this)";
					_selLeft.SetFunctions([obj]);
					_allLeft.AppendTo(ctrl);
					_allLeft.SetLeft("347");
					_allLeft.SetTop("81");
					_allLeft.SetWidth("126");
					_allLeft.SetCaption("<-- Move All");
					obj.Body = "TransferListHelper.MoveAllLeft(this)";
					_allLeft.SetFunctions([obj]);
					_allRight.AppendTo(ctrl);
					_allRight.SetLeft("347");
					_allRight.SetTop("109");
					_allRight.SetWidth("126");
					_allRight.SetCaption("Move All -->");
					obj.Body = "TransferListHelper.MoveAllRight(this)";
					_allRight.SetFunctions([obj]);
					
					this.BaseLoad2(ctrl);
					if (Editor.Enabled)
						this.EditMode();
				} catch (err) {
					iLog("AppendTo", err, Log.Type.Error);
				}
			};
			this.Create = function (ctrlName) {
				try {
					iLog("Create", "Called");
					
					_container = PageHelper.CreateEditorComponent("StaticContainer");
					_list1 = PageHelper.CreateEditorComponent("EditorDropDown", ctrlName + "_ListLeft");
					_list2 = PageHelper.CreateEditorComponent("EditorDropDown", ctrlName + "_ListRight");
					_selLeft = PageHelper.CreateEditorComponent("EditorSubmitButton", ctrlName + "_MoveSelectedLeft");
					_selRight = PageHelper.CreateEditorComponent("EditorSubmitButton", ctrlName + "_MoveSelectedRight");
					_allLeft = PageHelper.CreateEditorComponent("EditorSubmitButton", ctrlName + "_MoveAllLeft");
					_allRight = PageHelper.CreateEditorComponent("EditorSubmitButton", ctrlName + "_MoveAllRight");
				} catch (err) {
					iLog("Create", err, Log.Type.Error);
				}
			};
			this.Refresh = function () {
				try {
					iLog("Refresh", "Called");
				} catch (err) {
					iLog("Refresh", err, Log.Type.Error);
				}
			};
			this.DefaultMode = function () {
				try {
					iLog("DefaultMode", "Called");
					
					RemoveFeatures();
					PageHelper.RemoveComponentID(control);
				} catch (err) {
					iLog("DefaultMode", err, Log.Type.Error);
				}
			};
			this.EditMode = function () {
				try {
					iLog("EditMode", "Called");
					
					AddFeatures();
				} catch (err) {
					iLog("EditMode", err, Log.Type.Error);
				}
			};
			this.GetControl = function () {
				try {
					return control;
				} catch (err) {
					iLog("GetControl", err, Log.Type.Error);
				}
			};

		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	}
	
	return TransferList;
});

define('EditorSubmitButton', ['TemplateBase', 'PropertyFields', 'Utilities', 'PageHelper', 'Editor'], function (TemplateBase, PropertyFields, Utilities, PageHelper, Editor) {
	function EditorSubmitButton() {
		try {
			this.inheritFrom = TemplateBase;
			this.inheritFrom();

			/* PUBLIC PROPERTIES */
			this.NameRequired = true;
			this.refClassName = "EdSubmitBtn";
			
			/* PRIVATE PROPERTIES */
			var self = this;
			var control = null;
			var featuresAdded = false;
			var input = null;
			
			/* PRIVATE METHODS */			
			function iLog(Place, Message, Type, Silent) {
				self.Log(self.refClassName + "." + Place, Message, Type, Silent);
			}
			// sizes the control around the input element			
			function ResizeControl() {
				try {
					iLog("ResizeControl", "Called");
					
					var width = input.outerWidth();
					var height = input.outerHeight();
					width = width + Utilities.ToNumber(control.css("padding-left")) + Utilities.ToNumber(control.css("padding-right")) + Utilities.ToNumber(control.css("border-left-width")) + Utilities.ToNumber(control.css("border-right-width"));
					height = height + Utilities.ToNumber(control.css("padding-top")) + Utilities.ToNumber(control.css("padding-bottom")) + Utilities.ToNumber(control.css("border-top-width")) + Utilities.ToNumber(control.css("border-bottom-width"));
					control.css("width", width);
					control.css("height", height);
				} catch (err) {
					iLog("ResizeControl", err, Log.Type.Error);
				}
			}
			// adds features to the control based on the rules specified for this type of control
			function AddFeatures() {
				try {
					if (featuresAdded)
						return;
					iLog("AddFeatures", "Called");
					
					var pref = PageHelper.GetParentRef(control);
					if (pref == "StaticContainer") {
						input.addClass("moving");
						control.draggable({
							containment: "parent",
							cancel: "",
							grid  : MP.Tools.Config.Editor.html.snap,
							start : self.onDragStart,
							stop  : self.onDragStop,
							drag  : self.onDragProgress
						});
						control.resizable({
							autoHide : true,
							resize : function (e, ui) {
								input.width(ui.size.width);
								input.height(ui.size.height);
								ResizeControl();
							}
						});
					}
					control.addClass("editing");
					
					featuresAdded = true;
				} catch (err) {
					iLog("AddFeatures", err, Log.Type.Error);
				}
			}
			// removes features from the control that were previously added
			function RemoveFeatures() {
				try {
					if (!featuresAdded)
						return;
					iLog("RemoveFeatures", "Called");
					
					control.draggable("destroy")
						.resizable("destroy")
						.removeClass("editing");
					input.removeClass("moving");
					
					featuresAdded = false;
				} catch (err) {
					iLog("RemoveFeatures", err, Log.Type.Error);
				}
			}
			
			/* PUBLIC METHODS */
			this.SetFeatures = function (value) {
				featuresAdded = value;
			};
			this.AppendTo = function (ContainerElement) {
				try {
					iLog("AppendTo", "Called");
					
					$(ContainerElement).append(control);
					this.BaseLoad(control, input);
					if (Editor.Enabled)
						this.EditMode();
					this.Refresh();
				} catch (err) {
					iLog("AppendTo", err, Log.Type.Error);
				}
			};
			this.Create = function (ctrlName) {
				try {
					iLog("Create", "Called");
					
					control = $("<div condition='' function='CLICK' definition='Communication.SerialRequest($(\"#rightColumn\"),false,this)' />");
					control.html("<input type='button' value='" + ctrlName + "' id='" + ctrlName + "' name='" + ctrlName + "'></input>");
					control.addClass("component EditorSubmitButton");
					control.attr("ref", "EditorSubmitButton");
					input = $($(control).find("input"));
				} catch (err) {
					iLog("Create", err, Log.Type.Error);
				}
			};
			this.DefaultMode = function () {
				try {
					iLog("DefaultMode", "Called");
					
					RemoveFeatures();
					this.AttachFunctions();
					PageHelper.RemoveComponentID(control);
				} catch (err) {
					iLog("DefaultMode", err, Log.Type.Error);
				}
			};
			this.EditMode = function () {
				try {
					iLog("EditMode", "Called");
					
					AddFeatures();
					this.DetachFunctions();
				} catch (err) {
					iLog("EditMode", err, Log.Type.Error);
				}
			};
			this.Load = function (ControlElement) {
				try {
					iLog("Load", "Called");
					
					control = $(ControlElement);
					input = $(control.find("input"));
					this.BaseLoad(control, input);
					
					// the following code is used to remove the hard coded onclick
					var ret = input.attr("onclick");
					if (Utilities.IsFunction(ret)) {
						ret = ret.toString();
						if (ret.indexOf("Communication.") > -1)
							input.removeAttr("onclick");
					}
				} catch (err) {
					iLog("Load", err, Log.Type.Error);
				}
			};
			this.Refresh = function () {
				try {
					iLog("Refresh", "Called");
					
					ResizeControl();
				} catch (err) {
					iLog("Refresh", err, Log.Type.Error);
				}
			};
			this.Search = function (str, caseSensitive) {
				try {
					iLog("Search", "Called", Log.Type.Info);

					var re = this.BaseSearch(str, caseSensitive);
					if (re) {
						//if (this.GetProperty().search(re) > -1)
						//	iLog("Search", this, Log.Type.Search);
					}
				} catch (err) {
					iLog("Search", err, Log.Type.Error);
				}
			};
			this.GetProperties = function () {
				try {
					iLog("GetProperties", "Called");
					
					var properties = this.GetBaseProperties();
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Name"], this.GetName, this.SetName);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Caption"], this.GetCaption, this.SetCaption);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Validate"], this.GetCauseValidation, this.SetCauseValidation);
					
					var pref = PageHelper.GetParentRef(control);
					if (pref == "StaticContainer") {
						properties[properties.length] = new PropertyEd.Property(PropertyFields["Width"], this.GetWidth, this.SetWidth);
						properties[properties.length] = new PropertyEd.Property(PropertyFields["Height"], this.GetHeight, this.SetHeight);
						properties[properties.length] = new PropertyEd.Property(PropertyFields["DefaultButton"], this.GetDefaultButton, this.SetDefaultButton);
					}
					
					return properties;
				} catch (err) {
					iLog("GetProperties", err, Log.Type.Error);
				}
			};
			this.GetCauseValidation = function () {
				try {
					var cv = input.attr("CauseValidation");
					return (cv != null);
				} catch (err) {
					iLog("GetCauseValidation", err, Log.Type.Error);
				}
			};
			this.GetDefaultButton = function () {
				try {
					return input.attr("DefaultButton") == "true";
				} catch (err) {
					iLog("GetDefaultButton", err, Log.Type.Error);
				}
			};
			this.GetControl = function () {
				try {
					return control;
				} catch (err) {
					iLog("GetControl", err, Log.Type.Error);
				}
			};
			this.GetCaption = function () {
				try {
					return input.val();
				} catch (err) {
					iLog("GetCaption", err, Log.Type.Error);
				}
			};
			this.GetHeight = function () {
				try {
					return Utilities.ToNumber(input.outerHeight());
				} catch (err) {
					iLog("GetHeight", err, Log.Type.Error);
				}
			};
			this.SetHeight = function (newHeight) {
				try {
					input.height(Utilities.ToNumber(newHeight));
					ResizeControl();
				} catch (err) {
					iLog("SetHeight", err, Log.Type.Error);
				}
			};
			this.GetWidth = function () {
				try {
					return Utilities.ToNumber(input.outerWidth());
				} catch (err) {
					iLog("GetWidth", err, Log.Type.Error);
				}
			};
			this.SetWidth = function (newWidth) {
				try {
					input.width(Utilities.ToNumber(newWidth));
					ResizeControl();
				} catch (err) {
					iLog("SetWidth", err, Log.Type.Error);
				}
			};
			this.GetName = function () {
				try {
					return input.attr("name");
				} catch (err) {
					iLog("GetName", err, Log.Type.Error);
				}
			};
			this.SetName = function (newName) {
				try {
					if (newName != input.attr('id'))
						input.attr('id', newName);
					if (newName != input.attr('name'))
						input.attr('name', newName);
				} catch (err) {
					iLog("SetName", err, Log.Type.Error);
				}
			};
			this.SetCaption = function (newCaption) {
				try {
					input.val(newCaption);
				} catch (err) {
					iLog("SetCaption", err, Log.Type.Error);
				}
			};
			this.SetDefaultButton = function (value) {
				try {
					input.attr("DefaultButton", value);
				} catch (err) {
					iLog("SetDefaultButton", err, Log.Type.Error);
				}
			};
			this.SetCauseValidation = function (boolVal) {
				try {
					if (boolVal)
						input.attr("CauseValidation", "true");
					else
						input.removeAttr("CauseValidation");
				} catch (err) {
					iLog("SetCauseValidation", err, Log.Type.Error);
				}
			};

		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	}
	
	return EditorSubmitButton;
});

define('EditorDropDown', ['TemplateBase', 'PropertyFields', 'Utilities', 'PageHelper', 'Editor'], function (TemplateBase, PropertyFields, Utilities, PageHelper, Editor) {
	function EditorDropDown() {
		try {
			this.TemplateBase = TemplateBase;
			this.TemplateBase();

			/* PUBLIC PROPERTIES */
			this.NameRequired = true;
			this.refClassName = "EdDropdown";
			
			/* PRIVATE PROPERTIES */
			var self = this;
			var control = null;
			var featuresAdded = false;
			var input = null;
			var span = null;
			
			/* PRIVATE METHODS */
			
			function iLog(Place, Message, Type, Silent) {
				self.Log(self.refClassName + "." + Place, Message, Type, Silent);
			}
			// sizes the control elements
			function ResizeControl() {
				try {
					iLog("ResizeControl", "Called");
					
					var width = input.outerWidth();
					var height = input.outerHeight();
					width = width + Utilities.ToNumber(control.css("padding-left")) + Utilities.ToNumber(control.css("padding-right")) + Utilities.ToNumber(control.css("border-left-width")) + Utilities.ToNumber(control.css("border-right-width"));
					height = height + Utilities.ToNumber(control.css("padding-top")) + Utilities.ToNumber(control.css("padding-bottom")) + Utilities.ToNumber(control.css("border-top-width")) + Utilities.ToNumber(control.css("border-bottom-width"));
					control.css("width", width);
					control.css("height", height + 10);
				} catch (err) {
					iLog("ResizeControl", err, Log.Type.Error);
				}
			}
			// adds features to the control based on the rules specified for this type of control
			function AddFeatures() {
				try {
					if (featuresAdded)
						return;
					iLog("AddFeatures", "Called");
					
					var pref = PageHelper.GetParentRef(control);
					if (pref == "StaticContainer") {
						input.addClass("moving");
						span.addClass("moving");
						control.draggable({
							containment: "parent",
							cancel: "",
							grid  : MP.Tools.Config.Editor.html.snap,
							start : self.onDragStart,
							stop  : self.onDragStop,
							drag  : self.onDragProgress
						});
						control.resizable({
							autoHide : true,
							maxHeight : control.height(),
							minHeight : control.height(),
							resize : function (e, ui) {
								input.width(ui.size.width);
								ResizeControl();
							}
						});
					}
					control.addClass("editing");
					
					featuresAdded = true;
				} catch (err) {
					iLog("AddFeatures", err, Log.Type.Error);
				}
			}
			// removes features from the control that were previously added			
			function RemoveFeatures() {
				try {
					if (!featuresAdded)
						return;
					iLog("RemoveFeatures", "Called");
					
					control.draggable("destroy")
						.resizable("destroy")
						.removeClass("editing");
					input.removeClass("moving");
					span.removeClass("moving");
					
					featuresAdded = false;
				} catch (err) {
					iLog("RemoveFeatures", err, Log.Type.Error);
				}
			}
			
			/* PUBLIC METHODS */
			this.SetFeatures = function (value) {
				featuresAdded = value;
			};
			// Appends the control to a container element
			this.AppendTo = function (ContainerElement) {
				try {
					iLog("AppendTo", "Called");
					
					$(ContainerElement).append(control);
					this.BaseLoad(control, input);
					if (Editor.Enabled)
						this.EditMode();
					this.Refresh();
				} catch (err) {
					iLog("AppendTo", err, Log.Type.Error);
				}
			};
			this.Create = function (ctrlName) {
				try {
					iLog("Create", "Called");
					
					control = $("<div condition='' />");
					control.html("<span>" + ctrlName + "</span><br/><select id='" + ctrlName + "' name='" + ctrlName + "' size='1'>");
					control.addClass("component EditorDropDown");
					control.attr("ref", "EditorDropDown");
					input = $($(control).find("select"));
					span = $($(control).find("span"));
					span.addClass("notRequired");
					span.click(function () {
						input.focus();
					});
				} catch (err) {
					iLog("Create", err, Log.Type.Error);
				}
			};
			this.DefaultMode = function () {
				try {
					iLog("DefaultMode", "Called");
					
					RemoveFeatures();
					this.AttachFunctions();
					PageHelper.RemoveComponentID(control);
				} catch (err) {
					iLog("DefaultMode", err, Log.Type.Error);
				}
			};
			this.EditMode = function () {
				try {
					iLog("EditMode", "Called");
					
					AddFeatures();
					this.DetachFunctions();
				} catch (err) {
					iLog("EditMode", err, Log.Type.Error);
				}
			};
			this.Load = function (ControlElement) {
				try {
					iLog("Load", "Called");
					
					control = $(ControlElement);
					span = $(control.find("span"));
					span.css("cursor", "default");
					input = $(control).find("select");
					span.click(function () {
						input.focus();
					});
					this.BaseLoad(control, input);
				} catch (err) {
					iLog("Load", err, Log.Type.Error);
				}
			};
			this.Refresh = function () {
				try {
					iLog("Refresh", "Called");
					
					ResizeControl();
				} catch (err) {
					iLog("Refresh", err, Log.Type.Error);
				}
			};
			this.Search = function (str, caseSensitive) {
				try {
					iLog("Search", "Called", Log.Type.Info);

					var re = this.BaseSearch(str, caseSensitive);
					if (re) {
						if (this.GetOptions().search(re) > -1)
							iLog("Search", this, Log.Type.Search);
					}
				} catch (err) {
					iLog("Search", err, Log.Type.Error);
				}
			};
			this.GetErrorMessage = function () {
				try {
					if (this.GetRequired()) {
						if (input.val() == "-1") {
							return "You must select from the dropdown '" + span.text() + "'";
						}
						return null;
					}
				} catch (err) {
					iLog("GetErrorMessage", err, Log.Type.Error);
				}
			};
			this.ErrorStatus = function (boolStatus) {
				try {
					if (boolStatus)
						control.addClass("error");
					else
						control.removeClass("error");
				} catch (err) {
					iLog("ErrorStatus", err, Log.Type.Error);
				}
			};
			this.SetFocus = function () {
				try {
					input.focus();
				} catch (err) {
					iLog("SetFocus", err, Log.Type.Error);
				}
			};
			this.GetControl = function () {
				try {
					return control;
				} catch (err) {
					iLog("GetControl", err, Log.Type.Error);
				}
			};
			this.GetProperties = function () {
				try {
					iLog("GetProperties", "Called");
					
					var properties = this.GetBaseProperties();
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Name"], this.GetName, this.SetName);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Caption"], this.GetCaption, this.SetCaption);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["MultiSelect"], this.GetMultiSelect, this.SetMultiSelect);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Options"], this.GetOptions, this.SetOptions);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Required"], this.GetRequired, this.SetRequired);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Size"], this.GetSize, this.SetSize);
					
					var pref = PageHelper.GetParentRef(control);
					if (pref == "StaticContainer")
						properties[properties.length] = new PropertyEd.Property(PropertyFields["Width"], this.GetWidth, this.SetWidth);
					
					return properties;
				} catch (err) {
					iLog("GetProperties", err, Log.Type.Error);
				}
			};
			this.GetCaption = function () {
				try {
					return span.text();
				} catch (err) {
					iLog("GetCaption", err, Log.Type.Error);
				}
			};
			this.GetName = function () {
				try {
					return input.attr("name");
				} catch (err) {
					iLog("GetName", err, Log.Type.Error);
				}
			};
			this.GetOptions = function () {
				try {
					return input.html();
				} catch (err) {
					iLog("GetOptions", err, Log.Type.Error);
				}
			};
			this.GetMultiSelect = function () {
				try {
					return input.attr("multiple");
				} catch (err) {
					iLog("GetMultiSelect", err, Log.Type.Error);
				}
			};
			this.GetRequired = function () {
				try {
					return span.hasClass("required");
				} catch (err) {
					iLog("GetRequired", err, Log.Type.Error);
				}
			};
			this.GetSize = function () {
				try {
					return input.attr("size");
				} catch (err) {
					iLog("GetSize", err, Log.Type.Error);
				}
			};
			this.GetWidth = function () {
				try {
					return Utilities.ToNumber(input.outerWidth());
				} catch (err) {
					iLog("GetWidth", err, Log.Type.Error);
				}
			};
			this.SetWidth = function (newWidth) {
				try {
					input.width(Utilities.ToNumber(newWidth));
					ResizeControl();
				} catch (err) {
					iLog("SetWidth", err, Log.Type.Error);
				}
			};
			this.SetCaption = function (newCaption) {
				try {
					span.text(newCaption);
				} catch (err) {
					iLog("SetCaption", err, Log.Type.Error);
				}
			};
			this.SetName = function (newName) {
				try {
					if (newName != input.attr('id'))
						input.attr('id', newName);
					if (newName != input.attr('name'))
						input.attr('name', newName);
				} catch (err) {
					iLog("SetName", err, Log.Type.Error);
				}
			};
			this.SetMultiSelect = function (value) {
				try {
					if (value == true || value == 'true')
						input.attr("multiple", "multiple");
					else
						input.attr("multiple", "");
				} catch (err) {
					iLog("SetMultiSelect", err, Log.Type.Error);
				}
			};
			this.SetOptions = function (newValue) {
				try {
					input.html(newValue);
				} catch (err) {
					iLog("SetOptions", err, Log.Type.Error);
				}
			};			
			this.SetRequired = function (required) {
				try {
					if (required == true || required == 'true')
						span.removeClass("notRequired").addClass("required");
					else
						span.removeClass("required").addClass("notRequired");
				} catch (err) {
					iLog("SetRequired", err, Log.Type.Error);
				}
			};			
			this.SetSize = function (newValue) {
				try {
					input.attr("size", newValue);
					ResizeControl();
				} catch (err) {
					iLog("SetSize", err, Log.Type.Error);
				}
			};

		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	}
	
	return EditorDropDown;
});

define('EditorLabel', ['TemplateBase', 'PropertyFields', 'PageHelper', 'Editor'], function (TemplateBase, PropertyFields, PageHelper, Editor) {
	function EditorLabel() {
		try {
			this.inheritFrom = TemplateBase;
			this.inheritFrom();
			
			/* PUBLIC PROPERTIES */
			this.NameRequired = false;
			this.refClassName = "EdLabel";

			/* PRIVATE PROPERTIES */
			var self = this;
			var control = null;
			var featuresAdded = false;
			var label = null;

			/* PRIVATE METHODS */
			
			function iLog(Place, Message, Type, Silent) {
				self.Log(self.refClassName + "." + Place, Message, Type, Silent);
			}
			// adds features to the control based on the rules specified for this type of control
			function AddFeatures() {
				try {
					if (featuresAdded)
						return;
					iLog("AddFeatures", "Called");
					
					var pref = PageHelper.GetParentRef(control);
					if (pref == "StaticContainer") {
						control.draggable({
							containment: "parent",
							cancel: "",
							grid  : MP.Tools.Config.Editor.html.snap,
							start : self.onDragStart,
							stop  : self.onDragStop,
							drag  : self.onDragProgress
						});
						control.resizable({
							autoHide : true,
							maxHeight : control.height(),
							minHeight : control.height(),
							grid : MP.Tools.Config.Editor.html.snap
						});
					}
					label.addClass("moving");
					control
						.addClass("editing")
						.addClass("moving");
					
					featuresAdded = true;
				} catch (err) {
					iLog("AddFeatures", err, Log.Type.Error);
				}
			}
			// removes features from the control that were previously added
			function RemoveFeatures() {
				try {
					if (!featuresAdded)
						return;
					iLog("RemoveFeatures", "Called");
					
					label.removeClass("moving");
					control
						.draggable("destroy")
						.resizable("destroy")
						.removeClass("editing")
						.removeClass("moving");
					
					featuresAdded = false;
				} catch (err) {
					iLog("RemoveFeatures", err, Log.Type.Error);
				}
			}
			
			/* PUBLIC METHODS */
			this.SetFeatures = function (value) {
				featuresAdded = value;
			};
			// Appends the control to a container element
			this.AppendTo = function (ContainerElement) {
				try {
					iLog("AppendTo", "Called");
					
					$(ContainerElement).append(control);
					this.BaseLoad(control, label);
					if (Editor.Enabled)
						this.EditMode();
					this.Refresh();
				} catch (err) {
					iLog("AppendTo", err, Log.Type.Error);
				}
			};
			this.Create = function () {
				try {
					iLog("Create", "Called");
					
					control = $("<div condition='' />");
					control.html("<label class='handle Default'>LABEL</label>");
					control.addClass("component EditorLabel");
					control.attr("ref", "EditorLabel");
					label = $($(control).find("label"));
				} catch (err) {
					iLog("Create", err, Log.Type.Error);
				}
			};
			this.DefaultMode = function () {
				try {
					iLog("DefaultMode", "Called");
					
					RemoveFeatures();
					this.AttachFunctions();
					PageHelper.RemoveComponentID(control);
				} catch (err) {
					iLog("DefaultMode", err, Log.Type.Error);
				}
			};
			this.EditMode = function () {
				try {
					iLog("EditMode", "Called");
					
					AddFeatures();
					this.DetachFunctions();
				} catch (err) {
					iLog("EditMode", err, Log.Type.Error);
				}
			};
			this.Load = function (ControlElement) {
				try {
					iLog("Load", "Called");
					
					control = $(ControlElement);
					label = $(control.find("label"));
					this.BaseLoad(control, label);
				} catch (err) {
					iLog("Load", err, Log.Type.Error);
				}
			};
			this.Refresh = function () {
				try {
					iLog("Refresh", "Called");
				} catch (err) {
					iLog("Refresh", err, Log.Type.Error);
				}
			};
			this.Search = function (str, caseSensitive) {
				try {
					iLog("Search", "Called", Log.Type.Info);

					var re = this.BaseSearch(str, caseSensitive);
					if (re) {
						if (this.GetStyle().search(re) > -1)
							iLog("Search", this, Log.Type.Search);
					}
				} catch (err) {
					iLog("Search", err, Log.Type.Error);
				}
			};
			this.GetControl = function () {
				try {
					return control;
				} catch (err) {
					iLog("GetControl", err, Log.Type.Error);
				}
			};
			this.GetProperties = function () {
				try {
					iLog("GetProperties", "Called");
					
					var properties = this.GetBaseProperties();
					properties[properties.length] = new PropertyEd.Property(PropertyFields["ID"], this.GetID, this.SetID);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Caption"], this.GetCaption, this.SetCaption);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Class"], this.GetClass, this.SetClass);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Style"], this.GetStyle, this.SetStyle);
					
					return properties;
				} catch (err) {
					iLog("GetProperties", err, Log.Type.Error);
				}
			};
			this.GetID = function () {
				try {
					return label.attr("id");
				} catch (err) {
					iLog("GetID", err, Log.Type.Error);
				}
			};
			this.SetID = function (newID) {
				try {
					if (newID != label.attr('id'))
						label.attr("id", newID);
				} catch (err) {
					iLog("SetID", err, Log.Type.Error);
				}
			};
			this.GetCaption = function () {
				try {
					return label.html();
				} catch (err) {
					iLog("GetCaption", err, Log.Type.Error);
				}
			};
			this.SetCaption = function (newCaption) {
				try {
					label.html(newCaption);
				} catch (err) {
					iLog("SetCaption", err, Log.Type.Error);
				}
			};
			this.GetClass = function () {
				try {
					label.removeClass("moving");
					return label.attr("class");
				} catch (err) {
					iLog("GetClass", err, Log.Type.Error);
				}
			};
			this.SetClass = function (newClass) {
				try {
					label.attr("class", newClass);
					label.addClass("moving");
				} catch (err) {
					iLog("SetClass", err, Log.Type.Error);
				}
			};
			this.GetStyle = function () {
				try {
					return label.attr("style") || "";
				} catch (err) {
					iLog("GetStyle", err, Log.Type.Error);
				}
			};
			this.SetStyle = function (newStyle) {
				try {
					if (!newStyle)
						newStyle = ' '; //LK: IE bug!
					label.attr("style", newStyle);
				} catch (err) {
					iLog("SetStyle", err, Log.Type.Error);
				}
			};
			
		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	}
	
	return EditorLabel;
});

define('EditorLink', ['TemplateBase', 'PropertyFields', 'PageHelper', 'Editor'], function (TemplateBase, PropertyFields, PageHelper, Editor) {
	function EditorLink() {
		try {
			this.inheritFrom = TemplateBase;
			this.inheritFrom();
			
			/* PUBLIC PROPERTIES */
			this.NameRequired = false;
			this.refClassName = "EdLink";
			
			/* PRIVATE PROPERTIES */
			var self = this;
			var control = null;
			var featuresAdded = false;
			var link = null;

			/* PRIVATE METHODS */
			
			function iLog(Place, Message, Type, Silent) {
				self.Log(self.refClassName + "." + Place, Message, Type, Silent);
			}
			// adds features to the control based on the rules specified for this type of control
			function AddFeatures() {
				try {
					if (featuresAdded)
						return;
					iLog("AddFeatures", "Called");
					
					var evt = link.attr("onclick");
					var s = '';
					if (Utilities.IsFunction(evt)) {
						s = String(evt);
						var start = s.indexOf('{') + 1;
						var stop = s.lastIndexOf('}');
						s = s.substring(start, stop);
						s = Utilities.Trim(s);
						
						link.removeAttr("onclick");
					} else {
						s = self.GetTarget();
					}
					self.SetTarget(s);
					
					control.addClass("editing");
					
					var pref = PageHelper.GetParentRef(control);
					if (pref == "StaticContainer") {
						control.draggable({
							containment: "parent",
							cancel: "",
							grid  : MP.Tools.Config.Editor.html.snap,
							start : self.onDragStart,
							stop  : self.onDragStop,
							drag  : self.onDragProgress
						});
					};
					link.addClass("moving");
					control.addClass("moving");
					
					featuresAdded = true;
				} catch (err) {
					iLog("AddFeatures", err, Log.Type.Error);
				}
			}
			// removes features from the control that were previously added
			function RemoveFeatures() {
				try {
					if (!featuresAdded)
						return;
					iLog("RemoveFeatures", "Called");
					
					//LK: due problems changing Target back to onclick here on live object, it is done later in PageHelper.CleanVRM!
					link.removeClass("moving");
					control.draggable("destroy")
						.removeClass("editing")
						.removeClass("moving");
					
					featuresAdded = false;
				} catch (err) {
					iLog("RemoveFeatures", err, Log.Type.Error);
				}
			}
			
			/* PUBLIC METHODS */
			this.SetFeatures = function (value) {
				featuresAdded = value;
			};
			// Appends the control to a container element
			this.AppendTo = function (ContainerElement) {
				try {
					iLog("AppendTo", "Called");
					
					$(ContainerElement).append(control);
					this.BaseLoad(control, link);
					if (Editor.Enabled)
						this.EditMode();
					this.Refresh();
				} catch (err) {
					iLog("AppendTo", err, Log.Type.Error);
				}
			};
			this.Create = function () {
				try {
					iLog("Create", "Called");
					
					control = $("<div condition='' />");
					control.html("<a class='handle Default' style='cursor: pointer;' onclick='Communication.LinkRequest();'>LINK</a>");
					control.addClass("component EditorLink");
					control.attr("ref", "EditorLink");
					link = $(control.find("a"));
				} catch (err) {
					iLog("Create", err, Log.Type.Error);
				}
			};
			this.DefaultMode = function () {
				try {
					iLog("DefaultMode", "Called");
					
					RemoveFeatures();
					this.AttachFunctions();
					PageHelper.RemoveComponentID(control);
				} catch (err) {
					iLog("DefaultMode", err, Log.Type.Error);
				}
			};
			this.EditMode = function () {
				try {
					iLog("EditMode", "Called");
					
					AddFeatures();
					this.DetachFunctions();
				} catch (err) {
					iLog("EditMode", err, Log.Type.Error);
				}
			};
			this.Load = function (ControlElement) {
				try {
					iLog("Load", "Called");
					
					control = $(ControlElement);
					link = $(control.find("a"));
					this.BaseLoad(control, link);
				} catch (err) {
					iLog("Load", err, Log.Type.Error);
				}
			};
			this.Refresh = function () {
				try {
					iLog("Refresh", "Called");
				} catch (err) {
					iLog("Refresh", err, Log.Type.Error);
				}
			};
			this.Search = function (str, caseSensitive) {
				try {
					iLog("Search", "Called", Log.Type.Info);

					var re = this.BaseSearch(str, caseSensitive);
					if (re) {
						if (this.GetStyle().search(re) > -1 || this.GetTarget().search(re) > -1)
							iLog("Search", this, Log.Type.Search);
					}
				} catch (err) {
					iLog("Search", err, Log.Type.Error);
				}
			};
			this.GetControl = function () {
				try {
					return control;
				} catch (err) {
					iLog("GetControl", err, Log.Type.Error);
				}
			};
			this.GetProperties = function () {
				try {
					iLog("GetProperties", "Called");
					
					var properties = this.GetBaseProperties();
					properties[properties.length] = new PropertyEd.Property(PropertyFields["ID"], this.GetID, this.SetID);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Caption"], this.GetCaption, this.SetCaption);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Class"], this.GetClass, this.SetClass);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Style"], this.GetStyle, this.SetStyle);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Target"], this.GetTarget, this.SetTarget);
					
					return properties;
				} catch (err) {
					iLog("GetProperties", err, Log.Type.Error);
				}
			};
			this.GetID = function () {
				try {
					return link.attr("id");
				} catch (err) {
					iLog("GetID", err, Log.Type.Error);
				}
			};
			this.SetID = function (newID) {
				try {
					if (newID != link.attr('id'))
						link.attr("id", newID);
				} catch (err) {
					iLog("SetID", err, Log.Type.Error);
				}
			};
			this.GetCaption = function () {
				try {
					return link.text();
				} catch (err) {
					iLog("GetCaption", err, Log.Type.Error);
				}
			};
			this.SetCaption = function (newCaption) {
				try {
					link.text(newCaption);
				} catch (err) {
					iLog("SetCaption", err, Log.Type.Error);
				}
			};
			this.GetClass = function () {
				try {
					link.removeClass("moving");
					return link.attr("class");
				} catch (err) {
					iLog("GetClass", err, Log.Type.Error);
				}
			};
			this.SetClass = function (newClass) {
				try {
					link.attr("class", newClass);
					link.addClass("moving");
				} catch (err) {
					iLog("SetClass", err, Log.Type.Error);
				}
			};
			this.GetStyle = function () {
				try {
					return link.attr("style") || "";
				} catch (err) {
					iLog("GetStyle", err, Log.Type.Error);
				}
			};
			this.SetStyle = function (newStyle) {
				try {
					link.attr("style", newStyle);
				} catch (err) {
					iLog("SetStyle", err, Log.Type.Error);
				}
			};
			this.GetTarget = function () {
				try {
					return String(link.attr("targetlink2onclick"));
				} catch (err) {
					iLog("GetTarget", err, Log.Type.Error);
				}
			};
			this.SetTarget = function (newTarget) {
				try {
					link.attr("targetlink2onclick", String(newTarget));
				} catch (err) {
					iLog("SetTarget", err, Log.Type.Error);
				}
			};
		
		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	}
	
	return EditorLink;
});

define('EditorDiv', ['TemplateBase', 'PropertyFields', 'PageHelper', 'Editor'], function (TemplateBase, PropertyFields, PageHelper, Editor) {
	function EditorDiv() {
		try {
			this.inheritFrom = TemplateBase;
			this.inheritFrom();
			
			/* PUBLIC PROPERTIES */
			this.NameRequired = false;
			this.refClassName = "EdDiv";

			/* PRIVATE PROPERTIES */
			var self = this;
			var control = null;
			var featuresAdded = false;
			var div = null;

			/* PRIVATE METHODS */
			
			function iLog(Place, Message, Type, Silent) {
				self.Log(self.refClassName + "." + Place, Message, Type, Silent);
			}
			// adds features to the control based on the rules specified for this type of control
			function AddFeatures() {
				try {
					if (featuresAdded)
						return;
					iLog("AddFeatures", "Called");
					
					var pref = PageHelper.GetParentRef(control);
					if (pref == "StaticContainer") {
						control.draggable({
							containment: "parent",
							cancel: "",
							grid  : MP.Tools.Config.Editor.html.snap,
							start : self.onDragStart,
							stop  : self.onDragStop,
							drag  : self.onDragProgress
						});
						control.resizable({
							autoHide : true,
							grid : MP.Tools.Config.Editor.html.snap
						});
					}
					control
						.addClass("editing")
						.addClass("moving");
					
					featuresAdded = true;
				} catch (err) {
					iLog("AddFeatures", err, Log.Type.Error);
				}
			}
			// removes features from the control that were previously added
			function RemoveFeatures() {
				try {
					if (!featuresAdded)
						return;
					iLog("RemoveFeatures", "Called");
					
					control
						.draggable("destroy")
						.resizable("destroy")
						.removeClass("editing")
						.removeClass("moving");
					
					featuresAdded = false;
				} catch (err) {
					iLog("RemoveFeatures", err, Log.Type.Error);
				}
			}
			
			/* PUBLIC METHODS */
			this.SetFeatures = function (value) {
				featuresAdded = value;
			};
			// Appends the control to a container element
			this.AppendTo = function (ContainerElement) {
				try {
					iLog("AppendTo", "Called");
					
					$(ContainerElement).append(control);
					this.BaseLoad(control, div);
					if (Editor.Enabled)
						this.EditMode();
					this.Refresh();
				} catch (err) {
					iLog("AppendTo", err, Log.Type.Error);
				}
			};
			this.Create = function () {
				try {
					iLog("Create", "Called");
					
					control = $("<div condition='' />");
					control.html("<div>DIV</div>");
					control.addClass("component EditorDiv");
					control.attr("ref", "EditorDiv");
					div = control.find("div");
				} catch (err) {
					iLog("Create", err, Log.Type.Error);
				}
			};
			this.DefaultMode = function () {
				try {
					iLog("DefaultMode", "Called");
					
					RemoveFeatures();
					this.AttachFunctions();
					PageHelper.RemoveComponentID(control);
				} catch (err) {
					iLog("DefaultMode", err, Log.Type.Error);
				}
			};
			this.EditMode = function () {
				try {
					iLog("EditMode", "Called");
					
					AddFeatures();
					this.DetachFunctions();
				} catch (err) {
					iLog("EditMode", err, Log.Type.Error);
				}
			};
			this.Load = function (ControlElement) {
				try {
					iLog("Load", "Called");
					
					control = $(ControlElement);
					div = control.find("div");
					this.BaseLoad(control, div);
				} catch (err) {
					iLog("Load", err, Log.Type.Error);
				}
			};
			this.Refresh = function () {
				try {
					iLog("Refresh", "Called");
				} catch (err) {
					iLog("Refresh", err, Log.Type.Error);
				}
			};
			this.Search = function (str, caseSensitive) {
				try {
					iLog("Search", "Called", Log.Type.Info);

					var re = this.BaseSearch(str, caseSensitive);
					if (re) {
						if (this.GetHTML().search(re) > -1 || this.GetStyle().search(re) > -1)
							iLog("Search", this, Log.Type.Search);
					}
				} catch (err) {
					iLog("Search", err, Log.Type.Error);
				}
			};
			this.GetControl = function () {
				try {
					return control;
				} catch (err) {
					iLog("GetControl", err, Log.Type.Error);
				}
			};
			this.GetProperties = function () {
				try {
					iLog("GetProperties", "Called");
					
					var properties = this.GetBaseProperties();
					properties[properties.length] = new PropertyEd.Property(PropertyFields["ID"], this.GetID, this.SetID);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["HtmlBody"], this.GetHTML, this.SetHTML);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["ClassText"], this.GetClass, this.SetClass);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Style"], this.GetStyle, this.SetStyle);
					
					return properties;
				} catch (err) {
					iLog("GetProperties", err, Log.Type.Error);
				}
			};
			this.GetID = function () {
				try {
					return div.attr("id");
				} catch (err) {
					iLog("GetID", err, Log.Type.Error);
				}
			};
			this.SetID = function (newID) {
				try {
					if (newID != div.attr('id'))
						div.attr("id", newID);
				} catch (err) {
					iLog("SetID", err, Log.Type.Error);
				}
			};
			this.GetHTML = function () {
				try {
					return div.html();
				} catch (err) {
					iLog("GetHTML", err, Log.Type.Error);
				}
			};
			this.SetHTML = function (newHtml) {
				try {
					div.html(newHtml);
				} catch (err) {
					iLog("SetHTML", err, Log.Type.Error);
				}
			};
			this.GetClass = function () {
				try {
					return div.attr("class") || "";
				} catch (err) {
					iLog("GetClass", err, Log.Type.Error);
				}
			};
			this.SetClass = function (newClass) {
				try {
					div.attr("class", newClass);
				} catch (err) {
					iLog("SetClass", err, Log.Type.Error);
				}
			};
			this.GetStyle = function () {
				try {
					return div.attr("style") || "";
				} catch (err) {
					iLog("GetStyle", err, Log.Type.Error);
				}
			};
			this.SetStyle = function (newStyle) {
				try {
					if (!newStyle)
						newStyle = ' '; //LK: IE bug!
					div.attr("style", newStyle);
				} catch (err) {
					iLog("SetStyle", err, Log.Type.Error);
				}
			};
			
		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	}
	
	return EditorDiv;
});

define('EditorText', ['TemplateBase', 'ValidationBase', 'PropertyFields', 'Utilities', 'PageHelper', 'Editor'], function (TemplateBase, ValidationBase, PropertyFields, Utilities, PageHelper, Editor) {
	function EditorText() {
		try {
			this.inheritFrom = TemplateBase;
			this.inheritFrom();
			this.inheritFrom = ValidationBase;
			this.inheritFrom();

			/* PUBLIC PROPERTIES */
			this.NameRequired = true;
			this.refClassName = "EdText";
			this.UserUpdate = false;

			/* PRIVATE PROPERTIES */
			var self = this;
			var control = null;
			var featuresAdded = false;
			var input = null;
			var span = null;

			/* PRIVATE METHODS */

			function iLog(Place, Message, Type, Silent) {
				self.Log(self.refClassName + "." + Place, Message, Type, Silent);
			}
			// sizes the control around the input element
			function ResizeControl() {
				try {
					iLog("ResizeControl", "Called");
					
					// Do not update elements which have no or wrong size! (hidden)
					var w = Utilities.ToNumber(input.width());
					var h = Utilities.ToNumber(input.height());
					if (w < 1 || h < 1)
						return;
					
					var pl = Utilities.ToNumber(control.css("padding-left")) + Utilities.ToNumber(control.css("border-left-width"));
					var pr = Utilities.ToNumber(control.css("padding-right")) + Utilities.ToNumber(control.css("border-right-width"));
					var pt = Utilities.ToNumber(input.css("margin-top")) + Utilities.ToNumber(input.css("border-top-width"));
					
					if (Browser.IsMSIE()) {
						w -= pl;
					} else {
						w -= (pl + pr);
						pl += 1;
						if (Browser.IsFirefox())
							pt += 1;
					};
					span.width(w).height(h);

					// Do not add Left/Top to DIVs which are not StaticContainers!
					var pref = PageHelper.GetParentRef(control);
					if (pref == "StaticContainer")
						span.css('left', pl + 'px').css('top', pt + 'px');
					else
						span.css('left', '').css('top', '');
					
					w = Utilities.ToNumber(input.outerWidth());
					control.css("width", w + 'px');
					
					/*
					var width = input.outerWidth();
					var height = input.outerHeight();
					span.css("width", width - 6).css("height", height - 2);
					width = width + Utilities.ToNumber(control.css("padding-left")) + Utilities.ToNumber(control.css("padding-right")) + Utilities.ToNumber(control.css("border-left-width")) + Utilities.ToNumber(control.css("border-right-width"));
					control.css("width", width);
					*/
				} catch (err) {
					iLog("ResizeControl", err, Log.Type.Error);
				}
			}
			// adds features to the control based on the rules specified for this type of control
			function AddFeatures() {
				try {
					if (featuresAdded)
						return;
					iLog("AddFeatures", "Called");
					
					var pref = PageHelper.GetParentRef(control);
					if (pref == "StaticContainer") {
						input.addClass("moving");
						control.draggable({
							containment: "parent",
							cancel: "",
							grid  : MP.Tools.Config.Editor.html.snap,
							start : self.onDragStart,
							stop  : self.onDragStop,
							drag  : self.onDragProgress
						});
						control.resizable({
							autoHide : true,
							maxHeight : control.height(),
							minHeight : control.height(),
							resize : function (e, ui) {
								input.width(ui.size.width);
								ResizeControl();
							}
						});
					}
					input.bind("click.EditorText", function (e) {
						e.stopPropagation();
						this.focus();
					});
					control.addClass("editing");
					
					featuresAdded = true;
				} catch (err) {
					iLog("AddFeatures", err, Log.Type.Error);
				}
			}
			// removes features from the control that were previously added
			function RemoveFeatures() {
				try {
					if (!featuresAdded)
						return;
					iLog("RemoveFeatures", "Called");
					
					control.draggable("destroy")
						.resizable("destroy")
						.removeClass("editing");
					input.removeClass("moving")
						.unbind("click.EditorText");
					
					featuresAdded = false;
				} catch (err) {
					iLog("RemoveFeatures", err, Log.Type.Error);
				}
			}
			
			/* PUBLIC METHODS */
			this.SetFeatures = function (value) {
				featuresAdded = value;
			};
			// Appends the control to a container element
			this.AppendTo = function (ContainerElement) {
				try {
					iLog("AppendTo", "Called");
					
					$(ContainerElement).append(control);
					this.BaseLoad(control, input);
					this.ValidationBaseLoad(control, input);
					if (Editor.Enabled)
						this.EditMode();
					this.Refresh();
				} catch (err) {
					iLog("AppendTo", err, Log.Type.Error);
				}
			};
			this.Create = function (ctrlName) {
				try {
					iLog("Create", "Called");
					
					control = $("<div condition='' />");
					control.html("<span>" + ctrlName + "</span><input id='" + ctrlName + "' name='" + ctrlName + "' maxlength='30'>");
					control.addClass("component EditorText");
					control.attr("ref", "EditorText");
					input = $($(control).find("input"));
					span = $($(control).find("span"));
					span.addClass("notRequired");
					span.click(function () {
						input.focus();
					});
				} catch (err) {
					iLog("Create", err, Log.Type.Error);
				}
			};
			this.DefaultMode = function () {
				try {
					iLog("DefaultMode", "Called");
					
					RemoveFeatures();
					this.AttachFilter();
					this.AttachFunctions();
					input.css("margin-left", "");
					
					var v = Utilities.Trim(input.val());
					input.val(v);

					// Date fields should automatically show a date selector on focus
					if (this.GetFilters && !input.attr("disabled") && !input.attr("readonly")) {
						var _setDate = false;
						var _minDate = null;
						var _maxDate = null;
						var _format = 'mm/dd/yy';
						var filters = this.GetFilters();
						for (var i = 0; i < filters.length; i++) {
							var filter = filters[i];
							if (filter.Filter == "DATE" && filter.DType == "DATE" && filter.Param) {
								_setDate = true;
								
								// jQ Date Picker and Date JS object has formating differences!
								_format = filter.Param.toLowerCase().replace('yyyy', 'yy');
								break;
							}
							if (filter.Filter == "DATE")
								_setDate = true;
							if (filter.DType == "DATE") {
								var s = filter.Param.split("/");
								var y = parseInt(s[2], 10);
								var m = parseInt(s[0], 10) - 1;
								var d = parseInt(s[1], 10);
								if (filter.Filter == "GREATERTHANEQUALS")
									_minDate = new Date(y, m, d);
								if (filter.Filter == "GREATERTHAN")
									_minDate = new Date(y, m, d + 1);
								if (filter.Filter == "LESSTHANEQUALS")
									_maxDate = new Date(y, m, d);
								if (filter.Filter == "LESSTHAN")
									_maxDate = new Date(y, m, d - 1);
							}
						}
						if (_setDate) {

							// If this class is present, the date picker won't be created!
							input.removeClass('hasDatepicker');
							input.datepicker({
								minDate : _minDate,
								maxDate : _maxDate,
								showOn : '',
								dateFormat : _format,
								changeMonth : true,
								changeYear : true,
								showAnim : 'fadeIn',
								beforeShow : function (input, inst) {
									var v = $(input).val();
									if (v) {
										if (Utilities.IsDate(v, filter.Param)) {
											var dt = new Date.parse(v);
											var y = dt.getFullYear();
											var m = dt.getMonth();
											var d = dt.getDate();
											
											$(this).datepicker('option', 'defaultDate', new Date(y, m, d));
										}
									} else {
										$(this).datepicker('option', 'defaultDate', new Date());
									}
								}
							});
							input.bind('dblclick.datepicker-custom', function () {
								input.datepicker('show');
							});
						}
					};
					PageHelper.RemoveComponentID(control);
				} catch (err) {
					iLog("DefaultMode", err, Log.Type.Error);
				}
			};
			this.EditMode = function () {
				try {
					iLog("EditMode", "Called");
					
					var v = Utilities.Trim(input.val());
					input.val(v);
					
					AddFeatures();
					input.css("margin-left", ""); // added for a fix after adding doctype
					this.DetachFilter();
					this.DetachFunctions();
					
					input.unbind('.datepicker-custom');
					input.datepicker("destroy");
					input.removeClass("hasDatepicker");
				} catch (err) {
					iLog("EditMode", err, Log.Type.Error);
				}
			};
			this.Load = function (ControlElement) {
				try {
					iLog("Load", "Called");
					
					control = $(ControlElement);
					span = $(control.find("span"));
					span.css("cursor", "text");
					input = $(control.find("input"));
					this.BaseLoad(control, input);

					//LK: to fix incorrect display if the structure is missaligned from past
					ResizeControl();

					span.click(function () {
						input.focus();
					});
					
					if (!Editor.Enabled) {
						//Now that the value is in place we can size the span properly
						if (Utilities.Trim(input.val()).length == 0) {
							span.css("font-size", "1em");
						} else {
							span.css("font-size", ".6em");
						}
						
						input.keyup(function () {
							if (this.value.length == 0) {
								span.css("font-size", "1em");
							} else {
								span.css("font-size", ".6em");
							}
						});
						input.hover(function () {
							span.css("font-size", "1em");
						}, function () {
							if (Utilities.Trim(input.val()).length == 0) {
								span.css("font-size", "1em");
							} else {
								span.css("font-size", ".6em");
							}
						});
						span.hover(function () {
							span.css("font-size", "1em");
						}, function () {
							if (Utilities.Trim(input.val()).length == 0) {
								span.css("font-size", "1em");
							} else {
								span.css("font-size", ".6em");
							}
						});
					}
					this.ValidationBaseLoad(control, input);
				} catch (err) {
					iLog("Load", err, Log.Type.Error);
				}
			};
			this.Refresh = function () {
				try {
					iLog("Refresh", "Called");
					
					ResizeControl();
				} catch (err) {
					iLog("Refresh", err, Log.Type.Error);
				}
			};
			this.Search = function (str, caseSensitive) {
				try {
					iLog("Search", "Called", Log.Type.Info);
					
					var re = this.BaseSearch(str, caseSensitive);
					if (re) {
						var arr = $.grep(this.GetFilters(), function(itm){
							return itm.Param.search(re) > -1;
						});
						if (arr.length > 0)
							iLog("Search", this, Log.Type.Search);
					}
				} catch (err) {
					iLog("Search", err, Log.Type.Error);
				}
			};
			this.ErrorStatus = function (boolStatus) {
				try {
					if (boolStatus)
						control.addClass("error");
					else
						control.removeClass("error");
				} catch (err) {
					iLog("ErrorStatus", err, Log.Type.Error);
				}
			};
			this.SetFocus = function () {
				try {
					input.focus();
				} catch (err) {
					iLog("SetFocus", err, Log.Type.Error);
				}
			};
			this.GetControl = function () {
				try {
					return control;
				} catch (err) {
					iLog("GetControl", err, Log.Type.Error);
				}
			};
			this.GetErrorMessage = function () {
				try {
					if (this.GetRequired()) {
						if (Utilities.Trim(input.val()).length == 0) {
							return "You must enter the field marked '" + span.text() + "'";
						}
						return null;
					}
				} catch (err) {
					iLog("GetErrorMessage", err, Log.Type.Error);
				}
			};
			this.GetProperties = function () {
				try {
					iLog("GetProperties", "Called");
					
					var properties = this.GetBaseProperties();
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Name"], this.GetName, this.SetName);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Caption"], this.GetCaption, this.SetCaption);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["MaxLength"], this.GetMaxLength, this.SetMaxLength);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Required"], this.GetRequired, this.SetRequired);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Secure"], this.GetSecure, this.SetSecure);

					var pref = PageHelper.GetParentRef(control);
					if (pref == "StaticContainer")
						properties[properties.length] = new PropertyEd.Property(PropertyFields["Width"], this.GetWidth, this.SetWidth);
					properties = this.GetValidationProperties(properties);
					
					return properties;
				} catch (err) {
					iLog("GetProperties", err, Log.Type.Error);
				}
			};
			this.GetCaption = function () {
				try {
					return span.text();
				} catch (err) {
					iLog("GetCaption", err, Log.Type.Error);
				}
			};
			this.SetCaption = function (newCaption) {
				try {
					span.text(newCaption);
				} catch (err) {
					iLog("SetCaption", err, Log.Type.Error);
				}
			};
			this.GetMaxLength = function () {
				try {
					return input.attr("maxlength");
				} catch (err) {
					iLog("GetMaxLength", err, Log.Type.Error);
				}
			};
			this.SetMaxLength = function (newValue) {
				try {
					input.attr("maxlength", newValue);
				} catch (err) {
					iLog("SetMaxLength", err, Log.Type.Error);
				}
			};			
			this.GetName = function () {
				try {
					return input.attr("name");
				} catch (err) {
					iLog("GetName", err, Log.Type.Error);
				}
			};
			this.SetName = function (newName) {
				try {
					if (newName != input.attr('id'))
						input.attr('id', newName);
					if (newName != input.attr('name'))
						input.attr('name', newName);
				} catch (err) {
					iLog("SetName", err, Log.Type.Error);
				}
			};			
			this.GetRequired = function () {
				try {
					return span.hasClass("required");
				} catch (err) {
					iLog("GetRequired", err, Log.Type.Error);
				}
			};
			this.SetRequired = function (required) {
				try {
					if (required == true || required == 'true')
						span.removeClass("notRequired").addClass("required");
					else
						span.removeClass("required").addClass("notRequired");
				} catch (err) {
					iLog("SetRequired", err, Log.Type.Error);
				}
			};
			this.GetSecure = function () {
				try {
					return input.attr("sValue") && input.attr("sMask");
				} catch (err) {
					iLog("GetSecure", err, Log.Type.Error);
				}
			};
			this.SetSecure = function (value) {
				try {
					if (value) {
						input.attr("sValue", "#S" + input.attr("name") + "-sValue#");
						input.attr("sMask", "#S" + input.attr("name") + "-sMask#");
					} else {
						input.removeAttr("sValue");
						input.removeAttr("sMask");
					}
				} catch (err) {
					iLog("SetSecure", err, Log.Type.Error);
				}
			};
			this.GetWidth = function () {
				try {
					if ($.browser.msie)
						return Utilities.ToNumber(input.width());
					else
						return Utilities.ToNumber(input.innerWidth());
				} catch (err) {
					iLog("GetWidth", err, Log.Type.Error);
				}
			};
			this.SetWidth = function (newWidth) {
				try {
					input.width(Utilities.ToNumber(newWidth));
					ResizeControl();
				} catch (err) {
					iLog("SetWidth", err, Log.Type.Error);
				}
			};

		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	}
	
	return EditorText;
});

define('EditorMemo', ['TemplateBase', 'PropertyFields', 'Utilities', 'PageHelper', 'Editor'], function (TemplateBase, PropertyFields, Utilities, PageHelper, Editor) {
	function EditorMemo() {
		try {
			this.inheritFrom = TemplateBase;
			this.inheritFrom();

			/* PUBLIC PROPERTIES */
			this.NameRequired = true;
			this.refClassName = "EdMemo";

			/* PRIVATE PROPERTIES */
			var self = this;
			var control = null;
			var featuresAdded = false;
			var input = null;
			var span = null;

			/* PRIVATE METHODS */
			
			function iLog(Place, Message, Type, Silent) {
				self.Log(self.refClassName + "." + Place, Message, Type, Silent);
			}
			// sizes the control around the textarea element
			function ResizeControl() {
				try {
					iLog("ResizeControl", "Called");

					// Do not update elements which have no or wrong size! (hidden)
					var w = self.GetWidth();
					var h = self.GetHeight();
					if (w < 1 || h < 1)
						return;
						
					input.width(w).height(h);
					span.width(w).height(h);
				} catch (err) {
					iLog("ResizeControl", err, Log.Type.Error);
				}
			}
			// adds features to the control based on the rules specified for this type of control
			function AddFeatures() {
				try {
					if (featuresAdded)
						return;
					iLog("AddFeatures", "Called");
					
					var pref = PageHelper.GetParentRef(control);
					if (pref == "StaticContainer") {
						input.addClass("moving");
						control.draggable({
							containment: "parent",
							cancel: "",
							grid  : MP.Tools.Config.Editor.html.snap,
							start : self.onDragStart,
							stop  : self.onDragStop,
							drag  : self.onDragProgress
						});
						control.resizable({
							autoHide : true,
							grid : MP.Tools.Config.Editor.html.snap,
							resize : ResizeControl,
							stop : ResizeControl
						});
					}
					control.addClass("editing");
					
					featuresAdded = true;
				} catch (err) {
					iLog("AddFeatures", err, Log.Type.Error);
				}
			}
			// removes features from the control that were previously added
			function RemoveFeatures() {
				try {
					if (!featuresAdded)
						return;
					iLog("RemoveFeatures", "Called");
					
					control.draggable("destroy")
						.resizable("destroy")
						.removeClass("editing");
					input.removeClass("moving");
					
					CleanUp(true);
					
					featuresAdded = false;
				} catch (err) {
					iLog("RemoveFeatures", err, Log.Type.Error);
				}
			}
			function CleanUp(inEditor) {
				try {
					if (inEditor) {
						var div = control.find('div.ckEditorDiv');
						if (!div.length) {
							div = $("<div class='ckEditorDiv'/>");
							div.appendTo(control);
						}
						div.html(input.val());
					}
					if (!span.hasClass("EditorMemoSpan")) {
						iLog("", "Incompatible element! This page should be resaved by the editor.", Log.Type.Warning);
						span.addClass("EditorMemoSpan");					

						// LK: We should not be removing styles! This is just a temporary correction of old memos!
						span.removeAttr("style");
						input.removeAttr("style");
					}
				} catch (err) {
					iLog("CleanUp", err, Log.Type.Error);
				}
			}
				
			/* PUBLIC METHODS */
			this.SetFeatures = function (value) {
				featuresAdded = value;
			};
			// Appends the control to a container element
			this.AppendTo = function (ContainerElement) {
				try {
					iLog("AppendTo", "Called");
					
					$(ContainerElement).append(control);
					this.BaseLoad(control, input);
					if (Editor.Enabled)
						this.EditMode();
					this.Refresh();
				} catch (err) {
					iLog("AppendTo", err, Log.Type.Error);
				}
			};
			this.Create = function (ctrlName) {
				try {
					iLog("Create", "Called");
					
					control = $("<div ref='EditorMemo' style='width: 100px; height: 80px;' condition='' />");
					control.html("<span>" + ctrlName + "</span><textarea id='" + ctrlName + "' name='" + ctrlName + "'></textarea><div class='ckEditorDiv'/></div>");
					control.addClass("component EditorMemo");

					input = control.find("textarea");
					span = control.find("span");
					span.addClass("EditorMemoSpan notRequired");
					span.click(function () {
						input.focus();
					});
				} catch (err) {
					iLog("Create", err, Log.Type.Error);
				}
			};
			this.DefaultMode = function () {
				try {
					iLog("DefaultMode", "Called");
					
					RemoveFeatures();
					this.AttachFunctions();
					PageHelper.RemoveComponentID(control);
					
					if (Editor.Enabled)
						return;
						
					if (control.attr("EditHTML") == "true") {
						var id = input.attr('id');
						var w = input.width();
						var h = input.height();
						var div = control.find('div.ckEditorDiv');
						if (div.length != 1) {
							iLog("DefaultMode", "CkEditor conversion failed! This page must be saved by the editor.", Log.Type.Warning);
						} else {
							input.remove();
							input = div;
							input.attr('id', id);
						}

						span.remove();
						Global.MakeCKEditorFromMemo(id, w, h);
						return;
					}
					if (control.attr("SpellCheck") == "true") {
						control.append("<div class='MemoSpellButton' title='Spellcheck' onclick='Global.AddSpellcheck(this)'></div>");
						return;
					}
				} catch (err) {
					iLog("DefaultMode", err, Log.Type.Error);
				}
			};
			this.EditMode = function () {
				try {
					iLog("EditMode", "Called");
					
					AddFeatures();
					this.DetachFunctions();
				} catch (err) {
					iLog("EditMode", err, Log.Type.Error);
				}
			};
			this.Load = function (ControlElement) {
				try {
					iLog("Load", "Called");
					
					control = $(ControlElement);
					input = $(control.find("textarea"));
					span = $(control.find("span.EditorMemoSpan"));
					if (!span.length)
						span = $(control.find("span"));
					span.click(function () {
						input.focus();
					});
					this.BaseLoad(control, input);
					
					CleanUp(false);
					ResizeControl();
					
					//LK: Do not resize label cause IE adds a vertical scrollbar which hides it too much
				} catch (err) {
					iLog("Load", err, Log.Type.Error);
				}
			};
			this.Refresh = function () {
				try {
					iLog("Refresh", "Called");
					
					ResizeControl();
				} catch (err) {
					iLog("Refresh", err, Log.Type.Error);
				}
			};
			this.Search = function (str, caseSensitive) {
				try {
					iLog("Search", "Called", Log.Type.Info);

					var re = this.BaseSearch(str, caseSensitive);
					if (re) {
						//if (this.GetProperty().search(re) > -1)
						//	iLog("Search", this, Log.Type.Search);
					}
				} catch (err) {
					iLog("Search", err, Log.Type.Error);
				}
			};
			this.GetErrorMessage = function () {
				try {
					if (this.GetRequired()) {
						if (Utilities.Trim(input.val()).length == 0) {
							return "You must enter the field marked '" + span.text() + "'";
						}
						return null;
					}
				} catch (err) {
					iLog("GetErrorMessage", err, Log.Type.Error);
				}
			};
			this.ErrorStatus = function (boolStatus) {
				try {
					if (boolStatus)
						control.addClass("error");
					else
						control.removeClass("error");
				} catch (err) {
					iLog("ErrorStatus", err, Log.Type.Error);
				}
			};
			this.SetFocus = function () {
				try {
					input.focus();
				} catch (err) {
					iLog("SetFocus", err, Log.Type.Error);
				}
			};
			this.GetControl = function () {
				try {
					return control;
				} catch (err) {
					iLog("GetControl", err, Log.Type.Error);
				}
			};
			this.GetProperties = function () {
				try {
					iLog("GetProperties", "Called");
					
					var properties = this.GetBaseProperties();
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Name"], this.GetName, this.SetName);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Caption"], this.GetCaption, this.SetCaption);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Required"], this.GetRequired, this.SetRequired);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["EditHTML"], this.GetEditHTML, this.SetEditHTML);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Spellcheck"], this.GetSpellcheck, this.SetSpellcheck);

					var pref = PageHelper.GetParentRef(control);
					if (pref == "StaticContainer") {
						properties[properties.length] = new PropertyEd.Property(PropertyFields["Width"], this.GetWidth, this.SetWidth);
						properties[properties.length] = new PropertyEd.Property(PropertyFields["Height"], this.GetHeight, this.SetHeight);
					}
					
					return properties;
				} catch (err) {
					iLog("GetProperties", err, Log.Type.Error);
				}
			};
			this.GetName = function () {
				try {
					return input.attr("name");
				} catch (err) {
					iLog("GetName", err, Log.Type.Error);
				}
			};
			this.SetName = function (newName) {
				try {
					if (newName != input.attr('id'))
						input.attr('id', newName);
					if (newName != input.attr('name'))
						input.attr('name', newName);
				} catch (err) {
					iLog("SetName", err, Log.Type.Error);
				}
			};			
			this.GetCaption = function () {
				try {
					return span.text();
				} catch (err) {
					iLog("GetCaption", err, Log.Type.Error);
				}
			};			
			this.SetCaption = function (newCaption) {
				try {
					span.text(newCaption);
				} catch (err) {
					iLog("SetCaption", err, Log.Type.Error);
				}
			};			
			this.GetRequired = function () {
				try {
					return span.hasClass("required");
				} catch (err) {
					iLog("GetRequired", err, Log.Type.Error);
				}
			};
			this.SetRequired = function (required) {
				try {
					if (required == true || required == 'true')
						span.removeClass("notRequired").addClass("required");
					else
						span.removeClass("required").addClass("notRequired");
				} catch (err) {
					iLog("SetRequired", err, Log.Type.Error);
				}
			};
			this.GetEditHTML = function () {
				try {
					return control.attr("EditHTML") == "true";
				} catch (err) {
					iLog("GetEditHTML", err, Log.Type.Error);
				}
			};			
			this.SetEditHTML = function (value) {
				try {
					control.attr("EditHTML", value);
				} catch (err) {
					iLog("SetEditHTML", err, Log.Type.Error);
				}
			};			
			this.GetSpellcheck = function () {
				try {
					return control.attr("Spellcheck") == "true";
				} catch (err) {
					iLog("GetSpellcheck", err, Log.Type.Error);
				}
			};			
			this.SetSpellcheck = function (value) {
				try {
					control.attr("Spellcheck", value);
				} catch (err) {
					iLog("SetSpellcheck", err, Log.Type.Error);
				}
			};
			this.GetWidth = function () {
				try {
					return Utilities.ToNumber(control.css("width"));
				} catch (err) {
					iLog("GetWidth", err, Log.Type.Error);
				}
			};
			this.SetWidth = function (newwidth) {
				try {
					var w = Utilities.ToNumber(newwidth);
					if (!w)
						w = Utilities.ToNumber(control.css("width"));

					control.css("width", w);

					ResizeControl();
				} catch (err) {
					iLog("SetWidth", err, Log.Type.Error);
				}
			};
			this.GetHeight = function () {
				try {
					return Utilities.ToNumber(control.css("height"));
				} catch (err) {
					iLog("GetHeight", err, Log.Type.Error);
				}
			};
			this.SetHeight = function (newheight) {
				try {
					var h = Utilities.ToNumber(newheight);
					if (!h)
						h = Utilities.ToNumber(control.css("height"));

					control.css("height", h);

					ResizeControl();
				} catch (err) {
					iLog("SetHeight", err, Log.Type.Error);
				}
			};

		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	}
	
	return EditorMemo;
});

define('EditorCheckBox', ['TemplateBase', 'PropertyFields', 'PageHelper', 'Editor'], function (TemplateBase, PropertyFields, PageHelper, Editor) {
	function EditorCheckBox() {
		try {
			this.inheritFrom = TemplateBase;
			this.inheritFrom();

			/* PUBLIC PROPERTIES */
			this.NameRequired = true;
			this.refClassName = "EdCheckBox";

			/* PRIVATE PROPERTIES */
			var self = this;
			var control = null;
			var featuresAdded = false;
			var input = null;
			var span = null;

			/* PRIVATE METHODS */
			
			function iLog(Place, Message, Type, Silent) {
				self.Log(self.refClassName + "." + Place, Message, Type, Silent);
			}
			// adds features to the control based on the rules specified for this type of control
			function AddFeatures() {
				try {
					if (featuresAdded)
						return;
					iLog("AddFeatures", "Called");

					var pref = PageHelper.GetParentRef(control);
					if (pref == "StaticContainer") {
						span.addClass("moving");
						input.addClass("moving");
						control.draggable({
							containment: "parent",
							cancel: "",
							grid  : MP.Tools.Config.Editor.html.snap,
							start : self.onDragStart,
							stop  : self.onDragStop,
							drag  : self.onDragProgress
						});
					}
					control.addClass("editing");
					span.unbind("click");
					
					featuresAdded = true;
				} catch (err) {
					iLog("AddFeatures", err, Log.Type.Error);
				}
			}
			// removes features from the control that were previously added
			function RemoveFeatures() {
				try {
					if (!featuresAdded)
						return;
					iLog("RemoveFeatures", "Called");

					control.draggable("destroy")
						.removeClass("editing");
					input.removeClass("moving");
					span.removeClass("moving");
					
					featuresAdded = false;
				} catch (err) {
					iLog("RemoveFeatures", err, Log.Type.Error);
				}
			}
			
			/* PUBLIC METHODS */
			this.SetFeatures = function (value) {
				featuresAdded = value;
			};
			// Appends the control to a container element
			this.AppendTo = function (ContainerElement) {
				try {
					iLog("AppendTo", "Called");
					
					$(ContainerElement).append(control);
					this.BaseLoad(control, input);
					if (Editor.Enabled)
						this.EditMode();
					this.Refresh();
				} catch (err) {
					iLog("AppendTo", err, Log.Type.Error);
				}
			};
			this.Create = function (ctrlName) {
				try {
					iLog("Create", "Called");
					
					control = $("<div condition='' />");
					control.html("<input type='checkbox' id='" + ctrlName + "' name='" + ctrlName + "' value='1'><span>" + ctrlName + "</span>");
					control.addClass("component EditorCheckBox");
					control.attr("ref", "EditorCheckBox");
					input = $($(control).find("input"));
					span = $($(control).find("span"));
					span.addClass("notRequired");
				} catch (err) {
					iLog("Create", err, Log.Type.Error);
				}
			};
			this.DefaultMode = function () {
				try {
					iLog("DefaultMode", "Called");
					
					RemoveFeatures();
					this.AttachFunctions();
					PageHelper.RemoveComponentID(control);
				} catch (err) {
					iLog("DefaultMode", err, Log.Type.Error);
				}
			};
			this.EditMode = function () {
				try {
					iLog("EditMode", "Called");
					
					AddFeatures();
					this.DetachFunctions();
				} catch (err) {
					iLog("EditMode", err, Log.Type.Error);
				}
			};
			this.Load = function (ControlElement) {
				try {
					iLog("Load", "Called");
					
					control = $(ControlElement);
					input = $(control.find("input"));
					span = $(control.find("span"));
					span.css("cursor", "pointer");					
					span.bind("click", function () {
						//input[0].checked = !input[0].checked; LK: causing various page logic problems
						self.SetFocus();
					});

					this.BaseLoad(control, input);
				} catch (err) {
					iLog("Load", err, Log.Type.Error);
				}
			};
			this.Refresh = function () {
				try {
					iLog("Refresh", "Called");
				} catch (err) {
					iLog("Refresh", err, Log.Type.Error);
				}
			};
			this.Search = function (str, caseSensitive) {
				try {
					iLog("Search", "Called", Log.Type.Info);

					var re = this.BaseSearch(str, caseSensitive);
					if (re) {
						if (this.GetValue().search(re) > -1)
							iLog("Search", this, Log.Type.Search);
					}
				} catch (err) {
					iLog("Search", err, Log.Type.Error);
				}
			};
			this.GetErrorMessage = function () {
				try {
					if (this.GetRequired()) {
						if (!input[0].checked) {
							return "You must check the box named '" + span.text() + "'";
						}
						return null;
					}
				} catch (err) {
					iLog("GetErrorMessage", err, Log.Type.Error);
				}
			};
			this.ErrorStatus = function (boolStatus) {
				try {
					if (boolStatus)
						control.addClass("error");
					else
						control.removeClass("error");
				} catch (err) {
					iLog("ErrorStatus", err, Log.Type.Error);
				}
			};
			this.SetFocus = function () {
				try {
					input.focus();
				} catch (err) {
					iLog("SetFocus", err, Log.Type.Error);
				}
			};
			this.GetControl = function () {
				try {
					return control;
				} catch (err) {
					iLog("GetControl", err, Log.Type.Error);
				}
			};
			this.GetProperties = function () {
				try {
					iLog("GetProperties", "Called");
					
					var properties = this.GetBaseProperties();
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Name"], this.GetName, this.SetName);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Caption"], this.GetCaption, this.SetCaption);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Required"], this.GetRequired, this.SetRequired);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Value"], this.GetValue, this.SetValue);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Flipped"], this.GetFlipped, this.SetFlipped);
					
					return properties;
				} catch (err) {
					iLog("GetProperties", err, Log.Type.Error);
				}
			};
			this.GetCaption = function () {
				try {
					return span.text();
				} catch (err) {
					iLog("GetCaption", err, Log.Type.Error);
				}
			};
			this.SetCaption = function (newCaption) {
				try {
					span.text(newCaption);
				} catch (err) {
					iLog("SetCaption", err, Log.Type.Error);
				}
			};
			this.GetName = function () {
				try {
					return input.attr("name");
				} catch (err) {
					iLog("GetName", err, Log.Type.Error);
				}
			};
			this.SetName = function (newName) {
				try {
					if (newName != input.attr('id'))
						input.attr('id', newName);
					if (newName != input.attr('name'))
						input.attr('name', newName);
				} catch (err) {
					iLog("SetName", err, Log.Type.Error);
				}
			};
			this.GetRequired = function () {
				try {
					return span.hasClass("required");
				} catch (err) {
					iLog("GetRequired", err, Log.Type.Error);
				}
			};
			this.SetRequired = function (required) {
				try {
					if (required == true || required == 'true')
						span.removeClass("notRequired").addClass("required");
					else
						span.removeClass("required").addClass("notRequired");
				} catch (err) {
					iLog("SetRequired", err, Log.Type.Error);
				}
			};
			this.GetValue = function () {
				try {
					return input.attr("value");
				} catch (err) {
					iLog("GetValue", err, Log.Type.Error);
				}
			};
			this.SetValue = function (newValue) {
				try {
					input.attr("value", newValue);
				} catch (err) {
					iLog("SetValue", err, Log.Type.Error);
				}
			};
			this.GetFlipped = function () {
				try {
					var el = control.find(':first');
					var b = el[0] == span[0];
					return b;
				} catch (err) {
					iLog("GetFlipped", err, Log.Type.Error);
				}
			};
			this.SetFlipped = function (value) {
				try {
					var el = span.detach();
					if (value == true || value == 'true')
						control.prepend(el);
					else
						control.append(el);
				} catch (err) {
					iLog("SetFlipped", err, Log.Type.Error);
				}
			};

			// Catches every error in Editor CheckBox
		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	}
	
	return EditorCheckBox;
});

define('EditorRadio', ['TemplateBase', 'PropertyFields', 'PageHelper', 'Editor'], function (TemplateBase, PropertyFields, PageHelper, Editor) {
	function EditorRadio() {
		try {
			this.inheritFrom = TemplateBase;
			this.inheritFrom();

			/* PUBLIC PROPERTIES */
			this.NameRequired = true;
			this.refClassName = "EdRadio";

			/* PRIVATE PROPERTIES */
			var self = this;
			var control = null;
			var featuresAdded = false;
			var input = null;
			var span = null;

			/* PRIVATE METHODS */

			function iLog(Place, Message, Type, Silent) {
				self.Log(self.refClassName + "." + Place, Message, Type, Silent);
			}
			// adds features to the control based on the rules specified for this type of control
			function AddFeatures() {
				try {
					if (featuresAdded)
						return;
					iLog("AddFeature", "Called");
					
					var pref = PageHelper.GetParentRef(control);
					if (pref == "StaticContainer") {
						span.addClass("moving");
						input.addClass("moving");
						control.draggable({
							containment: "parent",
							cancel: "",
							grid  : MP.Tools.Config.Editor.html.snap,
							start : self.onDragStart,
							stop  : self.onDragStop,
							drag  : self.onDragProgress
						});
					}
					control.addClass("editing");
					
					featuresAdded = true;
				} catch (err) {
				iLog("AddFeatures", err, Log.Type.Error);
				}
			}
			// removes features from the control that were previously added
			function RemoveFeatures() {
				try {
					if (!featuresAdded)
						return;
					iLog("RemoveFeatures", "Called");
					
					control.draggable("destroy")
						.removeClass("editing");
					input.removeClass("moving")
					span.removeClass("moving")
					
					featuresAdded = false;
				} catch (err) {
					iLog("RemoveFeatures", err, Log.Type.Error);
				}
			}
			
			/* PUBLIC METHODS */
			this.SetFeatures = function (value) {
				featuresAdded = value;
			};
			// Appends the control to a container element
			this.AppendTo = function (ContainerElement) {
				try {
					iLog("AppendTo", "Called");
					
					$(ContainerElement).append(control);
					this.BaseLoad(control, input);
					if (Editor.Enabled)
						this.EditMode();
					this.Refresh();
				} catch (err) {
					iLog("AppendTo", err, Log.Type.Error);
				}
			};
			this.Create = function (ctrlName) {
				try {
					iLog("Create", "Called");
					
					name = ctrlName;
					control = $("<div condition='' />");
					control.html("<input type='radio' id='" + name + "' name='" + name + "' value='1'><span>" + ctrlName + "</span>");
					control.addClass("component EditorRadio");
					control.attr("ref", "EditorRadio");
					input = $($(control).find("input"));
					span = $($(control).find("span"));
					span.addClass("notRequired");
				} catch (err) {
					iLog("Create", err, Log.Type.Error);
				}
			};
			this.DefaultMode = function () {
				try {
					iLog("DefaultMode", "Called");
					
					RemoveFeatures();
					this.AttachFunctions();
					PageHelper.RemoveComponentID(control);
				} catch (err) {
					iLog("DefaultMode", err, Log.Type.Error);
				}
			};
			this.EditMode = function () {
				try {
					iLog("EditMode", "Called");
					
					AddFeatures();
					this.DetachFunctions();
				} catch (err) {
					iLog("EditMode", err, Log.Type.Error);
				}
			};
			this.Load = function (ControlElement) {
				try {
					iLog("Load", "Called");
					
					control = $(ControlElement);
					input = $(control.find("input"));
					span = $(control.find("span"));
					span.css("cursor", "pointer");
					span.bind("click", function () {
						//input[0].checked = true; LK: causing various page logic problems
						self.SetFocus();
					});
					this.BaseLoad(control, input);
				} catch (err) {
					iLog("Load", err, Log.Type.Error);
				}
			};
			this.Refresh = function () {
				try {
					iLog("Refresh", "Called");
				} catch (err) {
					iLog("Refresh", err, Log.Type.Error);
				}
			};
			this.Search = function (str, caseSensitive) {
				try {
					iLog("Search", "Called", Log.Type.Info);

					var re = this.BaseSearch(str, caseSensitive);
					if (re) {
						if (this.GetValue().search(re) > -1)
							iLog("Search", this, Log.Type.Search);
					}
				} catch (err) {
					iLog("Search", err, Log.Type.Error);
				}
			};
			this.GetProperties = function () {
				try {
					iLog("GetProperties", "Called");
					
					var properties = this.GetBaseProperties();
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Name"], this.GetName, this.SetName);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Caption"], this.GetCaption, this.SetCaption);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Required"], this.GetRequired, this.SetRequired);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Value"], this.GetValue, this.SetValue);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Flipped"], this.GetFlipped, this.SetFlipped);

					return properties;
				} catch (err) {
					iLog("GetProperties", err, Log.Type.Error);
				}
			};
			this.GetErrorMessage = function (ser) {
				try {
					if (this.GetRequired()) {
						var name = input.attr("name");
						if (ser.indexOf("&" + name + "=") == -1)
							return "You must choose one of the radios '" + span.text() + "'";
						return null;
					}
				} catch (err) {
					iLog("GetErrorMessage", err, Log.Type.Error);
				}
			};
			this.ErrorStatus = function (boolStatus) {
				try {
					var name;
					if (boolStatus) {
						name = control.find("input").attr("name");
						$("div[Ref='EditorRadio']").each(function () {
							if ($(this).find("input[name='" + name + "']").length > 0) {
								$(this).addClass("error");
							}
						});
					} else {
						name = control.find("input").attr("name");
						$("div[Ref='EditorRadio']").each(function () {
							if ($(this).find("input[name='" + name + "']").length > 0) {
								$(this).removeClass("error");
							}
						});
					}
				} catch (err) {
					iLog("ErrorStatus", err, Log.Type.Error);
				}
			};
			this.SetFocus = function () {
				try {
					input.focus();
				} catch (err) {
					iLog("SetFocus", err, Log.Type.Error);
				}
			};
			this.GetControl = function () {
				try {
					return control;
				} catch (err) {
					iLog("GetControl", err, Log.Type.Error);
				}
			};
			this.GetCaption = function () {
				try {
					return span.text();
				} catch (err) {
					iLog("GetCaption", err, Log.Type.Error);
				}
			};
			this.GetName = function () {
				try {
					return input.attr("name");
				} catch (err) {
					iLog("GetName", err, Log.Type.Error);
				}
			};
			this.GetRequired = function () {
				try {
					return span.hasClass("required");
				} catch (err) {
					iLog("GetRequired", err, Log.Type.Error);
				}
			};
			this.GetValue = function () {
				try {
					return input.val();
				} catch (err) {
					iLog("GetValue", err, Log.Type.Error);
				}
			};
			this.SetCaption = function (newCaption) {
				try {
					span.text(newCaption);
				} catch (err) {
					iLog("SetCaption", err, Log.Type.Error);
				}
			};
			this.SetName = function (newName) {
				try {
					if (newName != input.attr('id'))
						input.attr('id', newName);
					if (newName != input.attr('name'))
						input.attr('name', newName);
				} catch (err) {
					iLog("SetName", err, Log.Type.Error);
				}
			};			
			this.SetRequired = function (required) {
				try {
					if (required == true || required == 'true')
						span.removeClass("notRequired").addClass("required");
					else
						span.removeClass("required").addClass("notRequired");
				} catch (err) {
					iLog("SetRequired", err, Log.Type.Error);
				}
			};			
			this.SetValue = function (newValue) {
				try {
					input.val(newValue);
				} catch (err) {
					iLog("SetValue", err, Log.Type.Error);
				}
			};
			this.GetFlipped = function () {
				try {
					var el = control.find(':first');
					var b = el[0] == span[0];
					return b;
				} catch (err) {
					iLog("GetFlipped", err, Log.Type.Error);
				}
			};
			this.SetFlipped = function (value) {
				try {
					var el = span.detach();
					if (value == true || value == 'true')
						control.prepend(el);
					else
						control.append(el);
				} catch (err) {
					iLog("SetFlipped", err, Log.Type.Error);
				}
			};

		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	}
	
	return EditorRadio;
});
/*
 END of HTML Control Objects
*/


/*
 BEGIN of Container Objects
*/
define('ValidationBase', ['ValidatorContainer', 'jQuery', 'PropertyFields', 'Utilities', 'PageHelper', 'Editor'], function (Validator, $, PropertyFields, Utilities, PageHelper, Editor) {
	// This needs rewriting
	
	var ValidationBase = function () {
		this.refClassName = "ValidBase";
		
		var self = this;
		var _control = null;
		var _input = null;
		
		function iLog(Place, Message, Type, Silent) {
			Log.Add(self.refClassName + "." + Place, Message, Type, Silent);
		}
		var applyFilters = function (val, filters, skipValidation, callback, success, error) {
			callback = callback || function (x) {
				return x;
			};
			success = success || $.noop;
			error = error || $.noop;
			
			if (skipValidation || $.trim(val) === '') {
				return success(val);
			};
			
			try {
				$.each(filters, function (i, filter) {
					val = callback(filter, val);
				});
			} catch (err) {
				return error(err);
			}
			
			return success(val);
		}
		
		this.ValidationBaseLoad = function (ControlElement, InputElement) {
			try {
				_control = ControlElement;
				_input = InputElement;
			} catch (err) {
				iLog("ValidationBaseLoad", err, Log.Type.Error);
			}
		};
		this.FilterInput = function () {
			var noVal = _input.attr("sMask") && !this.UserUpdate;
			applyFilters(_input.val(), this.GetFilters(), noVal,
			function (filter, val) {
				return filter.FilterText(val);
			}, function (val) {
				_input.val(val);
			}, function (err) {
				jAlert(err, 'Invalid Entry', function() {
					_input.select();
					_input.focus();
				});
			});
		};		
		this.AttachFilter = function () {
			try {
				if (Editor.Enabled)
					return;
				
				var getControl = function (element) {
					var p = $(element).parents(".component")[0];
					return PageHelper.GetEditorComponent(p);
				};
				
				$.each(this.GetFilters(), function (i, filter) {
					filter.Attach($(_input));
				});
				_input.bind("change.filter", function () {
					var ctrl = getControl(this);
					ctrl.UserUpdate = true;
				});
				_input.bind("blur.filter", function () {
					var ctrl = getControl(this);
					ctrl.FilterInput();
				});
			} catch (err) {
				iLog("AttachFilter", err, Log.Type.Error);
			}
		};		
		this.DetachFilter = function () {
			try {
				$.each(this.GetFilters(), function (i, filter) {
					filter.Detach($(_input));
				});
				
				_input.unbind(".filter");
			} catch (err) {
				iLog("DetachFilter", err, Log.Type.Error);
			}
		};		
		this.GetValidationProperties = function (properties) {
			try {
				var args = new RulesMaker.ComplexArgs(this.GetValidationProperties, this.AddFilter, this.DeleteFilter);
				switch (_control.attr("Ref")) {
				case "EditorText":
					properties[properties.length] = new PropertyEd.Property(PropertyFields["EditorTextFilters"], this.GetFilters, this.SetFilters, args);
					break;
				case "EditorDropdown":
					break;
				}
				return properties;
			} catch (err) {
				iLog("GetValidationProperties", err, Log.Type.Error);
			}
		};
		this.AddFilter = function () {
			try {
				if ((_control.attr("filter") == null) || (_control.attr("filter").length == 0)) {
					_control.attr("filter", "");
					_control.attr("param", "");
					_control.attr("dtype", "");
				} else {
					_control.attr("filter", _control.attr("filter") + "|");
					_control.attr("param", _control.attr("param") + "|");
					_control.attr("dtype", _control.attr("dtype") + "|");
				}
			} catch (err) {
				iLog("AddFilter", err, Log.Type.Error);
			}
		};
		this.DeleteFilter = function (FilterIndex) {
			try {
				if (!_control.attr("filter") || !_control.attr("param") || !_control.attr("dtype"))
					return;

				var val;
				val = _control.attr("filter");
				var filters = (val.match(/|/)) ? val.split("|") : [val];
				filters.splice(FilterIndex, 1);
				_control.attr("filter", filters.toPipeString());

				val = _control.attr("param");
				var params = (val.match(/|/)) ? val.split("|") : [val];
				params.splice(FilterIndex, 1);
				_control.attr("param", params.toPipeString());

				val = _control.attr("dtype");
				var dtypes = (val.match(/|/)) ? val.split("|") : [val];
				dtypes.splice(FilterIndex, 1);
				_control.attr("dtype", dtypes.toPipeString());

				if (_control.attr("filter").length == 0) {
					_control.removeAttr("filter");
					_control.removeAttr("param");
					_control.removeAttr("dtype");
				}
			} catch (err) {
				iLog("DeleteFilter", err, Log.Type.Error);
			}
		};		
		this.GetFilters = function () {
			var filters = _control.attr("filter");
			var dtypes = _control.attr("dtype");
			var params = _control.attr("param");
			
			if (filters == null || filters == "" || dtypes == null || params == null) {
				return [];
			}
			
			var ret = [];
			
			filters = filters.split("|");
			dtypes = dtypes.split("|");
			params = params.split("|");
			
			for (var i = 0; i < filters.length; i++) {
				ret.push(new Filter(filters[i], params[i], dtypes[i]));
			}
			
			return ret;
		};		
		this.SetFilters = function (arr) {
			try {
				var filters = "";
				var params = "";
				var dtypes = "";
				var hasFilters = true;
				var f;
				if (arr.length == 0)
					hasFilters = false;
				if (arr.length == 1) {
					f = Utilities.ReplaceAll(arr[0].Filter, " ", "");
					if (f == "")
						hasFilters = false;
				}
				if (!hasFilters) {
					_control.removeAttr("filter");
					_control.removeAttr("param");
					_control.removeAttr("dtype");
					return;
				}
				for (var i = 0; i < arr.length; i++) {
					f = Utilities.ReplaceAll(arr[i].Filter, " ", "");
					if (f.length > 0) {
						filters += arr[i].Filter + "|";
						params += arr[i].Param + "|";
						dtypes += arr[i].DType + "|";
					}
				}
				if (arr.length > 0) {
					filters = filters.removeLastChar();
					params = params.removeLastChar();
					dtypes = dtypes.removeLastChar();
				}
				_control.attr("filter", filters);
				_control.attr("param", params);
				_control.attr("dtype", dtypes);
			} catch (err) {
				iLog("SetFilters", err, Log.Type.Error);
			}
		};		
		function Filter(filter, param, dtype) {
			this.Filter = filter;
			this.DType = dtype;
			this.Param = param;
			
			this.Callbacks = Validator.Filters[this.Filter];
		}
		
		// Below are too similar for my liking.
		Filter.prototype.FilterText = function (value) {
			var func = this.Callbacks.filter;
			
			if (typeof func !== 'function') {
				return value;
			}
			
			return func(value, this.DType, this.Param);
		};
		
		Filter.prototype.Attach = function ($element) {
			if (typeof this.Callbacks.filter !== 'object' || !this.Callbacks.filter.attach) {
				return;
			}
			
			this.Callbacks.filter.attach($element, this.DType, this.Param);
		};
		
		Filter.prototype.Detach = function ($element) {
			if (typeof this.Callbacks.filter !== 'object' || !this.Callbacks.filter.detach) {
				return;
			}
			
			this.Callbacks.filter.detach($element, this.DType, this.Param);
		};
	};
	
	return ValidationBase;
});

define('EditableContent', ['Utilities', 'PageHelper', 'Editor'], function (Utilities, PageHelper, Editor) {
	function EditableContent() {
		try {
			/* PUBLIC PROPERTIES */

			this.NameRequired = false;
			this.Accept = ["StaticContainer", "DynamicContainer", "EditorLabel", "EditorDiv", "TransferList", "ValidationContainer", "ScriptingContainer"];
			this.refClassName = "EditableContent";

			/* PRIVATE PROPERTIES */
			var self = this;
			var control = null;
			var featuresAdded = false;

			/* PRIVATE METHODS */
			
			function iLog(Place, Message, Type, Silent) {
				Log.Add(self.refClassName + "." + Place, Message, Type, Silent);
			}
			// adds features to the control based on the rules specified for this type of control
			function AddFeatures() {
				try {
					if (featuresAdded)
						return;
					iLog("AddFeatures", "Called");
					
					control.droppable({
						accept : Utilities.GetAcceptedComponents(self.Accept),
						greedy : true,
						activeClass : 'droppable-active',
						hoverClass : 'droppable-hover',
						drop : function (ev, ui) {
							var ref = $(ui.draggable).attr("ref");
							Editor.BuildComponent(ref, $(this));
						}
					});
					control.sortable({
						items  : ">.component",
						handle : ">.handle"
					});
					control.disableSelection();

					featuresAdded = true;
				} catch (err) {
					iLog("AddFeatures", err, Log.Type.Error);
				}
			}
			// removes features from the control that were previously added
			function RemoveFeatures() {
				try {
					if (!featuresAdded)
						return;
					iLog("RemoveFeatures", "Called");
					
					control
						.droppable("destroy")
						.sortable("destroy")
						.enableSelection();
					
					featuresAdded = false;
				} catch (err) {
					iLog("RemoveFeatures", err, Log.Type.Error);
				}
			}

			return {
				/* PUBLIC METHODS */
				SetFeatures : function (value) {
				},
				HighlightAsSelected : function (value) {
				},
				HighlightAsFound : function (value) {
				},
				DefaultMode : function () {
					try {
						iLog("DefaultMode", "Called");
						
						RemoveFeatures();
						control.bind("keydown", function (event) {
							if ((event.keyCode == 13) && (!$(event.target).is(':button ,textarea'))) {
								var btn = $(this).find(".EditorSubmitButton input[DefaultButton='true']");
								if (btn.length > 1) {
									iLog("DefaultMode", "There are " + btn.length + " default submit buttons on the page! Submit skipped.", Log.Type.Warning);
									return;
								}									
								var e = new jQuery.Event("click");
								btn.trigger(e);
							}
						});
						PageHelper.RemoveComponentID(control);
					} catch (err) {
						iLog("DefaultMode", err, Log.Type.Error);
					}
				},
				EditMode : function () {
					try {
						iLog("EditMode", "Called");
					
						AddFeatures();
					} catch (err) {
						iLog("EditMode", err, Log.Type.Error);
					}
				},
				Load : function (ControlElement) {
					try {
						iLog("Load", "Called");
						
						control = $(ControlElement);
					} catch (err) {
						iLog("Load", err, Log.Type.Error);
					}
				},
				GetControl : function () {
					try {
						return control;
					} catch (err) {
						iLog("GetControl", err, Log.Type.Error);
					}
				},
				Refresh : function () {
					try {
						iLog("Refresh", "Called");
					} catch (err) {
						iLog("Refresh", err, Log.Type.Error);
					}
				}
			};
			/* PRIVATE METHODS */
		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	}
	
	return EditableContent;
});

define('DynamicContainer', ['TemplateBase', 'PropertyFields', 'Utilities', 'superTable', 'PageHelper', 'Editor'], function (TemplateBase, PropertyFields, Utilities, superTable, PageHelper, Editor) {
	function DynamicContainer() {
		try {
			this.inheritFrom = TemplateBase;
			this.inheritFrom();

			/* PUBLIC PROPERTIES */
			this.NameRequired = false;
			this.refClassName = "DynamicCont";
			this.Accept = ["DynamicContainer", "StaticContainer", "EditorLabel", "EditorDiv", "TransferList"];

			/* PRIVATE PROPERTIES */
			var self = this;
			var control = null;
			var h3 = null;
			var featuresAdded = false;
			
			/* PRIVATE METHODS */
			
			function iLog(Place, Message, Type, Silent) {
				self.Log(self.refClassName + "." + Place, Message, Type, Silent);
			}
			// adds features to the control based on the rules specified for this type of control
			function AddFeatures() {
				try {
					if (featuresAdded)
						return;
					iLog("AddFeatures", "Called");
					
					control.droppable({
						accept : Utilities.GetAcceptedComponents(self.Accept),
						greedy : true,
						activeClass : 'droppable-active',
						hoverClass : 'droppable-hover',
						drop : function (ev, ui) {
							var ref = $(ui.draggable).attr("ref");
							Editor.BuildComponent(ref, $(this));
						}
					});
					control.sortable({
						items : '> .component'
					});
					h3.addClass("moving");
					
					featuresAdded = true;
				} catch (err) {
					iLog("AddFeatures", err, Log.Type.Error);
				}
			}
			// removes features from the control that were previously added
			function RemoveFeatures() {
				try {
					if (!featuresAdded)
						return;
					iLog("RemoveFeatures", "Called");
					
					control
						.droppable("destroy")
						.sortable("destroy");
					h3.removeClass("moving");
					
					featuresAdded = false;
				} catch (err) {
					iLog("RemoveFeatures", err, Log.Type.Error);
				}
			}
			
			var sortForms = {
				dateMDY : function ($element) {
					var mdy = /(\d+)\/(\d+)\/(\d+)/.exec($element.text());
					
					if (!mdy) {
						return $element.text();
					}
					
					// Index 0 is the fully matched text; 1, 2, 3 are the captured groups
					var m = mdy[1];
					var d = mdy[2];
					var y = mdy[3];
					
					var date = new Date(y, m, d);
					
					return date.getTime(); // Numbers order properly with TinySort
				}
			};
			
			// As of 10/26/2011 WIP #10840 stapia@maxprocessing.com
			// Due to the high volume of errors and bugs of TableMaster, the following function was completely overhauled to better
			// handle the Editor environment. Unnecessary loops and hacks have been removed in place of dynamic variables and functions.
			function FormatTableMaster() {
				try {					
					var tm = control.find(".TableMaster,.TableMasterSM");
					if (tm.length == 0)
						return;
					
					//Find each valid TableMaster
					tm.each(function (i) {
						var table = $(this);
						
						table.attr('cellspacing', 0);
						
						// colspaned records fix
						var headCount = $(table).find('thead > tr > td').length,
						dataCount = $(table).find('tbody > tr > td').length,
						colSpan;
						
						if (dataCount == 1 || dataCount < headCount) {
							if (!window.IsMSIE()) {
								if ($(table).find('tr > td').attr('colspan')) {
									$(table).find('tr > td').removeAttr('colspan');
								}
							} else {
								if ($(table).find('tr > td[colspan]').length) {
									$(table).find('tr > td[colspan]').each(function () {
										$(this).get(0).removeAttribute('colspan');
									});
								}
							}
							
							for (i = dataCount; i < headCount; i++) {
								$('<td></td>').appendTo($(table).find('tbody > tr'));
							}
							$(tm).find('tbody > tr > td').css({
								'border-right' : 'none'
							});
						}
						
						if (table.attr("wrapped") != "true") {
							table.find("tr:odd").addClass("even");
							table.find("tr").hover(								
								function () {
								$(this).addClass("hover");
							}, function () {
								$(this).removeClass("hover");
							});
							var id = table.attr("id");
							if (id == null || id.length == 0) {
								//FIX for 'no records...' TableMaster with colspans. Alternative to labels. WIP item #7223
								var uID = Utilities.MakeGUID();
								table.attr("id", uID);
								id = uID;
							}
							table.wrap("<div class='TableMasterWrapper'></div>");
							table.attr("wrapped", "true");
							
							superTable(id);
							
							//check for scrollbars. fix for item #9891
							var hBar = false;
							var vBar = false;
							var tbs = control.find(".TableMaster");
							
							//Resizing for horizontal and vertical scrollbars
							var sData = $(this).parent('.sData'),
							sBase = $(this).parent().parent('.sBase'),
							sDataTable = $(this),
							TableMasterWrapper = $(this).parent().parent().parent('.TableMasterWrapper');
							
							//cute lil margins :^)
							TableMasterWrapper.css({
								'margin' : '10px'
							});
							
							sBase.width(TableMasterWrapper.width());
							sData.width(sBase.width());
							sData.height(sDataTable.height());
							TableMasterWrapper.height(sData.height());
							
							if (sData.height() > 190) {
								sData.height(190);
								TableMasterWrapper.height(190 + 20);
							}							
							if (sDataTable.outerWidth(true) > sData.outerWidth(true)) {
								hBar = true;
								TableMasterWrapper.height(TableMasterWrapper.height() + 18);
							}							
							if (sData.height() < sDataTable.height()) {
								vBar = true;
							}							
							if (sDataTable.width() < sData.width() && vBar) {
								sData.width(sDataTable.width() + 18);
							}
						}
					});
					
					//Add the sorting feature for records in TableMaster
					var headerTDs = $('.sHeaderInner').find('table > thead > tr > td');
					// set sort order to ascending by default
					$(headerTDs).attr("sortdir", "asc");
					// call sort when clicked
					if (headerTDs.length) {
						$(headerTDs).each(function () {
							
							var tables = $(this).parent().parent().parent(),
							tdlen = tables.find('thead > tr > td').length;
							$(this).unbind('click');
							$(this).bind('click', function () {
								var so = $(this).attr("sortdir");
								var id = tables.attr("id");
								var attr = $(this).attr("data-sort-attr") || ""; // Sort by data, if given
								
								// data-sort-form identifies a built-in function (e.g. dateMDY) which will
								// transform the data into a more sortable form.
								var sortForm = $(this).attr("data-sort-form");
								
								if (sortForm && Object.prototype.hasOwnProperty.call(sortForms, sortForm)) {
									sortForm = sortForms[sortForm];
									
									attr = attr || "data-sort-form-data";
									
									$(tables).parent().parent().next('.sData').find("tbody > tr > td:nth-child(" + ($(this).index() + 1) + ")").each(function () {
										var $element = $(this);
										
										if (!$element.attr(attr)) {
											$element.attr(attr, sortForm($element));
										}
									});
								}
								
								$(tables).parent().parent().next('.sData').find("tbody>tr").tsort("td:eq(" + $(this).index() + ")", {
									order : so,
									attr : attr
								});
								
								$(tables).parent().parent().next('.sData').find(".even").removeClass("even");
								$(tables).parent().parent().next('.sData').find("tr:odd").addClass("even");
								$(this).attr("sortdir", so == "asc" ? "desc" : "asc");
								$(this).parents("table").find(".asc").removeClass("asc");
								$(this).parents("table").find(".desc").removeClass("desc");
								$(this).addClass(so == "asc" ? "asc" : "desc");
							});
						}); // END TableMaster sorting feature
					}
				} catch (err) {
					iLog("FormatTableMaster", err, Log.Type.Error);
				}
			}

			/* PUBLIC METHODS */
			this.SetFeatures = function (value) {
				featuresAdded = value;
			};
			// Appends the control to a container element
			this.AppendTo = function (ContainerElement) {
				try {
					iLog("AppendTo", "Called");
					
					$(ContainerElement).append(control);
					this.BaseLoad(control);
					if (Editor.Enabled)
						this.EditMode();
				} catch (err) {
					iLog("AppendTo", err, Log.Type.Error);
				}
			};
			this.Create = function () {
				try {
					iLog("Create", "Called");
					
					control = $("<div condition='' class='component DynamicContainer' ref='DynamicContainer'><h3 class='handle'>Dynamic Container</h3></div>");
					h3 = $(control.find(">h3"));
				} catch (err) {
					iLog("Create", err, Log.Type.Error);
				}
			};
			this.DefaultMode = function () {
				try {
					iLog("DefaultMode", "Called");
					
					RemoveFeatures();
					FormatTableMaster();
					PageHelper.RemoveComponentID(control);
				} catch (err) {
					iLog("DefaultMode", err, Log.Type.Error);
				}
			};
			this.EditMode = function () {
				try {
					iLog("EditMode", "Called");
					
					AddFeatures();
				} catch (err) {
					iLog("EditMode", err, Log.Type.Error);
				}
			};
			this.Load = function (ControlElement) {
				try {
					iLog("Load", "Called");
					
					control = $(ControlElement);
					this.BaseLoad(control);
					h3 = $(control.find(">h3"));
				} catch (err) {
					iLog("Load", err, Log.Type.Error);
				}
			};
			this.GetControl = function () {
				try {
					return control;
				} catch (err) {
					iLog("GetControl", err, Log.Type.Error);
				}
			};
			this.Refresh = function () {
				try {
					iLog("Refresh", "Called");
				} catch (err) {
					iLog("Refresh", err, Log.Type.Error);
				}
			};
			this.Search = function (str, caseSensitive) {
				try {
					iLog("Search", "Called", Log.Type.Info);

					var re = this.BaseSearch(str, caseSensitive);
					if (re) {
						//if (this.GetProperty().search(re) > -1)
						//	iLog("Search", this, Log.Type.Search);
					}
				} catch (err) {
					iLog("Search", err, Log.Type.Error);
				}
			};
			this.GetProperties = function () {
				try {
					iLog("GetProperties", "Called");
					
					var properties = this.GetBaseProperties();
					properties[properties.length] = new PropertyEd.Property(PropertyFields["ID"], this.GetID, this.SetID);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Caption"], this.GetCaption, this.SetCaption);
					
					return properties;
				} catch (err) {
					iLog("GetProperties", err, Log.Type.Error);
				}
			};
			this.GetID = function () {
				try {
					return control.attr("id");
				} catch (err) {
					iLog("GetID", err, Log.Type.Error);
				}
			};
			this.SetID = function (newID) {
				try {
					control.attr("id", newID);
				} catch (err) {
					iLog("SetID", err, Log.Type.Error);
				}
			};
			this.GetCaption = function () {
				try {
					return h3.text();
				} catch (err) {
					iLog("GetCaption", err, Log.Type.Error);
				}
			};
			this.SetCaption = function (newCaption) {
				try {
					h3.text(newCaption);
				} catch (err) {
					iLog("SetCaption", err, Log.Type.Error);
				}
			};
			
		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	}
	
	return DynamicContainer;
});

define('StaticContainer', ['TemplateBase', 'PropertyFields', 'PageHelper', 'Editor', 'ContextMenu'], function (TemplateBase, PropertyFields, PageHelper, Editor, ContextMenu) {
	function StaticContainer() {
		try {
			this.inheritFrom = TemplateBase;
			this.inheritFrom();

			/* PUBLIC PROPERTIES */
			this.NameRequired = false;
			this.refClassName = "StaticCont";
			this.Accept = ["StaticContainer", "EditorText", "EditorLabel", "EditorDiv", "EditorDropDown", "EditorMemo", "EditorCheckBox", "EditorSubmitButton", "EditorRadio", "EditorLink", "TransferList"];

			/* PRIVATE PROPERTIES */
			var self = this;
			var control = null;
			var h3 = null;
			var featuresAdded = false;
			
			/* PRIVATE METHODS */
			
			function iLog(Place, Message, Type, Silent) {
				self.Log(self.refClassName + "." + Place, Message, Type, Silent);
			}
			// adds features to the control based on the rules specified for this type of control
			function AddFeatures() {
				try {
					if (featuresAdded)
						return;
					iLog("AddFeatures", "Called");
					
					control.droppable({
						accept : Utilities.GetAcceptedComponents(self.Accept),
						greedy : true,
						activeClass : 'droppable-active',
						hoverClass : 'droppable-hover',
						drop : function (ev, ui) {
							var ref = $(ui.draggable).attr("ref");
							var pos = {
								left: ui.offset.left - $(this).offset().left,
								top : ui.offset.top - $(this).offset().top
							};
							Editor.BuildComponent(ref, $(this), pos);
						}
					});
					
					control.delegate(".moving", "mousedown", function () {
						Editor.DisableSelectibleInIE(control, true);
					});
					control.delegate(".moving", "mouseup", function () {
						Editor.DisableSelectibleInIE(control, false);
					});
					var pref = PageHelper.GetParentRef(control);
					if ($.inArray(pref, ["StaticContainer"]) > -1) {
						control.draggable({
							containment : "parent",
							handle: h3,
							grid  : MP.Tools.Config.Editor.html.snap,
							start : self.onDragStart,
							stop  : self.onDragStop
						});
						control.resizable({
							autoHide : true,
							grid : MP.Tools.Config.Editor.html.snap,
							stop : function () {
								var t = Utilities.ToNumber($(this).css("top"));
								$(this).css("top", t + 1);
								var l = Utilities.ToNumber($(this).css("left"));
								$(this).css("left", l + 1);
							}
						});
					};
					control.selectable({
						filter : ".moving",
						cancel: ".handle",
						selected : function (e, ui) {
							var id = PageHelper.GetParentID($(ui.selected));
							var ref = PageHelper.GetParentRef($(ui.selected));
							if (ref != 'StaticContainer')
								PageHelper.AddSelected(id);
						},
						start : function (e, ui) {
							Global.DisableHighlightingInChrome(true);
							PageHelper.ClearSelected();
							ContextMenu.Hide();
						},
						stop : function (e, ui) {
							Global.DisableHighlightingInChrome(false);
						}
					});
					h3.addClass("moving");
					
					featuresAdded = true;
				} catch (err) {
					iLog("AddFeatures", err, Log.Type.Error);
				}
			}
			// removes features from the control that were previously added			
			function RemoveFeatures() {
				try {
					if (!featuresAdded)
						return;
					iLog("RemoveFeatures", "Called");
					
					control.droppable("destroy")
						.draggable("destroy")
						.resizable("destroy")
						.selectable("destroy");
					h3.removeClass("moving");

					featuresAdded = false;
				} catch (err) {
					iLog("RemoveFeatures", err, Log.Type.Error);
				}
			}
			
			/* PUBLIC METHODS */
			this.SetFeatures = function (value) {
				featuresAdded = value;
			};
			// Appends the control to a container element
			this.AppendTo = function (ContainerElement) {
				try {
					iLog("AppendTo", "Called");
					
					$(ContainerElement).append(control);
					this.BaseLoad(control);
					if (Editor.Enabled)
						this.EditMode();
				} catch (err) {
					iLog("AppendTo", err, Log.Type.Error);
				}
			};
			this.Create = function () {
				try {
					iLog("Create", "Called");
					
					control = $("<div condition='' class='component StaticContainer' ref='StaticContainer'><h3 class='handle'>Static Container</h3></div>");
					h3 = $(control.find("h3"));
				} catch (err) {
					iLog("Create", err, Log.Type.Error);
				}
			};
			this.DefaultMode = function () {
				try {
					iLog("DefaultMode", "Called");
					
					RemoveFeatures();
					PageHelper.RemoveComponentID(control);
				} catch (err) {
					iLog("DefaultMode", err, Log.Type.Error);
				}
			};
			this.EditMode = function () {
				try {
					iLog("EditMode", "Called");
					
					AddFeatures();
				} catch (err) {
					iLog("EditMode", err, Log.Type.Error);
				}
			};
			this.Search = function (str, caseSensitive) {
				try {
					iLog("Search", "Called", Log.Type.Info);

					var re = this.BaseSearch(str, caseSensitive);
					if (re) {
						//if (this.GetID().search(re) > -1)
						//	iLog("Search", this, Log.Type.Search);
					}
				} catch (err) {
					iLog("Search", err, Log.Type.Error);
				}
			};
			this.GetProperties = function () {
				try {
					iLog("GetProperties", "Called");
					
					var properties = this.GetBaseProperties();
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Borderless"], this.GetBorderless, this.SetBorderless);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["ID"], this.GetID, this.SetID);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Caption"], this.GetCaption, this.SetCaption);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Height"], this.GetHeight, this.SetHeight);

					var pref = PageHelper.GetParentRef(control);
					if (pref == "StaticContainer")
						properties[properties.length] = new PropertyEd.Property(PropertyFields["Width"], this.GetWidth, this.SetWidth);

					return properties;
				} catch (err) {
					iLog("GetProperties", err, Log.Type.Error);
				}
			};
			this.Refresh = function () {
				try {
					iLog("Refresh", "Called");
				} catch (err) {
					iLog("Refresh", err, Log.Type.Error);
				}
			};
			this.Load = function (ControlElement) {
				try {
					iLog("Load", "Called");
					
					control = $(ControlElement);
					this.BaseLoad(control);
					h3 = $(control.find(">h3"));
				} catch (err) {
					iLog("Load", err, Log.Type.Error);
				}
			};
			this.GetBorderless = function () {
				try {
					return control.hasClass("borderless");
				} catch (err) {
					iLog("GetBorderless", err, Log.Type.Error);
				}
			};
			this.GetCaption = function () {
				try {
					return h3.text();
				} catch (err) {
					iLog("GetCaption", err, Log.Type.Error);
				}
			};
			this.GetControl = function () {
				try {
					return control;
				} catch (err) {
					iLog("GetControl", err, Log.Type.Error);
				}
			};
			this.SetBorderless = function (boolValue) {
				try {
					if (boolValue)
						control.addClass("borderless");
					else
						control.removeClass("borderless");
				} catch (err) {
					iLog("SetBorderless", err, Log.Type.Error);
				}
			};
			this.SetCaption = function (newCaption) {
				try {
					h3.text(newCaption);
					if (h3.text() == "")
						h3.css("visibility", "hidden");
					else
						h3.css("visibility", "visible");
				} catch (err) {
					iLog("SetCaption", err, Log.Type.Error);
				}
			};
			this.GetHeight = function () {
				try {
					return Utilities.ToNumber(control.height());
				} catch (err) {
					iLog("GetHeight", err, Log.Type.Error);
				}
			};
			this.SetHeight = function (newHeight) {
				try {
					control.height(Utilities.ToNumber(newHeight));
				} catch (err) {
					iLog("SetHeight", err, Log.Type.Error);
				}
			};
			this.GetID = function () {
				try {
					return control.attr("id");
				} catch (err) {
					iLog("GetID", err, Log.Type.Error);
				}
			};
			this.SetID = function (newID) {
				try {
					control.attr("id", newID);
				} catch (err) {
					iLog("SetID", err, Log.Type.Error);
				}
			};
			this.GetWidth = function () {
				try {
					return Utilities.ToNumber(control.width());
				} catch (err) {
					iLog("GetWidth", err, Log.Type.Error);
				}
			};
			this.SetWidth = function (newWidth) {
				try {
					control.width(Utilities.ToNumber(newWidth));
				} catch (err) {
					iLog("SetWidth", err, Log.Type.Error);
				}
			};

		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	}
	
	return StaticContainer;
});

define('ScriptingContainer', ['TemplateBase', 'PropertyFields', 'Utilities', 'PageHelper', 'Editor'], function (TemplateBase, PropertyFields, Utilities, PageHelper, Editor) {
	function ScriptingContainer() {
		try {
			this.inheritFrom = TemplateBase;
			this.inheritFrom();
			
			/* PUBLIC PROPERTIES */
			this.NameRequired = false;
			this.refClassName = "ScriptCont";

			/* PRIVATE PROPERTIES */
			var self = this;
			var control = null;
			var h3 = null;
			var script = null;
			var featuresAdded = false;

			/* PRIVATE METHODS */
			
			function iLog(Place, Message, Type, Silent) {
				self.Log(self.refClassName + "." + Place, Message, Type, Silent);
			}
			function GetFunctions(str) {
				try {
					iLog("GetFunctions", "Called");
					
					str = "\n" + str.substring(str.indexOf("function "), str.length);
					var arr = new Array();
					
					var fns = str.split(/[\n\r]function /);
					if (!fns)
						return arr;
					
					for (var i = 0; i < fns.length; i++) {
						var fn = fns[i];
							
						var _name = fn.substring(0, fn.indexOf("{"));
						var params = _name.match(/\([^\)]+\)/g);
						if (params == null || params.length == 0)
							params = "";
						else
							params = params[0];
						params = params.replace("(", "").replace(")", "");
						if (_name.indexOf("(") > -1)
							_name = _name.substring(0, _name.indexOf("("));
						if (!_name)
							continue;
						var body = fn.substring(fn.indexOf("{") + 1);
						body = body.substring(0, body.lastIndexOf("}"));
						var funct = new Script(_name, params, body);
						arr.push(funct);
					}
					return arr;
				} catch (err) {
					iLog("GetFunctions", err, Log.Type.Error);
				}
			}
			function AttachScript(strScript) {
				try {
					iLog("AttachScript", "Called");
					
					var fns = GetFunctions(strScript);
					if (!fns.length)
						return;
						
					CustomScript.Reset();
					var e = '';
					var fn = null;
					for (var i = 0; i < fns.length; i++) {
						try {
							fn = fns[i];
							CustomScript[fn.Name] = new Function(fn.Params, fn.Body);
						} catch (err) {
							var s = fn.Name + " : " + err.message;
							e = e + s + "\n";
							iLog("AttachScript", s, Log.Type.Error, true);
						}
					}
					return e;
				} catch (err) {
					iLog("AttachScript", err, Log.Type.Error, true);
					return err.message;
				}
			}
			// adds features to the control based on the rules specified for this type of control
			function AddFeatures() {
				try {
					if (featuresAdded)
						return;
					iLog("AddFeatures", "Called");
					
					control.css("display", "block");
					h3.addClass("moving");
					h3.toggle(function () {
						script.css("display", "block");
					}, function () {
						script.css("display", "none");
					});
					
					featuresAdded = true;
				} catch (err) {
					iLog("AddFeatures", err, Log.Type.Error);
				}
			}
			// removes features from the control that were previously added
			function RemoveFeatures() {
				try {
					if (!featuresAdded)
						return;
					iLog("RemoveFeatures", "Called");
					
					h3.removeClass("moving");
					
					featuresAdded = false;
				} catch (err) {
					iLog("RemoveFeatures", err, Log.Type.Error);
				}
			}

			/* PUBLIC METHODS */
			this.SetFeatures = function (value) {
				featuresAdded = value;
			};
			// Appends the control to a container element
			this.AppendTo = function (ContainerElement) {
				try {
					iLog("AppendTo", "Called");
					
					$(ContainerElement).append(control);
					this.BaseLoad(control);
					if (Editor.Enabled)
						this.EditMode();
				} catch (err) {
					iLog("AppendTo", err, Log.Type.Error);
				}
			};
			this.Create = function () {
				try {
					iLog("Create", "Called");
					
					control = $("<div condition='' class='component ScriptingContainer' ref='ScriptingContainer'><h3 class='handle'>Custom Scripts/JS Container</h3><pre>function OnLoad(){scroll(0,0);}</pre></div>");
					h3 = $(control.find(">h3"));
					script = $(control.find(">pre"));
				} catch (err) {
					iLog("Create", err, Log.Type.Error);
				}
			};
			this.DefaultMode = function (clearScripts) {
				try {
					iLog("DefaultMode", "Called");
					
					$(control).css("display", "none");
					RemoveFeatures();
					
					//LK: bug when all HTML tags are stripped can't be resolved reading .html()
					var s = control.text();
					var fns = GetFunctions(s);
					if (!fns.length)
						return false;

					if (clearScripts)
						CustomScript.Reset();
					
					var e = '';
					var fn = null;
					for (var i = 0; i < fns.length; i++) {
						try {
							fn = fns[i];
							CustomScript[fn.Name] = new Function(fn.Params, fn.Body);
						} catch (err) {
							if (fn)
								e = e + fn.Name + " : " + err.message + ", ";
							else
								e = e + err.message + ", ";
						}
					};
					if (e != "")
						iLog("DefaultMode", e, Log.Type.Error, true);

					PageHelper.RemoveComponentID(control);
					
					return true;
				} catch (err) {
					iLog("DefaultMode", err, Log.Type.Error);
				}
			};
			this.EditMode = function () {
				try {
					iLog("EditMode", "Called");
					
					AddFeatures();
				} catch (err) {
					iLog("EditMode", err, Log.Type.Error);
				}
			};
			this.Search = function (str, caseSensitive) {
				try {
					iLog("Search", "Called", Log.Type.Info);

					var re = this.BaseSearch(str, caseSensitive);
					if (re) {
						if (this.GetScripts().search(re) > -1)
							iLog("Search", this, Log.Type.Search);
					}
				} catch (err) {
					iLog("Search", err, Log.Type.Error);
				}
			};
			this.GetProperties = function () {
				try {
					iLog("GetProperties", "Called");
					
					var properties = this.GetBaseProperties();
					properties[properties.length] = new PropertyEd.Property(PropertyFields["ID"], this.GetID, this.SetID);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Scripts"], this.GetScripts, this.SetScripts);
					
					return properties;
				} catch (err) {
					iLog("GetProperties", err, Log.Type.Error);
				}
			};
			this.Refresh = function () {
				try {
					iLog("Refresh", "Called");
				} catch (err) {
					iLog("Refresh", err, Log.Type.Error);
				}
			};
			this.Load = function (ControlElement) {
				try {
					iLog("Load", "Called");
					
					control = $(ControlElement);
					this.BaseLoad(control);
					h3 = $(control.find(">h3"));
					script = $(control.find(">div"));
					// TODO: remove when finished converting to pre tags
					if (!script.length)
						script = $(control.find(">pre"));
					// end remove
					script.css("display", "none");
					
					//LK: not sure this is needed but am afraid to remove it :)
					var s = script.text();
					script.text(s);
				} catch (err) {
					iLog("Load", err, Log.Type.Error);
				}
			};
			this.Show = function (table) {
				iLog("Show", "Called");
				
				control.css("display", "block");
				control.html(table);
			};
			this.Hide = function () {
				iLog("Hide", "Called");
				
				control.html("");
				control.css("display", "none");
			};
			this.GetControl = function () {
				try {
					return control;
				} catch (err) {
					iLog("GetControl", err, Log.Type.Error);
				}
			};
			this.GetID = function () {
				try {
					return control.attr("id");
				} catch (err) {
					iLog("GetID", err, Log.Type.Error);
				}
			};
			this.SetID = function (newID) {
				try {
					control.attr("id", newID);
				} catch (err) {
					iLog("SetID", err, Log.Type.Error);
				}
			};
			this.GetScripts = function () {
				try {
					//LK: bug when all HTML tags are stripped can't be resolved reading .html()
					return script.text();
				} catch (err) {
					iLog("GetScripts", err, Log.Type.Error);
				}
			};
			this.SetScripts = function (newScripts) {
				try {
					iLog("SetScripts", "Called");
					
					//LK: bug when all HTML tags are stripped can't be resolved reading .html()
					script.text(newScripts);
					
					// Validate the new code
					var er = AttachScript(newScripts);
					if (er != '')
						jAlert("The following functions may have errors:\n" + er + "Errors due to #S variables may be OK within the editor.");
					CustomScript.Reset();
				} catch (err) {
					iLog("SetScripts", err, Log.Type.Error);
				}
			};

		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	}
	CustomScript = new function () {
		try {
			// clear the previously added functions
			this.Reset = function () {
				jQuery.each(
					CustomScript, function (field, value) {
					if (field != "Reset") {
						CustomScript[field] = null;
					}
				});
			};
		} catch (err) {
			iLog(".CustomScript", err, Log.Type.Error);
		}
	};
	function Script(name, params, body) {
		this.Name = name;
		this.Params = params;
		this.Body = body;
	}
	
	return ScriptingContainer;
});

define('ValidationContainer', ['TemplateBase', 'PropertyFields', 'PageHelper', 'Editor'], function (TemplateBase, PropertyFields, PageHelper, Editor) {
	function ValidationContainer() {
		try {
			this.inheritFrom = TemplateBase;
			this.inheritFrom();
			
			/* PUBLIC PROPERTIES */
			this.NameRequired = false;
			this.refClassName = "ValidCont";

			/* PRIVATE PROPERTIES */
			var self = this;
			var control = null;
			var featuresAdded = false;
			var h3 = null;
			var body = null;
			var defaultCaption = 'Errors were found, please resolve the following before re-submitting';
			
			/* PRIVATE METHODS */
			
			function iLog(Place, Message, Type, Silent) {
				self.Log(self.refClassName + "." + Place, Message, Type, Silent);
			}
			// adds features to the control based on the rules specified for this type of control
			function AddFeatures() {
				try {
					if (featuresAdded)
						return;
					iLog("AddFeatures", "Called");
					
					control.css("display", "block");
					h3.addClass("moving");
					
					featuresAdded = true;
				} catch (err) {
					iLog("AddFeatures", err, Log.Type.Error);
				}
			}
			// removes features from the control that were previously added
			function RemoveFeatures() {
				try {
					if (!featuresAdded)
						return;
					iLog("RemoveFeatures", "Called");
					
					control.css("display", "none");
					h3.removeClass("moving");
					
					featuresAdded = false;
				} catch (err) {
					iLog("RemoveFeatures", err, Log.Type.Error);
				}
			}
			
			/* PUBLIC METHODS */
			this.SetFeatures = function (value) {
				featuresAdded = value;
			};
			this.Refresh = function () {
				try {
					iLog("Refresh", "Called");
				} catch (err) {
					iLog("Refresh", err, Log.Type.Error);
				}
			};
			// Appends the control to a container element
			this.AppendTo = function (ContainerElement) {
				try {
					iLog("AppendTo", "Called");
					
					$(ContainerElement).append(control);
					this.BaseLoad(control);
					if (Editor.Enabled)
						this.EditMode();
				} catch (err) {
					iLog("AppendTo", err, Log.Type.Error);
				}
			};
			this.Create = function () {
				try {
					iLog("Create", "Called");
					
					control = $("<div condition='' class='component ValidationContainer' ref='ValidationContainer'><h3 class='handle'>" + defaultCaption + "</h3><div/></div>");
					h3 = control.find(">h3");
					body = control.find(">div");
				} catch (err) {
					iLog("Create", err, Log.Type.Error);
				}
			};
			this.DefaultMode = function () {
				try {
					iLog("DefaultMode", "Called");
					
					RemoveFeatures();
					PageHelper.RemoveComponentID(control);
				} catch (err) {
					iLog("DefaultMode", err, Log.Type.Error);
				}
			};
			this.EditMode = function () {
				try {
					iLog("EditMode", "Called");
					
					AddFeatures();
				} catch (err) {
					iLog("EditMode", err, Log.Type.Error);
				}
			};
			this.Search = function (str, caseSensitive) {
				try {
					iLog("Search", "Called", Log.Type.Info);

					var re = this.BaseSearch(str, caseSensitive);
					if (re) {
						//if (this.GetProperty().search(re) > -1)
						//	iLog("Search", this, Log.Type.Search);
					}
				} catch (err) {
					iLog("Search", err, Log.Type.Error);
				}
			};
			this.GetProperties = function () {
				try {
					iLog("GetProperties", "Called");
					
					var properties = this.GetBaseProperties();
					properties[properties.length] = new PropertyEd.Property(PropertyFields["ID"], this.GetID, this.SetID);
					properties[properties.length] = new PropertyEd.Property(PropertyFields["Caption"], this.GetCaption, this.SetCaption);
					
					return properties;
				} catch (err) {
					iLog("GetProperties", err, Log.Type.Error);
				}
			};
			this.Load = function (ControlElement) {
				try {
					iLog("Load", "Called");
					
					control = $(ControlElement);
					this.BaseLoad(control);
					h3 = control.find(">h3");
					body = control.find(">div");
					if (!body.length) {
						body = $("<div/>");
						control.append(body);
					}
				} catch (err) {
					iLog("Load", err, Log.Type.Error);
				}
			};
			this.Show = function (table) {
				iLog("Show", "Called");
				
				control.css("display", "block");
				body.html(table);

				// Replace the default caption 
				var s = h3.html();
				if (s == '')
					h3.remove();
				
				if (s.match(/Validation Errors/))
					h3.html(defaultCaption);
			};
			this.Hide = function () {
				iLog("Hide", "Called");
				
				body.html("");
				control.css("display", "none");
			};
			this.GetCaption = function () {
				try {
					return h3.text();
				} catch (err) {
					iLog("GetCaption", err, Log.Type.Error);
				}
			};
			this.GetControl = function () {
				try {
					return control;
				} catch (err) {
					iLog("GetControl", err, Log.Type.Error);
				}
			};
			this.GetID = function () {
				try {
					return control.attr("id");
				} catch (err) {
					iLog("GetID", err, Log.Type.Error);
				}
			};
			this.SetCaption = function (newCaption) {
				try {
					h3.text(newCaption);
				} catch (err) {
					iLog("SetCaption", err, Log.Type.Error);
				}
			};
			this.SetID = function (newID) {
				try {
					control.attr("id", newID);
				} catch (err) {
					iLog("SetID", err, Log.Type.Error);
				}
			};

		} catch (err) {
			iLog("Main", err, Log.Type.Error);
		}
	}
	
	return ValidationContainer;
});
/*
 END of Container Objects
*/

/*
 BEGIN of Pre/Post Process Rule Objects
*/
define('rules/BaseComponent', ['PropertyFields', 'RuleXML'], function (PropertyFields, RuleXML) {
	function BaseComponent() {
		/* PUBLIC PROPERTIES */
		this.Type = null;
		this.Icon = null;
		this.OldEntry = null;
		this.OldExit = null;
		
		/* PRIVATE PROPERTIES */
		var logClassName = "BaseComp.";
		var self = this;
		var _node = null;
		var _icon = null;
		
		/* PRIVATE METHODS */

		function iLog(Place, Message, Type, Silent) {
			Log.Add(self.GetID() + "." + logClassName + Place, Message, Type, Silent);
		}

		/* PUBLIC METHODS */

		this.BaseCreate = function () {
			try {
				_node = $(RuleXML.GetNewElement('c'));
				_node.append(RuleXML.GetNewElement('n'));
				_node.append(RuleXML.GetNewElement('t'));
				_node.append(RuleXML.GetNewElement('values'));
				_node.append(RuleXML.GetNewElement('j'));
				_node.append(RuleXML.GetNewElement('j'));
				var el;
				el = $(RuleXML.GetNewElement('x'));
				el.text("0");
				_node.append(el);
				el = $(RuleXML.GetNewElement('y'));
				el.text("0");
				_node.append(el);
				_node.append(RuleXML.GetNewElement('c'));
				_node.append(RuleXML.GetNewElement('wp'));
				var s = RuleXML.GetNextComponentNumber();
				_node.find(">n").text(s);
			} catch (err) {
				iLog("BaseCreate", err, Log.Type.Error);
			}
		};
		this.BaseLoad = function (xmlNode) {
			try {
				_node = $(xmlNode);
				this.Type = _node.find(">t").text();
				
				// check for non-existing nodes
				if (_node.find(">c").length == 0)
					_node.append(RuleXML.GetNewElement("c"));
				if (_node.find(">wp").length == 0)
					_node.append(RuleXML.GetNewElement("wp"));
			} catch (err) {
				iLog("BaseLoad", err, Log.Type.Error);
			}
		};
		// performs cleanup for when the component is deleted
		this.Delete = function () {
			var icn = this.GetIcon();
			icn.Delete();
			icn = null;
		};
		this.GetIcon = function () {
			return this.Icon;
		};
		this.GetNode = function () {
			try {
				return _node;
			} catch (err) {
				iLog("GetNode", err, Log.Type.Error);
			}
		};
		this.GetFormatedData = function () {
			try {
				var s;
				s = Utilities.GetXmlString(_node[0]);
				s = Utilities.RemoveWhiteSpaces(s);
				return s;
			} catch (err) {
				iLog("GetFormatedData", err, Log.Type.Error);
			}
		};
		this.UpdateWatchpoint = function () {
			try {
				var b = this.GetWatchpoint();
				this.HighlightAsWatchpoint(b);
			} catch (err) {
				iLog("UpdateWatchpoint", err, Log.Type.Error);
			}
		};
		this.ToggleWatchpoint = function () {
			try {
				var b = !this.GetWatchpoint();
				this.SetWatchpoint(b);
				this.HighlightAsWatchpoint(b);
			} catch (err) {
				iLog("ToggleWatchpoint", err, Log.Type.Error);
			}
		};
		this.GetBaseProperties = function () {
			var properties = new Array();
			properties[properties.length] = new PropertyEd.Property(PropertyFields["ID"], this.GetID, null);
			properties[properties.length] = new PropertyEd.Property(PropertyFields["Comment"], this.GetComment, this.SetComment);
			properties[properties.length] = new PropertyEd.Property(PropertyFields["Watchpoint"], this.GetWatchpoint, this.SetWatchpoint);
			
			return properties;
		};
		this.GetID = function () {
			try {
				return _node.find(">n").text();
			} catch (err) {
				iLog("GetID", err, Log.Type.Error);
			}
		};
		this.GetComment = function () {
			try {
				return _node.find(">c").text();
			} catch (err) {
				iLog("GetComment", err, Log.Type.Error);
			}
		};
		this.SetComment = function (newValue) {
			try {
				$(_node.find(">c")[0]).text(newValue);
				_icon.UpdateComment();
			} catch (err) {
				iLog("SetComment", err, Log.Type.Error);
			}
		};
		this.GetWatchpoint = function () {
			try {
				return _node.find(">wp").text() == "1";
			} catch (err) {
				iLog("GetWatchpoint", err, Log.Type.Error);
			}
		};
		this.SetWatchpoint = function (newValue) {
			try {
				$(_node.find(">wp")[0]).text(newValue ? "1" : "0");
			} catch (err) {
				iLog("SetWatchpoint", err, Log.Type.Error);
			}
		};
		this.GetJ1 = function () {
			try {
				return $(_node.find(">j")[0]).text();
			} catch (err) {
				iLog("GetJ1", err, Log.Type.Error);
			}
		};
		this.GetX = function () {
			try {
				return parseInt(_node.find(">x").text(), 10);
			} catch (err) {
				iLog("GetX", err, Log.Type.Error);
			}
		};
		this.GetY = function () {
			try {
				return parseInt(_node.find(">y").text(), 10);
			} catch (err) {
				iLog("GetY", err, Log.Type.Error);
			}
		};
		this.SetIcon = function (newIcon) {
			this.Icon = newIcon;
			_icon = newIcon;
		};
		this.SetJ1 = function (newValue) {
			try {
				$(_node.find(">j")[0]).text(newValue);
			} catch (err) {
				iLog("SetJ1", err, Log.Type.Error);
			}
		};
		this.SetType = function (newValue) {
			try {
				$(_node.find(">t")[0]).text(newValue);
			} catch (err) {
				iLog("SetType", err, Log.Type.Error);
			}
		};
		this.SetX = function (newValue) {
			try {
				$(_node.find(">x")[0]).text(Utilities.ToNumber(newValue));
			} catch (err) {
				iLog("SetX", err, Log.Type.Error);
			}
		};
		this.SetY = function (newValue) {
			try {
				$(_node.find(">y")[0]).text(Utilities.ToNumber(newValue));
			} catch (err) {
				iLog("SetY", err, Log.Type.Error);
			}
		};
		this.HighlightAsSelected = function (value) {
			var img = this.Icon.GetImage();
			var cls = "ui-selected";
			img.toggleClass(cls, value);
			if (value)
				this.HighlightAsWatchpoint(false)
			else
				this.UpdateWatchpoint();
		};
		this.HighlightAsFound = function (value) {
			var img = this.Icon.GetImage();
			var cls = Browser.IsMSIE() ? "ui-searchIE" : "ui-search";
			img.toggleClass(cls, value);
			if (value)
				this.HighlightAsWatchpoint(false)
			else
				this.UpdateWatchpoint();
		};
		this.HighlightAsError = function (value) {
			var img = this.Icon.GetImage();
			var cls = Browser.IsMSIE() ? "ui-errorIE" : "ui-error";
			img.toggleClass(cls, value);
			if (value)
				this.HighlightAsWatchpoint(false)
			else
				this.UpdateWatchpoint();
		};
		this.HighlightAsWatchpoint = function (value) {
			var img = this.Icon.GetImage();
			var cls = Browser.IsMSIE() ? "ui-watchpointIE" : "ui-watchpoint";
			img.toggleClass(cls, value);
		};
		this.HighlightAsConnecting = function (value) {
			var img = this.Icon.GetImage();
			var cls = Browser.IsMSIE() ? "ui-connectingIE" : "ui-connecting";
			img.toggleClass(cls, value);
			if (value)
				this.HighlightAsWatchpoint(false)
			else
				this.UpdateWatchpoint();
		};
	}
	
	return BaseComponent;
});

/*    Copyright 2008-2010 Maximum Processing Inc
 */
define('rules/component/CompiledScriptFunction', ['rules/BaseComponent', 'PropertyFields', 'Utilities', 'RuleXML', 'rules/CDATABatch', 'Undo', 'UndoObject'], function (BaseComponent, PropertyFields, Utilities, RuleXML, CDATABatch, Undo, UndoObject) {
	function CSF() {
		this.inheritFrom = BaseComponent;
		this.inheritFrom();

		this.Src = "../../images/ruleCOMPILEDSCRIPT.png";
		this.Title = "Script Function Component";
		this.ToolTip = "Executes stingray functions";

		var logClassName = "CSF.";
		var self = this;
		var _xmlNode = null;

		/* PRIVATE METHODS */

		function iLog(Place, Message, Type, Silent) {
			Log.Add(self.GetID() + "." + logClassName + Place, Message, Type, Silent);
		}
		function Param(Name, Value) {
			this.Name = Name;
			this.Value = Value;
		}

		/* PUBLIC METHODS */

		this.Create = function () {
			try {
				//var uo = new UndoObject();
				//uo.AddUndo(RulesMaker.Load, RuleXML.GetVRM().xml);
				this.BaseCreate();
				this.SetType("CSF");
				_xmlNode = this.GetNode();
				var val = $(_xmlNode.find('>values')[0]);
				val.append(RuleXML.GetNewElement('n'));
				val.append(RuleXML.GetNewElement('v'));
				val.find(">n").text('GetConstant');
				//uo.AddRedo(RulesMaker.Load, RuleXML.GetVRM().xml);
				//Undo.Add(uo);
			} catch (err) {
				iLog("Create", err, Log.Type.Error);
			}
		};
		this.Load = function (xmlNode) {
			try {
				_xmlNode = $(xmlNode);
				this.BaseLoad(_xmlNode);
			} catch (err) {
				iLog("Load", err, Log.Type.Error);
			}
		};
		this.Search = function (str, caseSensitive) {
			try {
				iLog("Search", "Called", Log.Type.Info);
				this.HighlightAsFound(false);
				if (str == "")
					return;

				var re = (caseSensitive) ? new RegExp(str, "") : new RegExp(str, "i");
				var found = $.grep(this.GetFunction(), function(e){ return e.Value.search(re) > -1; });
				
				if (this.GetID().search(re) > -1 || this.GetComment().search(re) > -1 || found.length > 0) {
					iLog("Search", this, Log.Type.Search);
				}
			} catch (err) {
				iLog("Search", err, Log.Type.Error);
			}
		};
		this.AddParam = function () {
			try {
				// Not used
			} catch (err) {
				iLog("AddParam", err, Log.Type.Error);
			}
		};
		this.DeleteFunction = function () {
			try {
				// Not used
			} catch (err) {
				iLog("DeleteFunction", err, Log.Type.Error);
			}
		};
		this.GetProperties = function () {
			try {
				var properties = this.GetBaseProperties();
				var args = new RulesMaker.ComplexArgs(this.GetProperties, null, null);
				
				properties[properties.length] = new PropertyEd.Property(PropertyFields["CompiledScriptFunction"], this.GetFunction, this.SetFunction, args);
				
				return properties;
			} catch (err) {
				iLog("GetProperties", err, Log.Type.Error);
			}
		};
		this.GetFunction = function () {
			try {
				var params = new Array();
				$(_xmlNode.find(">values")[0]).find(">n").each(function () {
					var n = $(this).text();
					var v = $(this).next().text();
					v = v.replace(/''/g, "'");
					params[params.length] = new Param(n, v);
				});
				return params;
			} catch (err) {
				iLog("GetFunction", err, Log.Type.Error);
			}
		};
		this.SetFunction = function (params) {
			try {
				var values = $(_xmlNode.find(">values")[0]);
				values.empty();
				
				$.each(params, function (i, itm) {
					var el, s;
					s = itm.Name;
					el = $(RuleXML.GetNewElement('n'));
					values.append(el);
					el.text(s);

					s = itm.Value || '',
					el = $(RuleXML.GetNewElement('v'));
					values.append(el);
					s = s.replace(/'/g, "''");
					RuleXML.ReplaceCDATA(el, s);
				});
			} catch (err) {
				iLog("SetFunction", err, Log.Type.Error);
			}
		};
	}
	
	return CSF;
});

define('rules/component/Script', ['rules/BaseComponent', 'PropertyFields', 'RuleXML', 'Undo', 'UndoObject'], function (BaseComponent, PropertyFields, RuleXML, Undo, UndoObject) {
	function SCRIPT() {
		this.inheritFrom = BaseComponent;
		this.inheritFrom();

		this.Src = "../../images/RulePascal.png";
		this.Title = "Scripting Component";
		this.ToolTip = "Add scripting code";

		var logClassName = "Script.";
		var self = this;
		var _xmlNode = null;

		/* PRIVATE METHODS */

		function iLog(Place, Message, Type, Silent) {
			Log.Add(logClassName + Place + "." + self.GetID(), Message, Type, Silent);
		}

		/* PUBLIC METHODS */

		this.Create = function () {
			try {
				//var uo = new UndoObject();
				//uo.AddUndo(RulesMaker.Load, RuleXML.GetVRM().xml);
				this.BaseCreate();
				this.SetType("SCRIPT");
				_xmlNode = this.GetNode();
				var values = $(_xmlNode.find('>values')[0]);
				values.append(RuleXML.GetNewElement('v'));
				values.append(RuleXML.GetNewElement('lng'));
				//uo.AddRedo(RulesMaker.Load, RuleXML.GetVRM().xml);
				//Undo.Add(uo);
			} catch (err) {
				iLog("Create", err, Log.Type.Error);
			}
		};
		this.Load = function (xmlNode) {
			try {
				_xmlNode = $(xmlNode);
				this.BaseLoad(_xmlNode);

				// check for non-existing Language node
				if (_xmlNode.find(">values>lng").length == 0) {
					var v = _xmlNode.find('>values');
					v.append(RuleXML.GetNewElement('lng'));
				}
			} catch (err) {
				iLog("Load", err, Log.Type.Error);
			}
		};
		this.Search = function (str, caseSensitive) {
			try {
				iLog("Search", "Called", Log.Type.Info);
				this.HighlightAsFound(false);
				if (str == "")
					return;

				var re = (caseSensitive) ? new RegExp(str, "") : new RegExp(str, "i");
				if (this.GetID().search(re) > -1 || this.GetComment().search(re) > -1 || this.GetScript().search(re) > -1) {
					iLog("Search", this, Log.Type.Search);
				}
			} catch (err) {
				iLog("Search", err, Log.Type.Error);
			}
		};
		this.GetProperties = function () {
			try {
				var properties = this.GetBaseProperties();
				properties[properties.length] = new PropertyEd.Property(PropertyFields["Language"], this.GetLanguage, this.SetLanguage);
				properties[properties.length] = new PropertyEd.Property(PropertyFields["SCRIPT"], this.GetScript, this.SetScript);
				
				return properties;
			} catch (err) {
				iLog("GetProperties", err, Log.Type.Error);
			}
		};
		this.GetScript = function () {
			try {
				return $(_xmlNode.find(">values>v")[0]).text();
			} catch (err) {
				iLog("GetScript", err, Log.Type.Error);
			}
		};
		this.SetScript = function (value) {
			try {
				RuleXML.ReplaceCDATA(_xmlNode.find(">values>v")[0], value);
			} catch (err) {
				iLog("SetScript", err, Log.Type.Error);
			}
		};
		this.GetLanguage = function () {
			try {
				return $(_xmlNode.find(">values>lng")[0]).text();
			} catch (err) {
				iLog("GetLanguage", err, Log.Type.Error);
			}
		};
		this.SetLanguage = function (value) {
			try {
				$(_xmlNode.find(">values>lng")[0]).text(value);
			} catch (err) {
				iLog("SetLanguage", err, Log.Type.Error);
			}
		};
	}
	
	return SCRIPT;
});

define('rules/component/SqlTrn', ['rules/BaseComponent', 'PropertyFields', 'RuleXML', 'Undo', 'UndoObject'], function (BaseComponent, PropertyFields, RuleXML, Undo, UndoObject) {
	function SQLTRN() {
		this.inheritFrom = BaseComponent;
		this.inheritFrom();

		this.Src = "../../images/RuleSqlTrn.png";
		this.Title = "SQL Transaction Component";
		this.ToolTip = "Add SQL Transaction";

		var logClassName = "SqlTrn.";
		var self = this;
		var _xmlNode = null;

		/* PRIVATE METHODS */

		function iLog(Place, Message, Type, Silent) {
			Log.Add(logClassName + Place + "." + self.GetID(), Message, Type, Silent);
		}

		/* PUBLIC METHODS */

		this.Create = function () {
			try {
				//var uo = new UndoObject();
				//uo.AddUndo(RulesMaker.Load, RuleXML.GetVRM().xml);
				this.BaseCreate();
				this.SetType("SQLTRN");
				_xmlNode = this.GetNode();
				var values = $(_xmlNode.find('>values')[0]);
				values.append(RuleXML.GetNewElement('n'));
				values.append(RuleXML.GetNewElement('t'));
				//uo.AddRedo(RulesMaker.Load, RuleXML.GetVRM().xml);
				//Undo.Add(uo);
			} catch (err) {
				iLog("Create", err, Log.Type.Error);
			}
		};
		this.Load = function (xmlNode) {
			try {
				_xmlNode = $(xmlNode);
				this.BaseLoad(_xmlNode);
			} catch (err) {
				iLog("Load", err, Log.Type.Error);
			}
		};
		this.Search = function (str, caseSensitive) {
			try {
				iLog("Search", "Called", Log.Type.Info);
				this.HighlightAsFound(false);
				if (str == "")
					return;

				var re = (caseSensitive) ? new RegExp(str, "") : new RegExp(str, "i");
				if (this.GetID().search(re) > -1 || this.GetComment().search(re) > -1 || this.GetSqlTrnName().search(re) > -1 || this.GetSqlTrnType().search(re) > -1) {
					iLog("Search", this, Log.Type.Search);
				}
			} catch (err) {
				iLog("Search", err, Log.Type.Error);
			}
		};
		this.GetProperties = function () {
			try {
				var properties = this.GetBaseProperties();
				properties[properties.length] = new PropertyEd.Property(PropertyFields["SqlTrnName"], this.GetSqlTrnName, this.SetSqlTrnName);
				properties[properties.length] = new PropertyEd.Property(PropertyFields["SqlTrnType"], this.GetSqlTrnType, this.SetSqlTrnType);
				
				return properties;
			} catch (err) {
				iLog("GetProperties", err, Log.Type.Error);
			}
		};
		this.GetSqlTrnName = function () {
			try {
				return $(_xmlNode.find(">values>n")[0]).text();
			} catch (err) {
				iLog("GetSqlTrnName", err, Log.Type.Error);
			}
		};
		this.SetSqlTrnName = function (value) {
			try {
				$(_xmlNode.find(">values>n")[0]).text(value);
			} catch (err) {
				iLog("SetSqlTrnName", err, Log.Type.Error);
			}
		};
		this.GetSqlTrnType = function () {
			try {
				return $(_xmlNode.find(">values>t")[0]).text();
			} catch (err) {
				iLog("GetSqlTrnType", err, Log.Type.Error);
			}
		};
		this.SetSqlTrnType = function (value) {
			try {
				$(_xmlNode.find(">values>t")[0]).text(value);
			} catch (err) {
				iLog("SetSqlTrnType", err, Log.Type.Error);
			}
		};
	}
	
	return SQLTRN;
});

define('rules/component/Error', ['rules/BaseComponent', 'PropertyFields', 'RuleXML', 'Undo', 'UndoObject'], function (BaseComponent, PropertyFields, RuleXML, Undo, UndoObject) {
	function ERROR() {
		this.inheritFrom = BaseComponent;
		this.inheritFrom();

		this.Src = "../../images/RuleERROR.png";
		this.Title = "ERROR Component";
		this.ToolTip = "Displays an html message to the user when an error occurs";

		var logClassName = "Error.";
		var self = this;
		var _xmlNode = null;

		/* PRIVATE METHODS */

		function iLog(Place, Message, Type, Silent) {
			Log.Add(logClassName + Place + "." + self.GetID(), Message, Type, Silent);
		}

		/* PUBLIC METHODS */

		this.Create = function () {
			try {
				//var uo = new UndoObject();
				//uo.AddUndo(RulesMaker.Load, RuleXML.GetVRM().xml);
				this.BaseCreate();
				this.SetType("ERROR");
				_xmlNode = this.GetNode();
				var values = $(_xmlNode.find('>values')[0]);
				values.append(RuleXML.GetNewElement('v'));
				//uo.AddRedo(RulesMaker.Load, RuleXML.GetVRM().xml);
				//Undo.Add(uo);
			} catch (err) {
				iLog("Create", err, Log.Type.Error);
			}
		};
		this.Load = function (xmlNode) {
			try {
				_xmlNode = $(xmlNode);
				this.BaseLoad(_xmlNode);
			} catch (err) {
				iLog("Load", err, Log.Type.Error);
			}
		};
		this.Search = function (str, caseSensitive) {
			try {
				iLog("Search", "Called", Log.Type.Info);
				this.HighlightAsFound(false);
				if (str == "")
					return;

				var re = (caseSensitive) ? new RegExp(str, "") : new RegExp(str, "i");
				if (this.GetID().search(re) > -1 || this.GetComment().search(re) > -1 || this.GetErrorMessage().search(re) > -1) {
					iLog("Search", this, Log.Type.Search);
				}
			} catch (err) {
				iLog("Search", err, Log.Type.Error);
			}
		};
		this.GetProperties = function () {
			try {
				var properties = this.GetBaseProperties();
				properties[properties.length] = new PropertyEd.Property(PropertyFields["ErrorMessage"], this.GetErrorMessage, this.SetErrorMessage);
				return properties;
			} catch (err) {
				iLog("GetProperties", err, Log.Type.Error);
			}
		};
		this.GetErrorMessage = function () {
			try {
				return $(_xmlNode.find(">values>v")[0]).text();
			} catch (err) {
				iLog("GetErrorMessage", err, Log.Type.Error);
			}
		};
		this.SetErrorMessage = function (newErrorMessage) {
			try {
				RuleXML.ReplaceCDATA(_xmlNode.find(">values>v")[0], newErrorMessage);
			} catch (err) {
				iLog("SetErrorMessage", err, Log.Type.Error);
			}
		};
		this.SetJ1 = null;
	}
	
	return ERROR;
});

/*    Copyright 2008-2010 Maximum Processing Inc
 */
define('rules/component/External', ['rules/BaseComponent', 'PropertyFields', 'RuleXML', 'Undo', 'UndoObject'], function (BaseComponent, PropertyFields, RuleXML, Undo, UndoObject) {
	function EXTERNAL() {
		this.inheritFrom = BaseComponent;
		this.inheritFrom();

		this.Title = "External Component";
		this.ToolTip = "Delivers a template to the specified screen target after executing the pre-process function";
		this.Src = "../../images/RuleEXTERNAL.png";

		var logClassName = "External.";
		var self = this;
		var _xmlNode = null;

		/* PRIVATE METHODS */

		function iLog(Place, Message, Type, Silent) {
			Log.Add(logClassName + Place + "." + self.GetID(), Message, Type, Silent);
		}

		/* PUBLIC METHODS */

		this.Create = function () {
			try {
				//var uo = new UndoObject();
				//uo.AddUndo(RulesMaker.Load, RuleXML.GetVRM().xml);
				this.BaseCreate();
				this.SetType("EXTERNAL");
				_xmlNode = this.GetNode();
				var values = $(_xmlNode.find('>values')[0]);
				values.append(RuleXML.GetNewElement('n'));
				//uo.AddRedo(RulesMaker.Load, RuleXML.GetVRM().xml);
				//Undo.Add(uo);
			} catch (err) {
				iLog("Create", err, Log.Type.Error);
			}
		};
		this.Load = function (xmlNode) {
			try {
				_xmlNode = $(xmlNode);
				this.BaseLoad(_xmlNode);
			} catch (err) {
				iLog("Load", err, Log.Type.Error);
			}
		};
		this.Search = function (str, caseSensitive) {
			try {
				iLog("Search", "Called", Log.Type.Info);
				this.HighlightAsFound(false);
				if (str == "")
					return;

				var re = (caseSensitive) ? new RegExp(str, "") : new RegExp(str, "i");
				if (this.GetID().search(re) > -1 || this.GetComment().search(re) > -1 || this.GetRuleName().search(re) > -1) {
					iLog("Search", this, Log.Type.Search);
				}
			} catch (err) {
				iLog("Search", err, Log.Type.Error);
			}
		};
		this.GetProperties = function () {
			try {
				var properties = this.GetBaseProperties();
				properties[properties.length] = new PropertyEd.Property(PropertyFields["RuleName"], this.GetRuleName, this.SetRuleName);
				return properties;
			} catch (err) {
				iLog("GetProperties", err, Log.Type.Error);
			}
		};
		this.GetRuleName = function () {
			try {
				return $(_xmlNode.find(">values>n")[0]).text();
			} catch (err) {
				iLog("GetRuleName", err, Log.Type.Error);
			}
		};
		this.SetRuleName = function (newRuleName) {
			try {
				$(_xmlNode.find(">values>n")[0]).text(newRuleName);
			} catch (err) {
				iLog("SetRuleName", err, Log.Type.Error);
			}
		};
	}
	
	return EXTERNAL;
});

/* 	Copyright 2008-2010 Maximum Processing Inc
 */
define('rules/component/If', ['rules/BaseComponent', 'PropertyFields', 'RuleXML', 'Undo', 'UndoObject'], function (BaseComponent, PropertyFields, RuleXML, Undo, UndoObject) {
	function IF() {
		this.inheritFrom = BaseComponent;
		this.inheritFrom();

		this.Src = "../../images/RuleIF.png";
		this.Title = "IF Component";
		this.ToolTip = "Makes a binary decision to determine which of two components will be called next";

		var logClassName = "IF.";
		var self = this;
		var _xmlNode = null;

		/* PRIVATE METHODS */

		function iLog(Place, Message, Type, Silent) {
			Log.Add(logClassName + Place + "." + self.GetID(), Message, Type, Silent);
		}

		/* PUBLIC METHODS */

		this.Create = function () {
			try {
				//var uo = new UndoObject();
				//uo.AddUndo(RulesMaker.Load, RuleXML.GetVRM().xml);
				this.BaseCreate();
				this.SetType("IF");
				_xmlNode = this.GetNode();
				var values = $(_xmlNode.find('>values')[0]);
				values.append(RuleXML.GetNewElement('v'));
				//uo.AddRedo(RulesMaker.Load, RuleXML.GetVRM().xml);
				//Undo.Add(uo);
			} catch (err) {
				iLog("Create", err, Log.Type.Error);
			}
		};
		this.Load = function (xmlNode) {
			try {
				_xmlNode = $(xmlNode);
				this.BaseLoad(_xmlNode);
			} catch (err) {
				iLog("Load", err, Log.Type.Error);
			}
		};
		this.Search = function (str, caseSensitive) {
			try {
				iLog("Search", "Called", Log.Type.Info);
				this.HighlightAsFound(false);
				if (str == "")
					return;

				var re = (caseSensitive) ? new RegExp(str, "") : new RegExp(str, "i");
				if (this.GetID().search(re) > -1 || this.GetComment().search(re) > -1 || this.GetSvrCondition().search(re) > -1) {
					iLog("Search", this, Log.Type.Search);
				}
			} catch (err) {
				iLog("Search", err, Log.Type.Error);
			}
		};
		this.GetProperties = function () {
			try {
				var properties = this.GetBaseProperties();
				properties[properties.length] = new PropertyEd.Property(PropertyFields["SvrCondition"], this.GetSvrCondition, this.SetSvrCondition);
				return properties;
			} catch (err) {
				iLog("GetProperties", err, Log.Type.Error);
			}
		};
		this.GetSvrCondition = function () {
			try {
				var s = $(_xmlNode.find(">values>v")[0]).text();
				return s.replace(/''/g, "'");
			} catch (err) {
				iLog("GetSvrCondition", err, Log.Type.Error);
			}
		};
		this.SetSvrCondition = function (newCondition) {
			try {
				var s = newCondition.replace(/'/g, "''");
				var cdata = RuleXML.GetNewCDATA(s);
				var elem = RuleXML.GetNewElement('v');
				$(elem).append(cdata);
				_xmlNode.find('>values')[0].replaceChild(elem, _xmlNode.find(">values>v")[0]);
			} catch (err) {
				iLog("SetSvrCondition", err, Log.Type.Error);
			}
		};
		this.GetJ2 = function () {
			try {
				return $(_xmlNode.find(">j")[1]).text();
			} catch (err) {
				iLog("GetJ2", err, Log.Type.Error);
			}
		};
		this.SetJ2 = function (newValue) {
			try {
				$(_xmlNode.find(">j")[1]).text(newValue);
			} catch (err) {
				iLog("SetJ2", err, Log.Type.Error);
			}
		};
	}
	
	return IF;
});
/* 	Copyright 2008-2010 Maximum Processing Inc
 */

define('rules/component/InsertUpdateQuery', ['rules/BaseComponent', 'PropertyFields', 'Utilities', 'RuleXML', 'Undo', 'UndoObject'], function (BaseComponent, PropertyFields, Utilities, RuleXML, Undo, UndoObject) {
	function INSERTUPDATEQUERY() {
		this.inheritFrom = BaseComponent;
		this.inheritFrom();

		this.Src = "../../images/RuleINSERTUPDATEQUERY.png";
		this.Title = "Insert / Update Query Component";
		this.ToolTip = "Performs a SQL Insert or Update command";

		var logClassName = "InsertUpdateQuery.";
		var self = this;
		var _xmlNode = null;

		/* PRIVATE METHODS */

		function iLog(Place, Message, Type, Silent) {
			Log.Add(logClassName + Place + "." + self.GetID(), Message, Type, Silent);
		}
		function QueryParam(Name, Type, Value) {
			this.Name = Name;
			this.Type = Type;
			this.Value = Value;
		}

		/* PUBLIC METHODS */

		this.Create = function () {
			try {
				//var uo = new UndoObject();
				//uo.AddUndo(RulesMaker.Load, RuleXML.GetVRM().xml);
				this.BaseCreate();
				this.SetType("INSERTUPDATEQUERY");
				_xmlNode = this.GetNode();
				var values = $(_xmlNode.find('>values')[0]);
				values.append(RuleXML.GetNewElement('query'));
				//uo.AddRedo(RulesMaker.Load, RuleXML.GetVRM().xml);
				//Undo.Add(uo);
			} catch (err) {
				iLog("Create", err, Log.Type.Error);
			}
		};
		this.Load = function (xmlNode) {
			try {
				_xmlNode = $(xmlNode);
				this.BaseLoad(_xmlNode);
			} catch (err) {
				iLog("Load", err, Log.Type.Error);
			}
		};
		this.AddParam = function (paramObj) {
			try {
				var values = $(_xmlNode.find(">values")[0]);
				var param = $(RuleXML.GetNewElement('param'));
				var elm;
				
				elm = RuleXML.GetNewElement('n');
				param.append(elm);
				if (paramObj)
					$(elm).text(Utilities.Trim(paramObj.Name));
				
				elm = RuleXML.GetNewElement('t');
				param.append(elm);
				if (paramObj)
					$(elm).text(Utilities.Trim(paramObj.Type));

				elm = RuleXML.GetNewElement('v');
				param.append(elm);
				if (paramObj)
					$(elm).html(RuleXML.GetNewCDATA(Utilities.Trim(paramObj.Value)));
				
				values.append(param);
			} catch (err) {
				iLog("AddParam", err, Log.Type.Error);
			}
		};
		this.DeleteParam = function (ParamIndex) {
			try {
				var toRemove = _xmlNode.find(">values>param")[ParamIndex];
				toRemove.parentNode.removeChild(toRemove);
			} catch (err) {
				iLog("DeleteParam", err, Log.Type.Error);
			}
		};
		this.Search = function (str, caseSensitive) {
			try {
				iLog("Search", "Called", Log.Type.Info);
				this.HighlightAsFound(false);
				if (str == "")
					return;

				var re = (caseSensitive) ? new RegExp(str, "") : new RegExp(str, "i");
				if (this.GetID().search(re) > -1 || this.GetComment().search(re) > -1 || this.GetQuery().search(re) > -1) {
					iLog("Search", this, Log.Type.Search);
					return;
				};
				var arr = this.GetQueryParams();
				for (var i = 0; i < arr.length; i++) {
					if (arr[i].Name.search(re) > -1 || arr[i].Value.search(re) > -1) {
						iLog("Search", this, Log.Type.Search);
						return;
					}
				}
			} catch (err) {
				iLog("Search", err, Log.Type.Error);
			}
		};
		this.GetProperties = function () {
			try {
				var properties = this.GetBaseProperties();
				properties[properties.length] = new PropertyEd.Property(PropertyFields["Query"], this.GetQuery, this.SetQuery);
				var args = new RulesMaker.ComplexArgs(this.GetProperties, null, null);
				properties[properties.length] = new PropertyEd.Property(PropertyFields["QueryParams"], this.GetQueryParams, this.SetQueryParams, args);
				return properties;
			} catch (err) {
				iLog("GetProperties", err, Log.Type.Error);
			}
		};
		this.GetQuery = function () {
			try {
				var s = $(_xmlNode.find(">values>query")[0]).text();
				return s.replace(/''/g, "'");
			} catch (err) {
				iLog("GetQuery", err, Log.Type.Error);
			}
		};
		this.SetQuery = function (newQuery) {
			try {
				var s = newQuery.replace(/'/g, "''");
				var cdata = RuleXML.GetNewCDATA(s);
				var elem = RuleXML.GetNewElement('query');
				$(elem).append(cdata);
				_xmlNode.find('>values')[0].replaceChild(elem, _xmlNode.find(">values>query")[0]);
			} catch (err) {
				iLog("SetQuery", err, Log.Type.Error);
			}
		};
		this.GetQueryParams = function () {
			try {
				var params = new Array();
				_xmlNode.find(">values>param").each(function () {
					var param = $(this);
					var n = param.find(">n").text();
					var t = param.find(">t").text().toUpperCase();
					var v = param.find(">v").text();
					params.push(new QueryParam(n, t, v));
				});
				return params;
			} catch (err) {
				iLog("GetQueryParams", err, Log.Type.Error);
			}
		};
		this.SetQueryParams = function (params) {
			try {
				var i, j, n1, n2;
				var names = [];
				
				// Clean the XML
				var old = _xmlNode.find(">values>param");
				for (i = 0; i < old.length; i++)
					self.DeleteParam(0);
				
				// Add only parameters with a name
				for (i = 0; i < params.length; i++) {
					n1 = Utilities.Trim(params[i].Name);
					if (n1) {
						self.AddParam(params[i]);
						names.push(n1);
					}
				}
				// Check they are unique
				for (i = 0; i < names.length; i++) {
					n1 = names[i].toUpperCase();
					for (j = 0; j < names.length; j++) {
						n2 = names[j].toUpperCase();
						if (j != i && n2 == n1) {
							jAlert("The parameter '" + names[i] + "' is used more than once!");
							return;
						}
					}
				}
			} catch (err) {
				iLog("SetQueryParams", err, Log.Type.Error);
			}
		};
	}
	
	return INSERTUPDATEQUERY;
});

/*    Copyright 2008-2010 Maximum Processing Inc
 */
define('rules/component/Math', ['rules/BaseComponent', 'PropertyFields', 'RuleXML', 'Undo', 'UndoObject'], function (BaseComponent, PropertyFields, RuleXML, Undo, UndoObject) {
	function MATH() {
		this.inheritFrom = BaseComponent;
		this.inheritFrom();

		this.Src = "../../images/RuleMATH.png";
		this.Title = "Math Component";
		this.ToolTip = "Create, modify, or delete multiple variables with mathematical expressions";

		var logClassName = "Math.";
		var self = this;
		var _xmlNode = null;

		/* PRIVATE METHODS */

		function iLog(Place, Message, Type, Silent) {
			Log.Add(logClassName + Place + "." + self.GetID(), Message, Type, Silent);
		}
		function Param(name, format, value) {
			this.Name = name;
			this.Format = format;
			this.Value = value;
		}

		/* PUBLIC METHODS */

		this.Create = function () {
			try {
				//var uo = new UndoObject();
				//uo.AddUndo(RulesMaker.Load, RuleXML.GetVRM().xml);
				this.BaseCreate();
				this.SetType("MATH");
				_xmlNode = this.GetNode();
				var values = $(_xmlNode.find('>values')[0]);
				values.append(RuleXML.GetNewElement('n'));
				values.append(RuleXML.GetNewElement('f'));
				values.append(RuleXML.GetNewElement('v'));
				//uo.AddRedo(RulesMaker.Load, RuleXML.GetVRM().xml);
				//Undo.Add(uo);
			} catch (err) {
				iLog("Create", err, Log.Type.Error);
			}
		};
		this.Load = function (xmlNode) {
			try {
				_xmlNode = $(xmlNode);
				this.BaseLoad(_xmlNode);
			} catch (err) {
				iLog("Load", err, Log.Type.Error);
			}
		};
		this.AddParam = function (paramObj) {
			try {
				var values = $(_xmlNode.find(">values")[0]);
				var elm;
				
				elm = RuleXML.GetNewElement('n');
				values.append(elm);
				if (paramObj)
					$(elm).text(Utilities.Trim(paramObj.Name));
				
				elm = RuleXML.GetNewElement('f');
				values.append(elm);
				if (paramObj)
					$(elm).text(Utilities.Trim(paramObj.Format));
				
				elm = RuleXML.GetNewElement('v');
				values.append(elm);
				if (paramObj)
					$(elm).text(paramObj.Value);
			} catch (err) {
				iLog("AddParam", err, Log.Type.Error);
			}
		};
		this.DeleteParam = function (ParamIndex) {
			try {
				var n = _xmlNode.find(">values>n")[ParamIndex];
				var f = _xmlNode.find(">values>f")[ParamIndex];
				var v = _xmlNode.find(">values>v")[ParamIndex];
				n.parentNode.removeChild(n);
				f.parentNode.removeChild(f);
				v.parentNode.removeChild(v);
			} catch (err) {
				iLog("DeleteParam", err, Log.Type.Error);
			}
		};
		this.Search = function (str, caseSensitive) {
			try {
				iLog("Search", "Called", Log.Type.Info);
				this.HighlightAsFound(false);
				if (str == "")
					return;

				var re = (caseSensitive) ? new RegExp(str, "") : new RegExp(str, "i");
				if (this.GetID().search(re) > -1 || this.GetComment().search(re) > -1) {
					iLog("Search", this, Log.Type.Search);
					return;
				};
				var arr = this.GetParams();
				for (var i = 0; i < arr.length; i++) {
					if (arr[i].Name.search(re) > -1 || arr[i].Value.search(re) > -1) {
						iLog("Search", this, Log.Type.Search);
						return;
					}
				}
			} catch (err) {
				iLog("Search", err, Log.Type.Error);
			}
		};
		this.GetProperties = function () {
			try {
				var properties = this.GetBaseProperties();
				var args = new RulesMaker.ComplexArgs(this.GetProperties, null, null);
				properties[properties.length] = new PropertyEd.Property(PropertyFields["MathParams"], this.GetParams, this.SetParams, args);
				return properties;
			} catch (err) {
				iLog("GetProperties", err, Log.Type.Error);
			}
		};
		this.GetParams = function () {
			try {
				var params = new Array();
				_xmlNode.find(">values>n").each(function () {
					var n = $(this).text();
					var f = $(this).next().text();
					var v = $(this).next().next().text();
					params[params.length] = new Param(n, f, v);
				});
				return params;
			} catch (err) {
				iLog("GetParams", err, Log.Type.Error);
			}
		};
		this.SetParams = function (params) {
			try {
				var i, n1;
				
				// Clean the XML
				var old = _xmlNode.find(">values>n");
				for (i = 0; i < old.length; i++)
					self.DeleteParam(0);
				
				// Add only parameters with a name
				for (i = 0; i < params.length; i++) {
					n1 = Utilities.Trim(params[i].Name);
					if (n1)
						self.AddParam(params[i]);
				}
			} catch (err) {
				iLog("SetParams", err, Log.Type.Error);
			}
		};
	}
	
	return MATH;
});

/*    Copyright 2008-2010 Maximum Processing Inc
 */
define('rules/component/SelectQuery', ['rules/BaseComponent', 'PropertyFields', 'Utilities', 'RuleXML', 'Undo', 'UndoObject'], function (BaseComponent, PropertyFields, Utilities, RuleXML, Undo, UndoObject) {
	function SELECTQUERY() {
		this.inheritFrom = BaseComponent;
		this.inheritFrom();

		this.Src = "../../images/RuleSELECTQUERY.png";
		this.Title = "Select Query Component";
		this.ToolTip = "Performs a SQL select with parameters";

		var logClassName = "SelectQuery.";
		var self = this;
		var _xmlNode = null;

		/* PRIVATE METHODS */

		function iLog(Place, Message, Type, Silent) {
			Log.Add(logClassName + Place + "." + self.GetID(), Message, Type, Silent);
		}
		function QueryParam(Name, Type, Value) {
			this.Name = Name;
			this.Type = Type;
			this.Value = Value;
		}

		/* PUBLIC METHODS */

		this.Create = function () {
			try {
				//var uo = new UndoObject();
				//uo.AddUndo(RulesMaker.Load, RuleXML.GetVRM().xml);
				this.BaseCreate();
				this.SetType("SELECTQUERY");
				_xmlNode = this.GetNode();
				var values = $(_xmlNode.find('>values')[0]);
				values.append(RuleXML.GetNewElement('query'));
				//uo.AddRedo(RulesMaker.Load, RuleXML.GetVRM().xml);
				//Undo.Add(uo);
			} catch (err) {
				iLog("Create", err, Log.Type.Error);
			}
		};
		this.Load = function (xmlNode) {
			try {
				_xmlNode = $(xmlNode);
				this.BaseLoad(_xmlNode);
			} catch (err) {
				iLog("Load", err, Log.Type.Error);
			}
		};
		this.AddParam = function (paramObj) {
			try {
				var values = $(_xmlNode.find(">values")[0]);
				var param = $(RuleXML.GetNewElement('param'));
				var elm;
				
				elm = RuleXML.GetNewElement('n');
				param.append(elm);
				if (paramObj)
					$(elm).text(Utilities.Trim(paramObj.Name));
				
				elm = RuleXML.GetNewElement('t');
				param.append(elm);
				if (paramObj)
					$(elm).text(Utilities.Trim(paramObj.Type));

				elm = RuleXML.GetNewElement('v');
				param.append(elm);
				if (paramObj)
					$(elm).html(RuleXML.GetNewCDATA(Utilities.Trim(paramObj.Value)));
				
				values.append(param);
			} catch (err) {
				iLog("AddParam", err, Log.Type.Error);
			}
		};
		this.DeleteParam = function (ParamIndex) {
			try {
				var toRemove = _xmlNode.find(">values>param")[ParamIndex];
				toRemove.parentNode.removeChild(toRemove);
			} catch (err) {
				iLog("DeleteParam", err, Log.Type.Error);
			}
		};
		this.Search = function (str, caseSensitive) {
			try {
				iLog("Search", "Called", Log.Type.Info);
				this.HighlightAsFound(false);
				if (str == "")
					return;

				var re = (caseSensitive) ? new RegExp(str, "") : new RegExp(str, "i");
				if (this.GetID().search(re) > -1 || this.GetComment().search(re) > -1 || this.GetQuery().search(re) > -1) {
					iLog("Search", this, Log.Type.Search);
					return;
				};
				var arr = this.GetQueryParams();
				for (var i = 0; i < arr.length; i++) {
					if (arr[i].Name.search(re) > -1 || arr[i].Value.search(re) > -1) {
						iLog("Search", this, Log.Type.Search);
						return;
					}
				}
			} catch (err) {
				iLog("Search", err, Log.Type.Error);
			}
		};
		this.GetProperties = function () {
			try {
				var properties = this.GetBaseProperties();
				properties[properties.length] = new PropertyEd.Property(PropertyFields["Query"], this.GetQuery, this.SetQuery);
				var args = new RulesMaker.ComplexArgs(this.GetProperties, null, null);
				properties[properties.length] = new PropertyEd.Property(PropertyFields["QueryParams"], this.GetQueryParams, this.SetQueryParams, args);
				return properties;
			} catch (err) {
				iLog("GetProperties", err, Log.Type.Error);
			}
		};
		this.GetJ2 = function () {
			try {
				return $(_xmlNode.find(">j")[1]).text();
			} catch (err) {
				iLog("GetJ2", err, Log.Type.Error);
			}
		};
		this.SetJ2 = function (newValue) {
			try {
				$(_xmlNode.find(">j")[1]).text(newValue);
			} catch (err) {
				iLog("SetJ2", err, Log.Type.Error);
			}
		};
		this.GetQuery = function () {
			try {
				var s = $(_xmlNode.find(">values>query")[0]).text();
				return s.replace(/''/g, "'");
			} catch (err) {
				iLog("GetQuery", err, Log.Type.Error);
			}
		};
		this.SetQuery = function (newQuery) {
			try {
				var s = newQuery.replace(/'/g, "''");
				var cdata = RuleXML.GetNewCDATA(s);
				var elem = RuleXML.GetNewElement('query');
				$(elem).append(cdata);
				_xmlNode.find('>values')[0].replaceChild(elem, _xmlNode.find(">values>query")[0]);
			} catch (err) {
				iLog("SetQuery", err, Log.Type.Error);
			}
		};
		this.GetQueryParams = function () {
			try {
				var params = new Array();
				_xmlNode.find(">values>param").each(function () {
					var param = $(this);
					var n = param.find(">n").text();
					var t = param.find(">t").text().toUpperCase();
					var v = param.find(">v").text();
					params.push(new QueryParam(n, t, v));
				});
				return params;
			} catch (err) {
				iLog("GetQueryParams", err, Log.Type.Error);
			}
		};
		this.SetQueryParams = function (params) {
			try {
				var i, j, n1, n2;
				var names = [];
				
				// Clean the XML
				var old = _xmlNode.find(">values>param");
				for (i = 0; i < old.length; i++)
					self.DeleteParam(0);
				
				// Add only parameters with a name
				for (i = 0; i < params.length; i++) {
					n1 = Utilities.Trim(params[i].Name);
					if (n1) {
						self.AddParam(params[i]);
						names.push(n1);
					}
				}
				// Check they are unique
				for (i = 0; i < names.length; i++) {
					n1 = names[i].toUpperCase();
					for (j = 0; j < names.length; j++) {
						n2 = names[j].toUpperCase();
						if (j != i && n2 == n1) {
							jAlert("The parameter '" + names[i] + "' is used more than once!");
							return;
						}
					}
				}
			} catch (err) {
				iLog("SetQueryParams", err, Log.Type.Error);
			}
		};
	}
	
	return SELECTQUERY;
});

define('rules/CDATABatch', ['RuleXML'], function (RuleXML) {
	function CDATABatch() {
		var arr = new Array();

		function Pair(e, v) {
			this.e = e;
			this.v = v;
		}

		this.Add = function (elem, value) {
			arr[arr.length] = new Pair(elem, value);
		};
		this.Process = function () {
			for (var i = 0; i < arr.length; i++) {
				RuleXML.ReplaceCDATA(arr[i].e, arr[i].v);
			}
		};
	}
	
	return CDATABatch;
});

/*    Copyright 2008-2010 Maximum Processing Inc
 */
define('rules/component/Set', ['rules/BaseComponent', 'PropertyFields', 'RuleXML', 'rules/CDATABatch', 'Undo', 'UndoObject'], function (BaseComponent, PropertyFields, RuleXML, CDATABatch, Undo, UndoObject) {
	function SET() {
		this.inheritFrom = BaseComponent;
		this.inheritFrom();

		this.Src = "../../images/RuleSET.png";
		this.Title = "Multi Set Component";
		this.ToolTip = "Create, modify, or delete multiple variables with string expressions";

		var logClassName = "Set.";
		var self = this;
		var _xmlNode = null;

		/* PRIVATE METHODS */

		function iLog(Place, Message, Type, Silent) {
			Log.Add(logClassName + Place + "." + self.GetID(), Message, Type, Silent);
		}
		function Param(Name, Value) {
			this.Name = Name;
			this.Value = Value;
		}

		/* PUBLIC METHODS */

		this.Create = function () {
			try {
				//var uo = new UndoObject();
				//uo.AddUndo(RulesMaker.Load, RuleXML.GetVRM().xml);
				this.BaseCreate();
				this.SetType("SET");
				_xmlNode = this.GetNode();
				var values = $(_xmlNode.find('>values')[0]);
				values.append(RuleXML.GetNewElement('n'));
				values.append(RuleXML.GetNewElement('v'));
				//uo.AddRedo(RulesMaker.Load, RuleXML.GetVRM().xml);
				//Undo.Add(uo);
			} catch (err) {
				iLog("Create", err, Log.Type.Error);
			}
		};
		this.Load = function (xmlNode) {
			try {
				_xmlNode = $(xmlNode);
				this.BaseLoad(_xmlNode);
			} catch (err) {
				iLog("Load", err, Log.Type.Error);
			}
		};
		this.AddParam = function (paramObj) {
			try {
				var values = $(_xmlNode.find(">values")[0]);
				var elm;
				
				elm = RuleXML.GetNewElement('n');
				values.append(elm);
				if (paramObj)
					$(elm).html(RuleXML.GetNewCDATA(Utilities.Trim(paramObj.Name)));
				
				elm = RuleXML.GetNewElement('v');
				values.append(elm);
				if (paramObj)
					$(elm).html(RuleXML.GetNewCDATA(paramObj.Value));
			} catch (err) {
				iLog("AddParam", err, Log.Type.Error);
			}
		};
		this.DeleteParam = function (ParamIndex) {
			try {
				var n = _xmlNode.find(">values>n")[ParamIndex];
				var v = _xmlNode.find(">values>v")[ParamIndex];
				n.parentNode.removeChild(n);
				v.parentNode.removeChild(v);
			} catch (err) {
				iLog("DeleteParam", err, Log.Type.Error);
			}
		};
		this.Search = function (str, caseSensitive) {
			try {
				iLog("Search", "Called", Log.Type.Info);
				this.HighlightAsFound(false);
				if (str == "")
					return;

				var re = (caseSensitive) ? new RegExp(str, "") : new RegExp(str, "i");
				if (this.GetID().search(re) > -1 || this.GetComment().search(re) > -1) {
					iLog("Search", this, Log.Type.Search);
					return;
				};
				var arr = this.GetParams();
				for (var i = 0; i < arr.length; i++) {
					if (arr[i].Name.search(re) > -1 || arr[i].Value.search(re) > -1) {
						iLog("Search", this, Log.Type.Search);
						return;
					}
				}
			} catch (err) {
				iLog("Search", err, Log.Type.Error);
			}
		};
		this.GetProperties = function () {
			try {
				var properties = this.GetBaseProperties();
				var args = new RulesMaker.ComplexArgs(this.GetProperties, null, null);
				properties[properties.length] = new PropertyEd.Property(PropertyFields["SetParams"], this.GetParams, this.SetParams, args);
				return properties;
			} catch (err) {
				iLog("GetProperties", err, Log.Type.Error);
			}
		};
		this.GetParams = function () {
			try {
				var params = new Array();
				_xmlNode.find(">values>n").each(function () {
					var n = $(this).text();
					var v = $(this).next().text();
					params[params.length] = new Param(n, v);
				});
				return params;
			} catch (err) {
				iLog("GetParams", err, Log.Type.Error);
			}
		};
		this.SetParams = function (params) {
			try {
				var i, n1;
				
				// Clean the XML
				var old = _xmlNode.find(">values>n");
				for (i = 0; i < old.length; i++)
					self.DeleteParam(0);
				
				// Add only variables with a name
				for (i = 0; i < params.length; i++) {
					n1 = Utilities.Trim(params[i].Name);
					if (n1)
						self.AddParam(params[i]);
				}
			} catch (err) {
				iLog("SetParams", err, Log.Type.Error);
			}
		};
	}
	
	return SET;
});

/*    Copyright 2008-2010 Maximum Processing Inc
 */
define('rules/component/Template', ['rules/BaseComponent', 'PropertyFields', 'RuleXML', 'Undo', 'UndoObject'], function (BaseComponent, PropertyFields, RuleXML, Undo, UndoObject) {
	function TEMPLATE() {
		this.inheritFrom = BaseComponent;
		this.inheritFrom();

		this.Src = "../../images/RuleTEMPLATE.png";
		this.Title = "Template Component";
		this.ToolTip = "Delivers a template to the specified screen target WITHOUT executing the pre-process function";

		var logClassName = "Template.";
		var self = this;
		var _xmlNode = null;

		/* PRIVATE METHODS */

		function iLog(Place, Message, Type, Silent) {
			Log.Add(logClassName + Place + "." + self.GetID(), Message, Type, Silent);
		}

		/* PUBLIC METHODS */

		this.Create = function () {
			try {
				//var uo = new UndoObject();
				//uo.AddUndo(RulesMaker.Load, RuleXML.GetVRM().xml);
				this.BaseCreate();
				this.SetType("TEMPLATE");
				_xmlNode = this.GetNode();
				var values = $(_xmlNode.find('>values')[0]);
				values.append(RuleXML.GetNewElement('n'));
				values.append(RuleXML.GetNewElement('t'));
				//uo.AddRedo(RulesMaker.Load, RuleXML.GetVRM().xml);
				//Undo.Add(uo);
			} catch (err) {
				iLog("Create", err, Log.Type.Error);
			}
		};
		this.Load = function (xmlNode) {
			try {
				_xmlNode = $(xmlNode);
				this.BaseLoad(_xmlNode);
			} catch (err) {
				iLog("Load", err, Log.Type.Error);
			}
		};
		this.Search = function (str, caseSensitive) {
			try {
				iLog("Search", "Called", Log.Type.Info);
				this.HighlightAsFound(false);
				if (str == "")
					return;

				var re = (caseSensitive) ? new RegExp(str, "") : new RegExp(str, "i");
				if (this.GetID().search(re) > -1 || this.GetComment().search(re) > -1 || this.GetName().search(re) > -1 || this.GetTarget().search(re) > -1) {
					iLog("Search", this, Log.Type.Search);
				}
			} catch (err) {
				iLog("Search", err, Log.Type.Error);
			}
		};
		this.GetProperties = function () {
			try {
				var properties = this.GetBaseProperties();
				properties[properties.length] = new PropertyEd.Property(PropertyFields["Name"], this.GetName, this.SetName);
				properties[properties.length] = new PropertyEd.Property(PropertyFields["Target"], this.GetTarget, this.SetTarget);
				return properties;
			} catch (err) {
				iLog("GetProperties", err, Log.Type.Error);
			}
		};
		this.GetName = function () {
			try {
				return $(_xmlNode.find(">values>n")[0]).text();
			} catch (err) {
				iLog("GetName", err, Log.Type.Error);
			}
		};
		this.GetTarget = function () {
			try {
				return $(_xmlNode.find(">values>t")[0]).text();
			} catch (err) {
				iLog("GetTarget", err, Log.Type.Error);
			}
		};
		this.SetName = function (newName) {
			try {
				$(_xmlNode.find(">values>n")[0]).text(newName);
			} catch (err) {
				iLog("SetName", err, Log.Type.Error);
			}
		};
		this.SetTarget = function (newTarget) {
			try {
				$(_xmlNode.find(">values>t")[0]).text(newTarget);
			} catch (err) {
				iLog("SetTarget", err, Log.Type.Error);
			}
		};
	}
	
	return TEMPLATE;
});
